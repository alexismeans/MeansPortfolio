{
  "hash": "3382468dc2a20c644ab14996f5663807",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Task Abstraction\"\nauthor: \"Alexis Means\"\ncode-fold: TRUE\n---\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\n\n## Action-Target Pairs\n\n### Proportion of Observed Families\n\nidentify attributes (top observed families)\n\nCompare attributes (# of observations in each family)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Clean the comp dataset and create a new column for family proportions\nfam_prop<- comp %>%\n  mutate(spp_code = str_trim(spp_code)) %>%             \n  filter(!str_to_lower(spp_code) %in%                   \n           str_to_lower(c(\"Litter\", \"Water\", \"Lichen\", \"Rocks\", \"Earth\"))) %>% \n  left_join(plants, by = \"spp_code\") %>% \n  count(Family) %>% \n  arrange(n) %>% \n  mutate(proportions = n/sum(n)* 100) %>% \n  rename(fam_count = n)\n\n#create a new object with the top 10 species in descending order\ntop_fam <-  fam_prop %>% \n  arrange(desc(proportions)) %>% \n  slice_head(n = 10)\n\n#create boxplot of the top 10 families\nggplot(top_fam, aes(x = fct_reorder(Family, -proportions), y = proportions, fill = Family)) +\n  geom_bar(stat = \"identity\") +\n  scale_fill_viridis_d(option = \"viridis\") + \n  labs(\n    x = \"Family\",\n    y = \"Proportion (%)\",\n    title = \"Top 10 Families by Proportion\"\n  ) +\n  theme_minimal() +\n  theme(\n    axis.text.x = element_text(angle = 45, hjust = 1),\n    legend.position = \"none\")\n```\n\n::: {.cell-output-display}\n![](task.abstractions_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n\n### Proportion of Observed Species\n\nidentify attributes (top observed species)\n\nCompare attributes (# of observations for each species, as well as native vs invasive species)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Clean the comp dataset and create a new column for species proportions\nspp_num <- comp %>%\n  mutate(spp_code = str_trim(spp_code)) %>%              \n  filter(!str_to_lower(spp_code) %in%                   \n           str_to_lower(c(\"Litter\", \"Water\", \"Lichen\", \"Rocks\", \"Earth\"))) %>%\n  count(spp_code) %>%\n  arrange(n) %>%\n  left_join(plants, by = \"spp_code\") %>%\n  mutate(proportion = (n / sum(n)) * 100) %>% \n  rename(spp_count = n, spp_code_prop = proportion) \n\n#Create new object with the top 10 species observed in descending order\ntop_spp <- spp_num %>%\n  arrange(desc(spp_code_prop)) %>%\n  slice_head(n = 10)\n\n#Create a boxplot of the top 10 species \nggplot(top_spp, aes(x = fct_reorder(spp_code, -spp_code_prop), y = spp_code_prop, fill = status)) +\n  geom_bar(stat = \"identity\") +\n  theme_minimal() +\n  labs(\n    x = \"Species Code\",\n    y = \"Proportion (%)\",\n    title = \"Top 20 Species by Proportion\",\n    fill = \"status\"\n  )+\n  theme(\n    axis.text.x = element_text(angle = 45, hjust = 1),\n    legend.position = \"none\")\n```\n\n::: {.cell-output-display}\n![](task.abstractions_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n\n### Status of Observed Species\n\ncompare features (invasive vs native species)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Clean the comp dataset and create a new column for status proportions\ninv <- comp %>%\n  mutate(spp_code = str_trim(spp_code)) %>%             \n  filter(!str_to_lower(spp_code) %in%                   \n           str_to_lower(c(\"Litter\", \"Water\", \"Lichen\", \"Rocks\", \"Earth\"))) %>%\n  left_join(plants, by = \"spp_code\") %>%\n  count(status) %>%\n  arrange(n) %>% \n  mutate(proportion = (n / sum(n)) * 100)\n\n#Create a piechart comparing the native vs invasive species\nggplot(inv, aes(x = \"\", y = proportion, fill = status)) +\n  geom_bar(stat = \"identity\", width = 1) +\n  coord_polar(\"y\") +\n  labs(title = \"Species Status\") +\n  theme_void()\n```\n\n::: {.cell-output-display}\n![](task.abstractions_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "task.abstractions_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}