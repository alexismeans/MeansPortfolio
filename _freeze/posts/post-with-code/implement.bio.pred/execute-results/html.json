{
  "hash": "8bbb97159892df5cfb3d7b908a8a054b",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Implementing Biomass Predictions\"\nauthor: \"Alexis Means\"\ndate: \"2025-10-1\"\ndescription: This document provides the code used to implement my linear regressions equations on my dataset and compute the missing biomass values. \nformat:\n  html:\n    toc: true\n    toc-location: left\n    toc-depth: 3\n    code-fold: true\neditor: visual\n---\n\n\n\n## Data Wrangling\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(MuMIn)\nlibrary(terra)\nlibrary(broom)\nlibrary(readr)\nlibrary(readxl)\nlibrary(sf)\n\nsetwd(\"C:/Users/Alexis Means/Documents/Project/Nutrition Sampling/R code/biomass\")\n\n# Load the global models\nspp_models <- readRDS('regression_equations/24and25-Biomass-Regression-Species-Top-Model-List.rds')\ngenus_models <- readRDS('regression_equations/24and25-Biomass-Regression-Genus-Top-Model-List.rds')\nfamily_models <- readRDS('regression_equations/24and25-Biomass-Regression-Family-Top-Model-List.rds')\nfunctionalgroup_models <- readRDS('regression_equations/24and25-Biomass-Regression-Functional-Group-Top-Model-List.rds')\n\n\n#2024 and 2025 observations \ndb <- \"C:/Users/Alexis Means/Documents/Project/Nutrition Sampling/VegDatabases/Working.composition.data.xlsx\"\nbiomass <- read_excel(db, \"Biomass\")\ncomp <- read_excel(db, \"Composition\")\ntransect <- read_excel(db, \"Transect\")\nplant <- read_excel(db, \"PlantList\")\n\n#Organizing and joining databases####\ncomp <- comp %>% \n  mutate( Date = ymd(Date),          \n          julian = yday(Date)         \n  ) %>% \n  select(julian, PlotID, Quadrat, Spp, Percent, Pheno, Part)\n\n\nbiomass <- biomass %>% \n  rename(DryWeight = `DryWeight(g)`) %>% \n  select(PlotID, Quadrat, Spp, Pheno, Part, DryWeight)\n\n\n\ntransect_sf <- st_as_sf(transect,\n                        coords = c(\"BeginLong\", \"BeginLat\"), \n                        crs = 4326)   # WGS84 (lat/long)\ntransect_utm <- st_transform(transect_sf, crs = 32610)\ncoords <- st_coordinates(transect_utm)\n\ntransect <- transect %>%\n  mutate(BeginUTM_Easting = coords[,1],\n         BeginUTM_Northing = coords[,2]) %>% \n  select(PVT, PlotID, BeginUTM_Northing, BeginUTM_Easting)\n\n\n\nplant <- plant %>% \n  select(Spp, Family, Genus, Species, FG_New) %>% \n  rename(FunctionalGroup = FG_New)\n\n\n\n#create object for inorganic matter \nabiotic <- c(\"LITTER\",\"EARTH\", \"LICHEN\", \"WATER\", \"ROCKS\")\n\n\n#combining and creating an overall %cover for inorganic matter in each quadrat\ncomp <- comp %>% \n  group_by(PlotID, Quadrat) %>% \n  mutate(Abiotic.cover = sum(Percent[(Spp %in% abiotic)])) %>% \n  ungroup()\n\n\n#Left join biomass and comp by quadrat and plot_ID\ncomp <- comp %>% \n  left_join(y = biomass,\n            by = c(\"PlotID\", \"Quadrat\", \"Spp\", \"Pheno\", \"Part\")) \n\n\n#filtering out all quadrats where no biomass is recorded for the quadrat\n#filter out all of the abiotic observations\ncomp <- comp %>% \n  filter(!(Spp %in% abiotic)) \n\n\n## left join columns from plant list, comp, biomass and transect to keep the necessary columns \ncomp <- comp %>% \n  left_join(y = plant,\n            by = \"Spp\") %>%  \n  left_join(y=transect,\n            by = \"PlotID\", \n            relationship = \"many-to-one\") #since there is multiple plotID duplicates this is necessary to join the transect database\n\n\ncomp <- comp %>% \n  select(julian, PVT, PlotID, Quadrat, Spp, Pheno, Part, Abiotic.cover,\n         DryWeight, Percent, Family, Genus, Species, FunctionalGroup, BeginUTM_Easting,\n         BeginUTM_Northing)\n\n\n# Ensure there's an id column\nif (!\"ID\" %in% colnames(comp)) {\n  comp$ID <- 1:nrow(comp)\n}\n\n# Create empty list to load the covariates into\ncovariates <- vector(mode = 'list')\n\n# List all the covariates that you want to use\ncovariates$asp <- rast(\"C:/Users/Alexis Means/OneDrive/OneDrive - University of Idaho/DocuMents/Project/Nutrition Sampling/Rasters/LF_Asp/LC20_Asp_220.tif\")\ncovariates$elev <- rast(\"C:/Users/Alexis Means/OneDrive/OneDrive - University of Idaho/DocuMents/Project/Nutrition Sampling/Rasters/LF_Elev/LC20_Elev_220.tif\")\n\n# Make a shape object out of the coordinates that exist in comp\ncoords <- vect(comp,\n               geom = c(\"BeginUTM_Easting\",\"BeginUTM_Northing\"),\n               crs = \"EPSG:32610\")\n\nfor (i in 1:length(covariates)){\n  proj.coords = project(x = coords,\n                        y = covariates[[i]])\n  out = extract(x = covariates[[i]],\n                y = proj.coords)\n  comp[,names(covariates[i])] = out [,2]\n}\n\n#make sure everything is being read the way we want it to \ncomp$elev = as.numeric(comp$elev)\ncomp$Family = as.factor(comp$Family)\ncomp$Genus= as.factor(comp$Genus)\ncomp$asp = as.numeric(comp$asp)\ncomp$Spp= as.factor(comp$Spp)\ncomp$DryWeight= as.numeric(comp$DryWeight)\n\n\n#restructure df \ncomp <- comp %>% \n  select(ID, PlotID, Spp, Family, Genus, DryWeight, Percent, julian, PVT, Abiotic.cover, elev, asp, FunctionalGroup)\n\nmodel.y <- comp %>% \n  select(ID, PlotID, Spp, Family, Genus, DryWeight, PVT, FunctionalGroup)\nmodel.x <- comp %>% \n  select(Percent, julian, Abiotic.cover, elev, asp) \n```\n:::\n\n\n\n## Transform Covariates\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Define covariate transformations\ntransformations <- function(x) {\n  data.frame(\n    identity = x,\n    sin = sin(x),\n    cos = cos(x),\n    quadratic = x^2,\n    cubic = x^3,\n    log = ifelse(x > 0, log(x), NA),\n    sqrt = ifelse(x > 0, sqrt(x), NA)\n  )\n}\n\n\n#calculate transformed covariates\ntransform.covars = lapply(X = model.x,\n                          FUN = transformations)\ntransform.covars = do.call(cbind, transform.covars)\n\n\n#rename columns\ncolnames(transform.covars) = unlist(lapply(X = c(\"Percent\", \"julian\", \"Abiotic.cover\", \"elev\", \"asp\"),\n                                           FUN = function(var) {\n                                             paste0(var, '_', c('identity', 'sin', 'cos', 'quadratic', 'cubic', 'log', 'sqrt'))\n                                           }))\n\n\n\n#scale and center predictor variables\nmodel.x = transform.covars %>% \n  mutate(across(everything(), ~ (.-mean(.))/sd(.))) %>% \n  select_if(~ !any(is.na(.)))\n\ndata <- cbind(model.y, model.x)\n\n\ndata$Family = as.character(data$Family)\ndata$Genus= as.character(data$Genus)\ndata$Spp= as.character(data$Spp)\ndata$DryWeight= as.numeric(data$DryWeight)\n```\n:::\n\n\n\n## Biomass Predict Function\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfill_dryweight <- function(data, spp_models, genus_models, family_models, functionalgroup_models) {\n  # initialize column with observed values\n  data$DryWeight_pred <- data$DryWeight\n  \n  # loop over rows with missing DryWeight\n  for (i in which(is.na(data$DryWeight))) {\n    row <- data[i, , drop = FALSE]  # keep it as a dataframe\n    pred <- NA\n    \n    # try species model\n    if (\"Spp\" %in% names(row) && !is.na(row$Spp) && row$Spp %in% names(spp_models)) {\n      mod <- spp_models[[row$Spp]]\n      pred <- predict(mod, newdata = row)\n    }\n    \n    # fallback: genus model\n    if (is.na(pred) && \"Genus\" %in% names(row) && !is.na(row$Genus) && row$Genus %in% names(genus_models)) {\n      mod <- genus_models[[row$Genus]]\n      pred <- predict(mod, newdata = row)\n    }\n    \n    # fallback: family model\n    if (is.na(pred) && \"Family\" %in% names(row) && !is.na(row$Family) && row$Family %in% names(family_models)) {\n      mod <- family_models[[row$Family]]\n      pred <- predict(mod, newdata = row)\n    }\n    \n    # fallback: functional group model\n    if (is.na(pred) && \"FunctionalGroup\" %in% names(row) && !is.na(row$FunctionalGroup) && row$FunctionalGroup %in% names(functionalgroup_models)) {\n      mod <- functionalgroup_models[[row$FunctionalGroup]]\n      pred <- predict(mod, newdata = row)\n    }\n    \n    # save prediction if found, rounded to 2 decimals\n    if (!is.na(pred)) {\n      data$DryWeight_pred[i] <- round(pred, 2)\n    }\n  }\n  \n  return(data)\n}\n\ndf <- fill_dryweight(\n  data, \n  spp_models, \n  genus_models, \n  family_models, \n  functionalgroup_models\n)\n\npredictions <- df %>% \n  select(ID, PlotID, Spp, DryWeight, DryWeight_pred)\n\n\npercent <- comp %>% \n  select(ID, Percent)\n\npredictions <- predictions %>% \n  left_join(percent, by = \"ID\")\n\nView(predictions)\n#library(writexl)\n\n# save dataframe to Excel\n#write_xlsx(predictions, \"C:/Users/Alexis Means/Documents/Project/Nutrition Sampling/R code/biomass/24and25predictions.xlsx\")\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}