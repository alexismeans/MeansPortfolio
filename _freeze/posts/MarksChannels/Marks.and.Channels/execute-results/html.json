{
  "hash": "4262c694effd5610b1d39486979ba1e8",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Assignment 4\"\nsubtitle: Marks and Channels\nauthor: Alexis Means\ndate: 2025-01-25\ncode-fold: true\ncode-tools: true\ndescription: Welcome to the fascinating world of biomass and percent cover\neditor: \n  markdown: \n    wrap: 72\n---\n\n\n\nIgnore this first chunk of code, this is just a bunch of rambling for me\nto create the table that I wanted to view all of my data within.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(terra)\n\n\nsetwd(\"C:/Users/Alexis Means/Documents/Project/Nutrition Sampling/R code\")\n\n#load in objects\nbiomass <- read.csv(\"C:/Users/Alexis Means/Documents/Project/Nutrition Sampling/R code/Cleaning/processed.data/biomass.csv\")\ncomp <- read.csv(\"C:/Users/Alexis Means/Documents/Project/Nutrition Sampling/R code/Cleaning/processed.data/comp.csv\")\ntransect <- read.csv(\"C:/Users/Alexis Means/Documents/Project/Nutrition Sampling/R code/Cleaning/processed.data/transect.csv\")\nplant <- read.csv(\"C:/Users/Alexis Means/Documents/Project/Nutrition Sampling/R code/Cleaning/processed.data/plant_list.csv\")\n\n\n\n#Organizing and joining databases####\n#create object for inorganic matter\nabiotic <- c(\"LITTER\",\"EARTH\", \"LICHEN\", \"WATER\", \"ROCKS\")\n\n\n#combining and creating an overall %cover for inorganic matter in each quadrat\ncomp <- comp %>% \n  group_by(PlotID, Quadrat) %>% \n  mutate(Abiotic.cover = sum(Percent[(Spp %in% abiotic)])) %>% \n  ungroup()\n\n\n#Left join biomass and comp by quadrat and plot_ID\ncomp <- comp %>% \n  left_join(y = biomass,\n            by = c(\"PlotID\", \"Quadrat\", \"Spp\", \"Pheno\", \"Part\")) \n\n\n#filtering out all quadrats where no biomass is recorded for the quadrat\n#filter out all of the abiotic observations\ncomp <- comp %>% \n  filter(!(Percent %in% abiotic)) %>% \n  filter(!is.na(DryWeight.g.))\n\n\n## left join columns from plant list, comp, biomass and transect to keep the necessary columns \nplant <- plant %>% \n  select(Spp, Genus, Family, FunctionalGroup, Species)\n\ncomp <- comp %>% \n  left_join(y = plant,\n            by = \"Spp\")\n\ncomp <- comp %>% \n  select(-Dates.y, -ActualName.y, -Stage.y)\n\ntransect <- transect %>% \n  select(PVT, PlotID, BeginUTM_Northing, BeginUTM_Easting)\n\ncomp <- comp %>% \n  left_join(y=transect,\n            by = \"PlotID\", \n            relationship = \"many-to-one\") #since there is multiple plotID duplicates this is necessary to join the transect database\n\n\n#Loading Covariates####\n\n#create empty list to load the covariates into\ncovariates <-  vector(mode = 'list')\n\n#List all the covariates that you want to use\ncovariates$asp <- rast(\"C:/Users/Alexis Means/OneDrive/OneDrive - University of Idaho/DocuMents/Project/Nutrition Sampling/Rasters/LF_Asp/LC20_Asp_220.tif\")\ncovariates$elev <- rast(\"C:/Users/Alexis Means/OneDrive/OneDrive - University of Idaho/DocuMents/Project/Nutrition Sampling/Rasters/LF_Elev/LC20_Elev_220.tif\")\n\n#can add more covariates here without updating for loop\n\n\n#make a shape object out of the coordinates that exist in comp\ncoords <- vect(comp,\n               geom = c(\"BeginUTM_Easting\",\"BeginUTM_Northing\"),\n               crs = \"EPSG:32610\")\n\n\n#create a for loop#### \n#goes over each covariate raster that we have and \n#reprojecting the UTM points into the the same ESPG of the imported rasters\n\nfor (i in 1:length(covariates)){\n  proj.coords = project(x = coords,\n                        y = covariates[[i]])\n  out = extract(x = covariates[[i]],\n                y = proj.coords)\n  comp[,names(covariates[i])] = out [,2]\n}\n\n## THIS IS A CHECK IF YOU NEED IT\n# helps plot points to troubleshoot\n#i =1\n#proj.coords = project(x = coords,\n#                     y = covariates[[i]])\n#plot(covariates[[1]])\n#points(proj.coords)\n\n#restructured comp dataframe####\n#to make more readable and made sure that my variables\n#are being read correctly before continuing (as a number or categorical variable)\n\ncomp1 <- comp %>% \n  select(PlotID, Spp, Family, Genus, ActualName.x, FunctionalGroup, DryWeight.g., Percent, Julian_Day.x, PVT, Abiotic.cover, elev, asp)\n\n#If there are any 0 values it corrects them to 0.01\ncomp1$DryWeight.g. = ifelse(comp1$DryWeight.g. == 0, .01, comp1$DryWeight.g.)\n\n#make sure everything is being read the way we want it to \ncomp1$elev = as.numeric(comp1$elev)\ncomp1$Family = as.factor(comp1$Family)\ncomp1$Genus= as.factor(comp1$Genus)\ncomp1$ActualName.x= as.factor(comp1$ActualName.x)\ncomp1$Spp= as.factor(comp1$Spp)\ncomp1$DryWeight.g.= as.numeric(comp1$DryWeight.g.)\ncomp1$PVT= as.factor(comp1$PVT)\n\n#calculate sample size for each hierarchical group####\n#species\ncomp1 <- comp1 %>% \n  group_by(ActualName.x) %>% \n  mutate(n.Species = sum(!is.na(ActualName.x))) %>% \n  ungroup()\n\ncomp1 <- comp1 %>% \n  group_by(Genus) %>% \n  mutate(n.Genus = sum(!is.na(Genus))) %>% \n  ungroup()\n\ncomp1 <- comp1 %>% \n  group_by(Family) %>% \n  mutate(n.Family =  sum(!is.na(Family))) %>% \n  ungroup()\n\ncomp1 <- comp1 %>% \n  group_by(FunctionalGroup) %>% \n  mutate(n.FunctionalGroup = sum(!is.na(FunctionalGroup))) %>% \n  ungroup()\n\ncomp1 <- comp1 %>% \n  rename(julian = Julian_Day.x)\n```\n:::\n\n\n\n## Expressiveness and Effectiveness\n\n### Species- Richness\n\nUltimately with my data, I hope to be able to determine any differences\nin nutritional quality between differing vegetation communities. Before\nI get to that point, I want to do some simple comparisons of the 5\ndifferent vegetation communities that I sampled. With my first graph I\nwant to compare the species richness (number of species observed)\nbetween my vegetation communities.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncomp2 <- comp1 %>% \n  left_join(y=transect,\n            by = \"PlotID\") %>% \n  group_by(PlotID) %>% \n  mutate(species_richness = n_distinct(ActualName.x))\ncomp2$PVT.x <- factor(comp2$PVT.x)\nView(comp2)\n\nggplot(comp2, aes(x = PVT.x, y = species_richness, fill = PVT.x)) +\n  geom_boxplot() +\n  labs(title = \"Species Richness by Vegetation Communities\",\n       x = \"Vegetation Type\", \n       y = \"Species Richness\") +\n  scale_x_discrete(labels = NULL) +\n  scale_fill_discrete(name = \"Vegetation Type\",\n                      labels = c(\"668\" = \"Scabland Shrubland\", \n                                 \"669\" = \"Big Sagebrush Shrubland\",\n                                 \"672\" = \"Grassland\",\n                                 \"674\" = \"Big Sagebrush Steppe\",\n                                 \"682\" = \"Riparian\")) +\n  scale_y_continuous(limits = c(5, 20), breaks = c(5, 10, 15, 20)) +\n  theme(axis.text.x = element_blank(), \n        axis.ticks.x = element_blank()) \n```\n\n::: {.cell-output-display}\n![](Marks.and.Channels_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\n\n**Figure 1** Shows the number of unique species that were identified in\neach vegetation community. Because some of the names are so obnoxiously\nlong, I decided it was more effective to color each box and use a key to\nidentify the different communities. I was surprised to see that the\nscabland shrubland community had the greatest biodiversity. A lot of our\nsampling was done within the grassland community because it makes up a\nmajority of our study area, so I expected that or the riparian area to\nhave the greatest diversity. The more you know I guess.\n\n### PVT Species Composition\n\nIf I wanted to approach this slightly different and make it really\noverwhelming, I could look at the composition of species observed in\neach community instead of the richness and show each species in a\nstacked bar graph.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncomp1 <- comp1 %>% mutate(PVT = as.factor(PVT))\n\ntop_30 <- comp1 %>%\n  group_by(PVT, ActualName.x) %>%\n  summarise(Count = n(), .groups = 'drop') %>%\n  arrange(PVT, desc(Count)) %>%\n  group_by(PVT) %>%\n  slice_head(n = 30)\n\ntop_10_names <- top_30 %>%\n  count(ActualName.x, sort = TRUE) %>%\n  slice_head(n = 10) %>%\n  pull(ActualName.x)\n\nggplot(top_30 %>% filter(ActualName.x %in% top_10_names), \n       aes(x = PVT, y = Count, fill = ActualName.x)) +\n  geom_bar(stat = \"identity\") +\n  labs(title = \"Species composition within Vegetation Communities\",\n       x = \"Vegetation Type\", y = \"Spp Count\", fill = NULL) +\n  theme_minimal() +\n  theme(legend.position = \"bottom\", \n        legend.key.size = unit(5, \"pt\"),\n        legend.text = element_text(size = 6))\n```\n\n::: {.cell-output-display}\n![](Marks.and.Channels_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n\n**Figure 2** is a mess of squished colors and scientific names that most\npeople don't know or care about when making this comparison. It also\ndoes not get the same point across that I do when comparing species\nrichness. Since I sampled the grassland community so much, comparing its\ndiversity to the other vegetation communities is inconsistent and does\nnot demonstrate the diversity of that community. Believe it or not I\nalso had to limit the number of names to the top 30 within the legend to\nmake the graph even remotely readable.\n\n## Descriminability\n\n### Phenology Timing\n\nOne of the big things that I was trying to capture with my data is the\n\"green-up\" of the vegetation throughout the summer. To do so I had to\nmake sure I was sampling early enough to get most of my species in their\nnewly emergent stage (N) and make sure I continued to sample until a\nmajority of the vegetation reached senescence (C).\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfilter_pheno <- comp %>% \n  select(Julian_Day.x, PlotID, Spp, ActualName.x, Percent, Pheno, Part, DryWeight.g., Genus, Family, Species, FunctionalGroup, PVT, BeginUTM_Northing, BeginUTM_Easting, asp, elev) \n\nfilter_pheno <- filter_pheno %>% \n  mutate(Month = case_when(\n    Julian_Day.x >= 91 & Julian_Day.x <= 120 ~ \"April\",\n    Julian_Day.x >= 121 & Julian_Day.x <= 151 ~ \"May\",\n    Julian_Day.x >= 152 & Julian_Day.x <= 181 ~ \"June\",\n    Julian_Day.x >= 182 & Julian_Day.x <= 212 ~ \"July\",\n    Julian_Day.x >= 213 & Julian_Day.x <= 243 ~ \"August\",\n    TRUE ~ NA_character_), \n   Month = factor(Month, levels = c(\"April\", \"May\", \"June\", \"July\"), ordered = TRUE)\n  )\n   \nfilter_pheno <- filter_pheno %>% \n  mutate(Pheno = factor(Pheno, levels = c(\"N\", \"B\", \"FL\", \"FR\", \"M\", \"C\"), ordered = TRUE)) \n  \nView(filter_pheno)\n\n\nggplot(filter_pheno, aes(x = Pheno)) +\n  geom_bar(fill = \"blue\", color = \"black\") +  \n  labs(\n    title = \"Phenology Counts by Month\",\n    x = \"Phenology \",\n    y = \"Count\"\n  ) +\n  facet_wrap(~ Month, ncol = 2, drop = FALSE) +  \n  theme_minimal() +\n  theme(\n    strip.text = element_text(size = 12, face = \"bold\"),\n    legend.position = \"none\"  \n  )\n```\n\n::: {.cell-output-display}\n![](Marks.and.Channels_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n\n**Figure 3** shows the progression of phenology stages throughout my\nsampling time frame for all of the species that I observed. By breaking\nit into months it allows me to compare how each of the phenological\nstages progressed, and determine if I think I accurately captured the\nspeed at which the nutritional landscape progresses.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(filter_pheno, aes(x = Julian_Day.x, color = Pheno)) +  \n  geom_line(stat = \"count\", linewidth = 1.2) +\n  scale_color_viridis_d(option = \"viridis\", begin = 0, end = 1, name = \"Phenology State\") + \n  labs(\n    title = \"Phenology Trends Over Time\",\n    x = \"Julian Day\",\n    y = \"# of Observations\"\n  ) +\n  theme_minimal() +\n  theme(\n    strip.text = element_text(size = 12, face = \"bold\"),\n    legend.position = \"right\"  \n  )\n```\n\n::: {.cell-output-display}\n![](Marks.and.Channels_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n\n**Figure 4** wow this one was worse than I thought it was going to be.\nWith this graph I used the same data from the previous graph. Instead of\nbreaking it up into different categories for each month I used a line\ngraph to plot the number of observations for each phenological stage\nover time. There is so much information and overlap between the\ndifferent lines that it is hard to tell what is happening with any of\nthem because they are stacked on top of each other. The color scale also\ndoes not work for this because of the gradient, the colors are too\nclosely related and are even harder to differentiate when they are all\njumbled together.\n\n## Separability\n\n### Covariate Impact on Biomass\n\nOne of the covariates I am thinking about using to create a predictive\nmodel is elevation. I would like to know if it makes an impact on\nbiomass or percent cover of the vegetation that I observed within my\ntransects Within this graph I wanted to observe the trends of biomass as\nit changes along an elevation gradient. I also colored the each point by\nthe vegetation community that it was sampled within.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfiltered_data <- comp1 %>% filter(DryWeight.g. <= 75)\n\nggplot(filtered_data, aes(x = elev, y = DryWeight.g., color = PVT)) +\n  geom_point(alpha = 0.6) +  # Add transparency to avoid overplotting\n  geom_smooth(method = \"lm\", se = FALSE, color = \"black\") +  # Add overall trendline\n  labs(title = \"Biomass trends by Elevation\",\n       x = \"Elevation\", y = \"Biomass (g)\", color = \"PVT\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](Marks.and.Channels_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n\n**Figure 5** Here I chose to use a scatterplot to demonstrate any trends\nthere may be in dry biomass weight as the transects move up in\nelevation. Since elevation is a general measurement for the transect,\nthere are multiple observations assigned to the exact same elevation\nmaking it look a little messy and harder to see a trend. I also chose to\ncolor each observation by vegetation type (PVT) to observe those\ndifferences as well, but some of the colors are slightly muted and hard\nto tell the difference.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntotalbio <- comp1 %>% \n  group_by(PlotID) %>% \n  mutate(biomass = sum(DryWeight.g.)) \ntotalbio$PVT <- factor(totalbio$PVT)\n\nView(totalbio)\n\nggplot(totalbio, aes(x = elev, y = biomass, color = PVT)) +\n  geom_point(alpha = 1) +  \n  geom_smooth(method = \"lm\", se = FALSE, color = \"black\") +   \n  labs(title = \"Biomass trends by Elevation\",\n       x = \"Elevation\", y = \"Biomass (g)\", color = \"PVT\") +\n  scale_color_manual(values = c(\"668\" = \"violet\", \"669\" = \"red\", \"674\" = \"yellow\", \"682\"= \"blue\", \"672\" = \"green\"))+\n  theme_gray()\n```\n\n::: {.cell-output-display}\n![](Marks.and.Channels_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\n**Figure 6** I still thought that the overall premise of the last graph\nwas good, so I just made some slight adjustments to simplify it and\nhighlight the important information. I calculated the total biomass for\neach transect so there was only one overall measurement for each\nelevation. I also made the colors for each of my PVTs more bold.\n\n## Popout\n\nI want to see what species has the greatest overall percent cover\nthroughout my transects. I can specifically highlight something useful\nwithin this graph because it is going to be a ton of data points unless\nI group it. To my knowledge, bromus tectorum was the species that was\nobserved the most throughout the season. That does not mean that it has\nthe greatest biomass value or percent cover.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nweight <- comp1 %>% \n  group_by(ActualName.x) %>% \n  mutate(totalbiomass = mean(DryWeight.g., na.rm = TRUE)) %>% \nungroup()\n\n\n\nView(weight)\n\n\n\nggplot(weight, aes(x = ActualName.x, y = totalbiomass, color = ActualName.x == \"BROMUS TECTORUM\")) +\n  geom_point(size = 3, alpha = 0.8, position = position_jitter(width = 0.2, height = 0)) +  \n  labs(\n   title = \"Total Biomass by Species\",\n    x = \"Species \",\n    y = \"Total Biomass\"\n  ) +\n  scale_color_manual(values = c(\"black\", \"red\"), guide = \"none\") +  \n  xlab(NULL) +\n theme_minimal()\n```\n\n::: {.cell-output-display}\n![](Marks.and.Channels_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n\n**Figure 5** shows the total biomass observed for each species\nthroughout my field season. Since there is no way to tell apart the\nnames on the x axis, and I was curious about cheatgrass, I highlighted\nmy cheatgrass observations. This graph is almost good, except for not\nbeing able to read the x axis. I could limit this to my top 10 species\n(because who really cares about the tiny insignificant ones anyway) and\nit would make it easier to read.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbiomass1 <- comp1 %>%\n  group_by(ActualName.x) %>%\n  mutate(totalbiomass = mean(DryWeight.g., na.rm = TRUE)) %>%\n  filter(totalbiomass > 10)\n\nggplot(biomass1, aes(x = Spp, y = totalbiomass, color = ActualName.x == \"BROMUS TECTORUM\")) +\n  geom_point(size = 3, alpha = 0.8, position = position_jitter(width = 0.2, height = 0)) +  \n  labs(\n   title = \"Total Biomass by Species\",\n    x = \"Species \",\n    y = \"Total Biomass\"\n  ) +\n  scale_color_manual(values = c(\"black\", \"red\"), guide = \"none\") +  \n  xlab(NULL) +\n theme_minimal()+\n  theme(\n    axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1))\n```\n\n::: {.cell-output-display}\n![](Marks.and.Channels_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n\nignore this\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#totalbiomass <- comp1 %>% \n#  left_join(y=transect,\n#            by = \"PlotID\") %>% \n#    mutate(Season = case_when(\n#    Julian_Day.x >= 75 & Julian_Day.x <= 153 ~ \"SP\",\n#    Julian_Day.x >= 154 & Julian_Day.x <= 228 ~ \"SU\",\n#    TRUE ~ NA_character_  # Assign NA for values outside these ranges\n# )) %>% \n# group_by(Season, PVT.x) %>% \n#  mutate(bio = mean(DryWeight.g.))\n         \n#  totalbiomass$PVT.x <- factor(totalbiomass$PVT.x)\n#View(totalbiomass)\n\n#ggplot(totalbiomass, aes(x = Season, y = bio, fill = PVT.x)) +\n# geom_bar(stat = \"identity\",position = \"dodge\") +   \n#  labs(\n#    title = \"Biomass by PVT\",\n#    x = \"PVT\",\n#   y = \"Total Biomass (g)\"\n#  ) +\n#  theme_minimal()+\n#  theme(legend.position = \"none\")\n\n#ggplot(totalbiomass, aes(x = Season, y = bio, fill = Season)) +\n#  geom_bar(stat = \"identity\", position = \"dodge\") +  \n#  facet_wrap(~ PVT.x, scales = \"free_x\", strip.position = \"bottom\") +  # Creates separate panels for each PVT\n#  labs(\n#    title = \"Biomass by PVT and Season\",\n#    x = \"PVT\",\n#    y = \"Total Biomass (g)\"\n#  ) +\n#  theme_minimal()\n#View(comp2)\n```\n:::\n",
    "supporting": [
      "Marks.and.Channels_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}