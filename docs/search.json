[
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "From Forage to Fitness: Impacts of the Foodscape on Bighorn Sheep Demographics",
    "section": "",
    "text": "Hi! I’m Alexis Means, a master’s student teaming up with the University of Idaho and the Oregon Department of Fish and Wildlife. Together, we’re diving into the wild world of bighorn sheep, exploring how their nutritional choices shape their populations. You could say I’m studying what’s on the menu for our fuzzy friends—and how it impacts their survival and growth!\n\n\n\nJohn Day, Bighorn Sheep Capture - 2024"
  },
  {
    "objectID": "posts/welcome/index.html#welcome",
    "href": "posts/welcome/index.html#welcome",
    "title": "From Forage to Fitness: Impacts of the Foodscape on Bighorn Sheep Demographics",
    "section": "",
    "text": "Hi! I’m Alexis Means, a master’s student teaming up with the University of Idaho and the Oregon Department of Fish and Wildlife. Together, we’re diving into the wild world of bighorn sheep, exploring how their nutritional choices shape their populations. You could say I’m studying what’s on the menu for our fuzzy friends—and how it impacts their survival and growth!\n\n\n\nJohn Day, Bighorn Sheep Capture - 2024"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Alexis Means",
    "section": "",
    "text": "My name is Alexis Means! I’m a research assistant working with the University of Idaho and the Oregon Department of Fish and Wildlife to study one of Oregon’s most successful bighorn sheep populations. My research focuses on how these sheep navigate their environment and make tough decisions about what to eat when faced with difficult tradeoffs.\nEarly on, I’ll be analyzing vegetation data to see how different plant species and growth stages change across multiple vegetation communities and seasons. In the long run, I’ll use this information to build a model that maps the nutritional landscape, helping us better understand bighorn sheep movement."
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Describing my Data",
    "section": "",
    "text": "The data set that I will be using will be vegetation monitoring data that I collected in the summer of 2024 for my project. I have multiple databases that are linked with varying information. Ultimately, my multiple databases will be used to create a nutritional landscape map of my study area to demonstrate areas of varying nutritional quality."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Means Portfolio",
    "section": "",
    "text": "Checking Bio Predict Assumptions\n\n\n\n\n\nThis document contains assumption tests and plots to analyze my linear regression equations for biomass predictions.\n\n\n\n\n\nOct 2, 2025\n\n\nAlexis Means\n\n\n\n\n\n\n\n\n\n\n\n\nCreating Regression Equations\n\n\n\n\n\nThis document provides the code used to create linear regression models that will predict missing biomass values within my dataset.\n\n\n\n\n\nOct 1, 2025\n\n\nAlexis Means\n\n\n\n\n\n\n\n\n\n\n\n\nImplementing Biomass Predictions\n\n\n\n\n\nThis document provides the code used to implement my linear regressions equations on my dataset and compute the missing biomass values.\n\n\n\n\n\nOct 1, 2025\n\n\nAlexis Means\n\n\n\n\n\n\n\n\n\n\n\n\nJohn Day Vegetation Recap\n\n\n\n\n\nThis document provides a rudimentary overview of the progress made in 2024 and 2025 field seasons.\n\n\n\n\n\nSep 4, 2025\n\n\nAlexis Means\n\n\n\n\n\n\n\n\n\n\n\n\nComparing Quality between PVTs\n\n\n\n\n\n\n\n\n\n\n\nAug 21, 2025\n\n\n\n\n\n\n\n\n\n\n\n\nSuitable Biomass Subset\n\n\n\n\n\n\n\n\n\n\n\nJul 19, 2025\n\n\nAlexis Means\n\n\n\n\n\n\n\n\n\n\n\n\nQuality Measurement Exploration\n\n\nCreating visualizations to compare levels of DE and DP\n\n\nI want to create multiple visualizations that allow me to compare the levels of DE and DP for individual species. Specifically I want to see which species have the highest and the lowest levels and if they are actually species that can be consumed by the sheep (not Lupinus or Artemisia spp).I would also like to compare how invasive/ non native species compare to native species. Specifically focusing on grasses.\n\n\n\n\n\nJul 7, 2025\n\n\nAlexis Means\n\n\n\n\n\n\n\n\n\n\n\n\nBCB 520 - Final Project\n\n\nExploring biomass and quality values in the John Day, Oregon\n\n\nI will be using quality and biomass data from my sampled vegetation data in the John Day, Oregon to help visualize how forage quality changes throughout my study area over time.\n\n\n\n\n\nMar 26, 2025\n\n\nAlexis Means\n\n\n\n\n\n\n\n\n\n\n\n\nAssignment 5\n\n\nData Driven Voting\n\n\nIn this assignment we determined which players should be selected for 5 different awards based on their NHL stats.\n\n\n\n\n\nMar 14, 2025\n\n\nAlexis Means\n\n\n\n\n\n\n\n\n\n\n\n\nTask Abstraction\n\n\n\n\n\nIn this assignment I create action-target pairs to help me visualize different aspects of my data.\n\n\n\n\n\nFeb 5, 2025\n\n\nAlexis Means\n\n\n\n\n\n\n\n\n\n\n\n\nDescribing my Data\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\nIn this assignment I walk through the various types of data that I collected in the field and describe their purpose and how they interact\n\n\n\n\n\nJan 27, 2025\n\n\nAlexis Means\n\n\n\n\n\n\n\n\n\n\n\n\nAssignment 4\n\n\nMarks and Channels\n\n\nWelcome to the fascinating world of biomass and percent cover\n\n\n\n\n\nJan 25, 2025\n\n\nAlexis Means\n\n\n\n\n\n\n\n\n\n\n\n\nFrom Forage to Fitness: Impacts of the Foodscape on Bighorn Sheep Demographics\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\nJan 20, 2025\n\n\nAlexis Means\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/post-with-code/index.html#my-data",
    "href": "posts/post-with-code/index.html#my-data",
    "title": "Describing my Data",
    "section": "My Data",
    "text": "My Data\nThe dataset I’m using consists of vegetation monitoring data I collected during the summer of 2024 for my project. It includes multiple linked databases with varying types of information. Ultimately, these databases will be combined to create a nutritional landscape map of my study area, highlighting areas with different levels of nutritional quality."
  },
  {
    "objectID": "posts/post-with-code/index.html#data-collection",
    "href": "posts/post-with-code/index.html#data-collection",
    "title": "Describing my Data",
    "section": "Data Collection",
    "text": "Data Collection\nMy data consists of multiple linked databases containing detailed information about unique species/phenology plant pairs sampled across different transects during my field season. These databases include:\n\nVegetation communities: The different vegetation communities sampled in my study.\nSpecies and phenology: The species identified in each transect along with their phenology stages.\nPercent aerial cover: The contribution of each unique species/phenology plant pair to the total percent aerial cover within each quadrat.\nBiomass weight: The weight of clipped and unclipped biomass for each unique plant.\n\nIn the future, I’ll also include quality information for these unique pairs, though that analysis is still in progress."
  },
  {
    "objectID": "posts/post-with-code/index.html#importing-my-data",
    "href": "posts/post-with-code/index.html#importing-my-data",
    "title": "Describing my Data",
    "section": "Importing my Data",
    "text": "Importing my Data\nEach of my datasets is saved as a separate CSV file. To load them, I first set my working directory to the folder containing these files and used the base R function read.csv to import each one. After loading, I assigned each dataset to a new object so I can easily reference them later. To confirm that each dataset loaded correctly, I used the head function to preview the first few rows. To get a better understanding of how the information is structured within each dataset, I used the glimpse function from the tidyverse package.\n\n\nCode\n# Set Working Directory\nsetwd(\"C:/Users/Alexis Means/Documents/School/RDS/final.project/\")\n\n# Load in each database and assign them to an object\nbiomass &lt;- read.csv(\"processed.data/biomass_clean.csv\")\ncomp &lt;- read.csv(\"processed.data/composition_clean.csv\")\npheno &lt;- read.csv(\"processed.data/phenology_clean.csv\")\nplants &lt;- read.csv(\"processed.data/plant_list_clean.csv\")\nquality &lt;- read.csv(\"processed.data/quality_clean.csv\")\ntransect &lt;-read.csv(\"processed.data/transect_clean.csv\")\n\n# Load tidyverse\nlibrary(tidyverse)\n\n\n\nBiomass\n\n\nCode\n# Check that each database has been loaded correctly  \n# Use glimpse command to summarize each of my dataframes \nhead(biomass)\n\n\n  X DryWeight.g.                comp_id\n1 1        31.11   24-672-020_60_BRTE_N\n2 2         4.03  24-672-020_60_AMME_FL\n3 3         0.64  24-672-020_60_LIPA_FL\n4 4         6.17 24-672-020_100_BRTE_FL\n5 5         5.09  24-672-020_100_LOGR_N\n6 6         5.10 24-672-020_100_PSSP6_N\n\n\nCode\nglimpse(biomass)\n\n\nRows: 5,563\nColumns: 3\n$ X            &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17…\n$ DryWeight.g. &lt;dbl&gt; 31.11, 4.03, 0.64, 6.17, 5.09, 5.10, 0.34, 0.22, 1.25, 1.…\n$ comp_id      &lt;chr&gt; \"24-672-020_60_BRTE_N\", \"24-672-020_60_AMME_FL\", \"24-672-…\n\n\n\n\nComposition\n\n\nCode\nhead(comp) \n\n\n      PlotID Quadrat spp_code Pheno PlotID_short  composition_id\n1 24-672-020      20     BRTE    FL          672  672_20_BRTE_FL\n2 24-672-020      20    ERCI6    FL          672 672_20_ERCI6_FL\n3 24-672-020      40     LOGR    FL          672  672_40_LOGR_FL\n4 24-672-020      40     BRTE     M          672   672_40_BRTE_M\n5 24-672-020      60     BRTE     N          672   672_60_BRTE_N\n6 24-672-020      60     AMME    FL          672  672_60_AMME_FL\n\n\nCode\nglimpse(comp)\n\n\nRows: 3,125\nColumns: 6\n$ PlotID         &lt;chr&gt; \"24-672-020\", \"24-672-020\", \"24-672-020\", \"24-672-020\",…\n$ Quadrat        &lt;int&gt; 20, 20, 40, 40, 60, 60, 60, 80, 80, 80, 80, 80, 80, 80,…\n$ spp_code       &lt;chr&gt; \"BRTE\", \"ERCI6\", \"LOGR\", \"BRTE\", \"BRTE\", \"AMME\", \"LIPA\"…\n$ Pheno          &lt;chr&gt; \"FL\", \"FL\", \"FL\", \"M\", \"N\", \"FL\", \"FL\", \"N\", \"FL\", \"FL\"…\n$ PlotID_short   &lt;int&gt; 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, …\n$ composition_id &lt;chr&gt; \"672_20_BRTE_FL\", \"672_20_ERCI6_FL\", \"672_40_LOGR_FL\", …\n\n\n\n\nPhenology\n\n\nCode\nhead(pheno) \n\n\n      PlotID Quadrat Percent Pheno                       comp_id\n1 24-672-020      20      10    FL  24-672-020_20_BRTE_FL_ENTIRE\n2 24-672-020      20       1    FL 24-672-020_20_ERCI6_FL_ENTIRE\n3 24-672-020      40       5    FL  24-672-020_40_LOGR_FL_ENTIRE\n4 24-672-020      40      10     M   24-672-020_40_BRTE_M_ENTIRE\n5 24-672-020      60      35     N   24-672-020_60_BRTE_N_ENTIRE\n6 24-672-020      60       5    FL  24-672-020_60_AMME_FL_ENTIRE\n           spp_id\n1  BRTE_FL_ENTIRE\n2 ERCI6_FL_ENTIRE\n3  LOGR_FL_ENTIRE\n4   BRTE_M_ENTIRE\n5   BRTE_N_ENTIRE\n6  AMME_FL_ENTIRE\n\n\nCode\nglimpse(pheno)\n\n\nRows: 3,125\nColumns: 6\n$ PlotID  &lt;chr&gt; \"24-672-020\", \"24-672-020\", \"24-672-020\", \"24-672-020\", \"24-67…\n$ Quadrat &lt;int&gt; 20, 20, 40, 40, 60, 60, 60, 80, 80, 80, 80, 80, 80, 80, 100, 1…\n$ Percent &lt;int&gt; 10, 1, 5, 10, 35, 5, 5, 15, 1, 5, 5, 10, 5, 10, 5, 10, 10, 1, …\n$ Pheno   &lt;chr&gt; \"FL\", \"FL\", \"FL\", \"M\", \"N\", \"FL\", \"FL\", \"N\", \"FL\", \"FL\", \"N\", …\n$ comp_id &lt;chr&gt; \"24-672-020_20_BRTE_FL_ENTIRE\", \"24-672-020_20_ERCI6_FL_ENTIRE…\n$ spp_id  &lt;chr&gt; \"BRTE_FL_ENTIRE\", \"ERCI6_FL_ENTIRE\", \"LOGR_FL_ENTIRE\", \"BRTE_M…\n\n\n\n\nSpecies List\n\n\nCode\nhead(plants) \n\n\n  X spp_code       Family       Genus        Spp           CommonName  Duration\n1 1    ARRI2   ASTERACEAE   ARTEMISIA     RIGIDA      STIFF SAGEBRUSH PERENNIAL\n2 2    ARTRT   ASTERACEAE   ARTEMISIA TRIDENTATA  BASIN BIG SAGEBRUSH PERENNIAL\n3 3    GUSA2   ASTERACEAE GUTIERREZIA  SAROTHRAE      BROOM SNAKEWEED PERENNIAL\n4 4    ERCI6     GERANIUM     ERODIUM CICUTARIUM   REDSTEM STORKSBILL    ANNUAL\n5 5     LODI     APIACEAE    LOMATIUM  DISSECTUM FERNLEAF BISCUITROOT PERENNIAL\n6 6     AMME BORAGINACEAE   AMSINCKIA  MENZIESII    COMMON FIDDLENECK    ANNUAL\n\n\nCode\nglimpse(plants)\n\n\nRows: 101\nColumns: 7\n$ X          &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, …\n$ spp_code   &lt;chr&gt; \"ARRI2\", \"ARTRT\", \"GUSA2\", \"ERCI6\", \"LODI\", \"AMME\", \"LIPA\",…\n$ Family     &lt;chr&gt; \"ASTERACEAE\", \"ASTERACEAE\", \"ASTERACEAE\", \"GERANIUM\", \"APIA…\n$ Genus      &lt;chr&gt; \"ARTEMISIA\", \"ARTEMISIA\", \"GUTIERREZIA\", \"ERODIUM\", \"LOMATI…\n$ Spp        &lt;chr&gt; \"RIGIDA\", \"TRIDENTATA\", \"SAROTHRAE\", \"CICUTARIUM\", \"DISSECT…\n$ CommonName &lt;chr&gt; \"STIFF SAGEBRUSH\", \"BASIN BIG SAGEBRUSH\", \"BROOM SNAKEWEED\"…\n$ Duration   &lt;chr&gt; \"PERENNIAL\", \"PERENNIAL\", \"PERENNIAL\", \"ANNUAL\", \"PERENNIAL…\n\n\n\n\nQuality\n\n\nCode\nhead(quality) \n\n\n  X Code season PVT         spp_id quality_id\n1 1 BRTE     NA 672 BRTE_FL_ENTIRE         NA\n2 2 BRTE     NA 672 BRTE_FL_ENTIRE         NA\n3 3 BRTE     NA 672 BRTE_FR_ENTIRE         NA\n4 4 BRTE     NA 672 BRTE_FL_ENTIRE         NA\n5 5 BRTE     NA 672 BRTE_FL_ENTIRE         NA\n6 6 BRTE     NA 672 BRTE_FL_ENTIRE         NA\n\n\nCode\nglimpse(quality) \n\n\nRows: 631\nColumns: 6\n$ X          &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, …\n$ Code       &lt;chr&gt; \"BRTE\", \"BRTE\", \"BRTE\", \"BRTE\", \"BRTE\", \"BRTE\", \"BRTE\", \"BR…\n$ season     &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ PVT        &lt;int&gt; 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672,…\n$ spp_id     &lt;chr&gt; \"BRTE_FL_ENTIRE\", \"BRTE_FL_ENTIRE\", \"BRTE_FR_ENTIRE\", \"BRTE…\n$ quality_id &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n\n\n\n\nTransects\n\n\nCode\nhead(transect) \n\n\n       Date     PlotID PVT Aspect Elev BeginLat BeginLong   MidLat   MidLong\n1  4/2/2024 24-672-020 672      S 1063 45.50515 -120.4193 45.50513 -120.4196\n2  4/6/2024 24-672-079 672     SW 1176 45.47389 -120.4584 45.47359 -120.4584\n3  4/8/2024 24-672-011 672     NE 1890 45.43403 -120.4673 45.43448 -120.4675\n4  4/9/2024 24-672-089 672      N 2503 45.30245 -120.6339 45.30209 -120.6336\n5 4/10/2024 24-672-116 672     NW 2286 45.35830 -120.4626 45.35857 -120.4621\n6 4/11/2024 24-672-014 672     NE 2370 45.33468 -120.5660 45.33509 -120.5663\n    EndLat   EndLong Moved season\n1 45.50496 -120.4203     0     SP\n2 45.47328 -120.4579     0     SP\n3 45.43493 -120.4675     0     SP\n4 45.30174 -120.6332     0     SP\n5 45.35889 -120.4615     0     SP\n6 45.33546 -120.5666     1     SP\n\n\nCode\nglimpse(transect)\n\n\nRows: 69\nColumns: 13\n$ Date      &lt;chr&gt; \"4/2/2024\", \"4/6/2024\", \"4/8/2024\", \"4/9/2024\", \"4/10/2024\",…\n$ PlotID    &lt;chr&gt; \"24-672-020\", \"24-672-079\", \"24-672-011\", \"24-672-089\", \"24-…\n$ PVT       &lt;int&gt; 672, 672, 672, 672, 672, 672, 674, 672, 672, 672, 669, 672, …\n$ Aspect    &lt;chr&gt; \"S\", \"SW\", \"NE\", \"N\", \"NW\", \"NE\", \"SE\", \"SE\", \"N\", \"N\", \"W\",…\n$ Elev      &lt;int&gt; 1063, 1176, 1890, 2503, 2286, 2370, 1288, 1542, 1422, 1394, …\n$ BeginLat  &lt;dbl&gt; 45.50515, 45.47389, 45.43403, 45.30245, 45.35830, 45.33468, …\n$ BeginLong &lt;dbl&gt; -120.4193, -120.4584, -120.4673, -120.6339, -120.4626, -120.…\n$ MidLat    &lt;dbl&gt; 45.50513, 45.47359, 45.43448, 45.30209, 45.35857, 45.33509, …\n$ MidLong   &lt;dbl&gt; -120.4196, -120.4584, -120.4675, -120.6336, -120.4621, -120.…\n$ EndLat    &lt;dbl&gt; 45.50496, 45.47328, 45.43493, 45.30174, 45.35889, 45.33546, …\n$ EndLong   &lt;dbl&gt; -120.4203, -120.4579, -120.4675, -120.6332, -120.4615, -120.…\n$ Moved     &lt;int&gt; 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, …\n$ season    &lt;chr&gt; \"SP\", \"SP\", \"SP\", \"SP\", \"SP\", \"SP\", \"SP\", \"SP\", \"SP\", \"SP\", …"
  },
  {
    "objectID": "posts/post-with-code/index.html#describing-my-data",
    "href": "posts/post-with-code/index.html#describing-my-data",
    "title": "Describing my Data",
    "section": "Describing my Data",
    "text": "Describing my Data\nThese datasets come together to create a multidimensional table with all kinds of information about the species observed in my transects. Each table focuses on a unique combination of species ID and phenology stage, which is what I’m using as the main unit of observation. To describe each of these unique combinations, I’ve included several attributes. The quantitative ones include things like biomass weight, percent aerial cover, and nutritional quality. There are also some categorical attributes, like the vegetation community where the species was found and the season it was observed. For now, I’m working with this data as a table to calculate summary statistics, but eventually, I’ll convert it into spatial data. I’ve also included a table that lists and explains all the attributes—some are repeated across datasets, so I’ve only described them once. Going through this process has made me realize my data isn’t as tidy as I thought, which has been a good learning experience!\n\n\nCode\ntable&lt;- read.csv(\"C:/Users/Alexis Means/Documents/School/BCB520/2A/attributes.csv\") \nknitr::kable(table)\n\n\n\n\n\n\n\n\n\n\nAttribute\nType\nNote\n\n\n\n\nDryWeight\nQuantitative\nThis measurement tells us what the weight of dry biomass is for each specific observation\n\n\nPlotID\nCategorical\nThis descriptor is a unique ID that tells us which randomized point we sampled\n\n\nQuadrat\nCategorical\nThere are 5 quadrats that we sample for each quadrat (20,40,60,80,100)\n\n\nspp_code\nCategorical\nThese are unique codes that describe the family, genius and species for every item observed\n\n\npheno\nCategorical\nEach species is assigned a growth stage when we observe it - New, Budding, Flowering, Fruiting, Mature or Cured (N, B, FL, FR, M, C)\n\n\nPVT\nCategorical\nThis number describes the vegetation community that was being sampled, we have 5 total for the study area, it is used as part of the descriptor for each plotID\n\n\ncomposition_ID\nCategorical\nThis unique ID helps link the biomass and aerial percent cover to specific plots and quadrats, rather than just the species and phenology stage\n\n\npercent\nQuantitative\nThis measurement tells us the percent cover that each composition_id occupies within a 1x1m quadrat\n\n\nspp_id\nCategorical\nThis unique ID is slightly more broad and will be used to identify species/phenology combinations within each vegetation type as well as the season\n\n\nFamily\nCategorical\nThis will be used to group quality data if we do not have enough information to determine the quality down to the smaller scale (genus)\n\n\nGenus\nCategorical\nThis will be used to group quality data if we do not have enough information to determine the quality down to the smaller scale (spp)\n\n\nSpp\nCategorical\nThis will be used to group quality data if we do not have enough information to determine the quality down to the smaller scale (phenological stage)\n\n\nCommonName\nCategorical\nThis is another identifier for each species, it will likely not be used within the analysis so it could be removed\n\n\nDuration\nCategorical\nThis is another category I may use to group quality data based on the growth duration of each species\n\n\nStatus\nCategorical\nEach species is categorized as native or invasive\n\n\nSeason\nCategorical\nOur observations are grouped based on the date that they were sampled (Spring, Summer and Fall) to observe the changes in nutritional quality\n\n\nDate\nCategorical\nThis keeps track of the day that each observation was sampled\n\n\nAspect\nCategorical\nDescribed the direction the hill was facing that each of our transects had been sampled on\n\n\nElev\nQuantitative\nDescribes the elevation that each of the transects was sampled at\n\n\nLat/Long\nCategorical\nEach of the lat/long pairs plots the beginning, middle and end of each of the transects\n\n\nMoved\nCategorical\nTells us whether the orginal randomized point had to be moved"
  },
  {
    "objectID": "posts/post-with-code/task.abstractions.html",
    "href": "posts/post-with-code/task.abstractions.html",
    "title": "Task Abstraction",
    "section": "",
    "text": "The first two action-target pairs that I want to achieve are similar. With the first I want to identify attributes of my sampled vegetation by identifying how many counts of each family were observed throughout the course of my field season. I also want to compare the attributes by recognizing how many were observed in each family and which of these families has the most observations. My second graph will do something similar, however instead of identifying and comparing families, I want to observe and compare the species.\n\nidentify attributes (top observed families)\nCompare attributes (# of observations in each family)\n\n\n\nCode\n#Clean the comp dataset and create a new column for family proportions\nfam_prop&lt;- comp %&gt;%\n  mutate(spp_code = str_trim(spp_code)) %&gt;%             \n  filter(!str_to_lower(spp_code) %in%                   \n           str_to_lower(c(\"Litter\", \"Water\", \"Lichen\", \"Rocks\", \"Earth\"))) %&gt;% \n  left_join(plants, by = \"spp_code\") %&gt;% \n  count(Family) %&gt;% \n  arrange(n) %&gt;% \n  mutate(proportions = n/sum(n)* 100) %&gt;% \n  rename(fam_count = n)\n\n#create a new object with the top 10 species in descending order\ntop_fam &lt;-  fam_prop %&gt;% \n  arrange(desc(proportions)) %&gt;% \n  slice_head(n = 10)\n\n#create boxplot of the top 10 families\nggplot(top_fam, aes(x = fct_reorder(Family, -proportions), y = proportions, fill = Family)) +\n  geom_bar(stat = \"identity\") +\n  scale_fill_viridis_d(option = \"viridis\") + \n  labs(\n    x = \"Family\",\n    y = \"Proportion (%)\",\n    title = \"Top 10 Families by Proportion\"\n  ) +\n  theme_minimal() +\n  theme(\n    axis.text.x = element_text(angle = 45, hjust = 1),\n    legend.position = \"none\")\n\n\n\n\n\n\n\n\n\n\n\n\nAlong with the action-target pairs that I mentioned from the first graph, this graph also identifies attributes of each species by highlighting invasive species in red and native species in blue.\n\nidentify attributes (top observed species)\nCompare attributes (# of observations for each species, as well as native vs invasive species)\nidentify attributes (native species and invasive species)\n\n\n\nCode\n#Clean the comp dataset and create a new column for species proportions\nspp_num &lt;- comp %&gt;%\n  mutate(spp_code = str_trim(spp_code)) %&gt;%              \n  filter(!str_to_lower(spp_code) %in%                   \n           str_to_lower(c(\"Litter\", \"Water\", \"Lichen\", \"Rocks\", \"Earth\"))) %&gt;%\n  count(spp_code) %&gt;%\n  arrange(n) %&gt;%\n  left_join(plants, by = \"spp_code\") %&gt;%\n  mutate(proportion = (n / sum(n)) * 100) %&gt;% \n  rename(spp_count = n, spp_code_prop = proportion) \n\n#Create new object with the top 10 species observed in descending order\ntop_spp &lt;- spp_num %&gt;%\n  arrange(desc(spp_code_prop)) %&gt;%\n  slice_head(n = 10)\n\n#Create a boxplot of the top 10 species \nggplot(top_spp, aes(x = fct_reorder(spp_code, -spp_code_prop), y = spp_code_prop, fill = status)) +\n  geom_bar(stat = \"identity\") +\n  theme_minimal() +\n  labs(\n    x = \"Species Code\",\n    y = \"Proportion (%)\",\n    title = \"Top 20 Species by Proportion\",\n    fill = \"status\"\n  )+\n  theme(\n    axis.text.x = element_text(angle = 45, hjust = 1),\n    legend.position = \"none\")\n\n\n\n\n\n\n\n\n\n\n\n\nFor my last action-target pair I would like to compare the features of the species that I observed throughout the summer. Specifically I want to know the proportion of native vs invasive species that were observed in total.\n\ncompare features (invasive vs native species)\n\n\n\nCode\n#Clean the comp dataset and create a new column for status proportions\ninv &lt;- comp %&gt;%\n  mutate(spp_code = str_trim(spp_code)) %&gt;%             \n  filter(!str_to_lower(spp_code) %in%                   \n           str_to_lower(c(\"Litter\", \"Water\", \"Lichen\", \"Rocks\", \"Earth\"))) %&gt;%\n  left_join(plants, by = \"spp_code\") %&gt;%\n  count(status) %&gt;%\n  arrange(n) %&gt;% \n  mutate(proportion = (n / sum(n)) * 100)\n\n#Create a piechart comparing the native vs invasive species\nggplot(inv, aes(x = \"\", y = proportion, fill = status)) +\n  geom_bar(stat = \"identity\", width = 1) +\n  coord_polar(\"y\") +\n  labs(title = \"Species Status\") +\n  theme_void()"
  },
  {
    "objectID": "posts/post-with-code/task.abstractions.html#getting-set-up",
    "href": "posts/post-with-code/task.abstractions.html#getting-set-up",
    "title": "Task Abstraction",
    "section": "",
    "text": "#load packages####\nlibrary(dplyr)\nlibrary(tidyverse)\nlibrary(forcats)\n\n\n# Set Working Directory\nsetwd(\"C:/Users/Alexis Means/Documents/School/RDS/final.project/\")\n\n# Load Datasets\nbiomass &lt;- read.csv(\"processed.data/biomass_clean.csv\")\ncomp &lt;- read.csv(\"processed.data/composition_clean.csv\")\npheno &lt;- read.csv(\"processed.data/phenology_clean.csv\")\nplants &lt;- read.csv(\"processed.data/plant_list_clean.csv\")\nquality &lt;- read.csv(\"processed.data/quality_clean.csv\")\ntransect &lt;-read.csv(\"processed.data/transect_clean.csv\")"
  },
  {
    "objectID": "posts/post-with-code/task.abstractions.html#proportion-of-families-observed",
    "href": "posts/post-with-code/task.abstractions.html#proportion-of-families-observed",
    "title": "Task Abstraction",
    "section": "Proportion of Families Observed",
    "text": "Proportion of Families Observed\n\n#Plotting family proportions####\nfam_prop&lt;- comp %&gt;%\n  mutate(spp_code = str_trim(spp_code)) %&gt;%              # Remove extra spaces\n  filter(!str_to_lower(spp_code) %in%                   # Standardize case for filtering\n           str_to_lower(c(\"Litter\", \"Water\", \"Lichen\", \"Rocks\", \"Earth\"))) %&gt;% \n  left_join(plants, by = \"spp_code\") %&gt;% \n  count(Family) %&gt;% \n  arrange(n) %&gt;% \n  mutate(proportions = n/sum(n)* 100) %&gt;% \n  rename(fam_count = n)\n\ntop_fam &lt;-  fam_prop %&gt;% \n  arrange(desc(proportions)) %&gt;% \n  slice_head(n = 10)\n\nggplot(top_fam, aes(x = fct_reorder(Family, -proportions), y = proportions, fill = Family)) +\n  geom_bar(stat = \"identity\") +\n  scale_fill_viridis_d(option = \"viridis\") + \n  labs(\n    x = \"Family\",\n    y = \"Proportion (%)\",\n    title = \"Top 10 Families by Proportion\"\n  ) +\n  theme_minimal() +\n  theme(\n    axis.text.x = element_text(angle = 45, hjust = 1),\n    legend.position = \"none\")"
  },
  {
    "objectID": "posts/post-with-code/task.abstractions.html#proportion-of-species-observed",
    "href": "posts/post-with-code/task.abstractions.html#proportion-of-species-observed",
    "title": "Task Abstraction",
    "section": "Proportion of Species Observed",
    "text": "Proportion of Species Observed\n\n#Plotting Spp proportions####\n#top 10 spp bar plot***  \n### use this one \nspp_num &lt;- comp %&gt;%\n  mutate(spp_code = str_trim(spp_code)) %&gt;%              # Remove extra spaces\n  filter(!str_to_lower(spp_code) %in%                   # Standardize case for filtering\n           str_to_lower(c(\"Litter\", \"Water\", \"Lichen\", \"Rocks\", \"Earth\"))) %&gt;%\n  count(spp_code) %&gt;%\n  arrange(n) %&gt;%\n  left_join(plants, by = \"spp_code\") %&gt;%\n  mutate(proportion = (n / sum(n)) * 100) %&gt;% \n  rename(spp_count = n, spp_code_prop = proportion) \n\ntop_spp &lt;- spp_num %&gt;%\n  arrange(desc(spp_code_prop)) %&gt;%\n  slice_head(n = 10)  # Select top 10 species\n\n\nggplot(top_spp, aes(x = fct_reorder(spp_code, -spp_code_prop), y = spp_code_prop, fill = status)) +\n  geom_bar(stat = \"identity\") +\n  theme_minimal() +\n  labs(\n    x = \"Species Code\",\n    y = \"Proportion (%)\",\n    title = \"Top 20 Species by Proportion\",\n    fill = \"status\"\n  )+\n  theme(\n    axis.text.x = element_text(angle = 45, hjust = 1),\n    legend.position = \"none\")"
  },
  {
    "objectID": "posts/post-with-code/task.abstractions.html#species-status-observed",
    "href": "posts/post-with-code/task.abstractions.html#species-status-observed",
    "title": "Task Abstraction",
    "section": "Species Status Observed",
    "text": "Species Status Observed\n\ninv &lt;- comp %&gt;%\n  mutate(spp_code = str_trim(spp_code)) %&gt;%              # Remove extra spaces\n  filter(!str_to_lower(spp_code) %in%                   # Standardize case for filtering\n           str_to_lower(c(\"Litter\", \"Water\", \"Lichen\", \"Rocks\", \"Earth\"))) %&gt;%\n  left_join(plants, by = \"spp_code\") %&gt;%\n  count(status) %&gt;%\n  arrange(n) %&gt;% \n  mutate(proportion = (n / sum(n)) * 100)\n\nggplot(inv, aes(x = \"\", y = proportion, fill = status)) +\n  geom_bar(stat = \"identity\", width = 1) +\n  coord_polar(\"y\") +\n  labs(title = \"Species Status\") +\n  theme_void()"
  },
  {
    "objectID": "posts/post-with-code/task.abstractions.html#action-target-pairs",
    "href": "posts/post-with-code/task.abstractions.html#action-target-pairs",
    "title": "Task Abstraction",
    "section": "",
    "text": "The first two action-target pairs that I want to achieve are similar. With the first I want to identify attributes of my sampled vegetation by identifying how many counts of each family were observed throughout the course of my field season. I also want to compare the attributes by recognizing how many were observed in each family and which of these families has the most observations. My second graph will do something similar, however instead of identifying and comparing families, I want to observe and compare the species.\n\nidentify attributes (top observed families)\nCompare attributes (# of observations in each family)\n\n\n\nCode\n#Clean the comp dataset and create a new column for family proportions\nfam_prop&lt;- comp %&gt;%\n  mutate(spp_code = str_trim(spp_code)) %&gt;%             \n  filter(!str_to_lower(spp_code) %in%                   \n           str_to_lower(c(\"Litter\", \"Water\", \"Lichen\", \"Rocks\", \"Earth\"))) %&gt;% \n  left_join(plants, by = \"spp_code\") %&gt;% \n  count(Family) %&gt;% \n  arrange(n) %&gt;% \n  mutate(proportions = n/sum(n)* 100) %&gt;% \n  rename(fam_count = n)\n\n#create a new object with the top 10 species in descending order\ntop_fam &lt;-  fam_prop %&gt;% \n  arrange(desc(proportions)) %&gt;% \n  slice_head(n = 10)\n\n#create boxplot of the top 10 families\nggplot(top_fam, aes(x = fct_reorder(Family, -proportions), y = proportions, fill = Family)) +\n  geom_bar(stat = \"identity\") +\n  scale_fill_viridis_d(option = \"viridis\") + \n  labs(\n    x = \"Family\",\n    y = \"Proportion (%)\",\n    title = \"Top 10 Families by Proportion\"\n  ) +\n  theme_minimal() +\n  theme(\n    axis.text.x = element_text(angle = 45, hjust = 1),\n    legend.position = \"none\")\n\n\n\n\n\n\n\n\n\n\n\n\nAlong with the action-target pairs that I mentioned from the first graph, this graph also identifies attributes of each species by highlighting invasive species in red and native species in blue.\n\nidentify attributes (top observed species)\nCompare attributes (# of observations for each species, as well as native vs invasive species)\nidentify attributes (native species and invasive species)\n\n\n\nCode\n#Clean the comp dataset and create a new column for species proportions\nspp_num &lt;- comp %&gt;%\n  mutate(spp_code = str_trim(spp_code)) %&gt;%              \n  filter(!str_to_lower(spp_code) %in%                   \n           str_to_lower(c(\"Litter\", \"Water\", \"Lichen\", \"Rocks\", \"Earth\"))) %&gt;%\n  count(spp_code) %&gt;%\n  arrange(n) %&gt;%\n  left_join(plants, by = \"spp_code\") %&gt;%\n  mutate(proportion = (n / sum(n)) * 100) %&gt;% \n  rename(spp_count = n, spp_code_prop = proportion) \n\n#Create new object with the top 10 species observed in descending order\ntop_spp &lt;- spp_num %&gt;%\n  arrange(desc(spp_code_prop)) %&gt;%\n  slice_head(n = 10)\n\n#Create a boxplot of the top 10 species \nggplot(top_spp, aes(x = fct_reorder(spp_code, -spp_code_prop), y = spp_code_prop, fill = status)) +\n  geom_bar(stat = \"identity\") +\n  theme_minimal() +\n  labs(\n    x = \"Species Code\",\n    y = \"Proportion (%)\",\n    title = \"Top 20 Species by Proportion\",\n    fill = \"status\"\n  )+\n  theme(\n    axis.text.x = element_text(angle = 45, hjust = 1),\n    legend.position = \"none\")\n\n\n\n\n\n\n\n\n\n\n\n\nFor my last action-target pair I would like to compare the features of the species that I observed throughout the summer. Specifically I want to know the proportion of native vs invasive species that were observed in total.\n\ncompare features (invasive vs native species)\n\n\n\nCode\n#Clean the comp dataset and create a new column for status proportions\ninv &lt;- comp %&gt;%\n  mutate(spp_code = str_trim(spp_code)) %&gt;%             \n  filter(!str_to_lower(spp_code) %in%                   \n           str_to_lower(c(\"Litter\", \"Water\", \"Lichen\", \"Rocks\", \"Earth\"))) %&gt;%\n  left_join(plants, by = \"spp_code\") %&gt;%\n  count(status) %&gt;%\n  arrange(n) %&gt;% \n  mutate(proportion = (n / sum(n)) * 100)\n\n#Create a piechart comparing the native vs invasive species\nggplot(inv, aes(x = \"\", y = proportion, fill = status)) +\n  geom_bar(stat = \"identity\", width = 1) +\n  coord_polar(\"y\") +\n  labs(title = \"Species Status\") +\n  theme_void()"
  },
  {
    "objectID": "about.html#about-me",
    "href": "about.html#about-me",
    "title": "Alexis Means",
    "section": "",
    "text": "My name is Alexis Means! I’m a research assistant working with the University of Idaho and the Oregon Department of Fish and Wildlife to study one of Oregon’s most successful bighorn sheep populations. My research focuses on how these sheep navigate their environment and make tough decisions about what to eat when faced with difficult tradeoffs.\nEarly on, I’ll be analyzing vegetation data to see how different plant species and growth stages change across multiple vegetation communities and seasons. In the long run, I’ll use this information to build a model that maps the nutritional landscape, helping us better understand bighorn sheep movement."
  },
  {
    "objectID": "about.html#education",
    "href": "about.html#education",
    "title": "Alexis Means",
    "section": "Education",
    "text": "Education\nUniversity of Idaho | Moscow, ID\nMS Thesis\nAugust 2023 - Present\nBoise State University | Boise, ID\nBS in Biology - Emphasis in Ecology, Environment, and Behavior\nAugust 2017 - May 2021"
  },
  {
    "objectID": "about.html#experience",
    "href": "about.html#experience",
    "title": "Alexis Means",
    "section": "Experience",
    "text": "Experience"
  },
  {
    "objectID": "posts/MarksChannels/Marks.and.Channels.html",
    "href": "posts/MarksChannels/Marks.and.Channels.html",
    "title": "Assignment 4",
    "section": "",
    "text": "Ignore this first chunk of code, this is just a bunch of rambling for me to create the table that I wanted to view all of my data within.\nCode\nlibrary(tidyverse)\nlibrary(terra)\n\n\nsetwd(\"C:/Users/Alexis Means/Documents/Project/Nutrition Sampling/R code\")\n\n#load in objects\nbiomass &lt;- read.csv(\"C:/Users/Alexis Means/Documents/Project/Nutrition Sampling/R code/Cleaning/processed.data/biomass.csv\")\ncomp &lt;- read.csv(\"C:/Users/Alexis Means/Documents/Project/Nutrition Sampling/R code/Cleaning/processed.data/comp.csv\")\ntransect &lt;- read.csv(\"C:/Users/Alexis Means/Documents/Project/Nutrition Sampling/R code/Cleaning/processed.data/transect.csv\")\nplant &lt;- read.csv(\"C:/Users/Alexis Means/Documents/Project/Nutrition Sampling/R code/Cleaning/processed.data/plant_list.csv\")\n\n\n\n#Organizing and joining databases####\n#create object for inorganic matter\nabiotic &lt;- c(\"LITTER\",\"EARTH\", \"LICHEN\", \"WATER\", \"ROCKS\")\n\n\n#combining and creating an overall %cover for inorganic matter in each quadrat\ncomp &lt;- comp %&gt;% \n  group_by(PlotID, Quadrat) %&gt;% \n  mutate(Abiotic.cover = sum(Percent[(Spp %in% abiotic)])) %&gt;% \n  ungroup()\n\n\n#Left join biomass and comp by quadrat and plot_ID\ncomp &lt;- comp %&gt;% \n  left_join(y = biomass,\n            by = c(\"PlotID\", \"Quadrat\", \"Spp\", \"Pheno\", \"Part\")) \n\n\n#filtering out all quadrats where no biomass is recorded for the quadrat\n#filter out all of the abiotic observations\ncomp &lt;- comp %&gt;% \n  filter(!(Percent %in% abiotic)) %&gt;% \n  filter(!is.na(DryWeight.g.))\n\n\n## left join columns from plant list, comp, biomass and transect to keep the necessary columns \nplant &lt;- plant %&gt;% \n  select(Spp, Genus, Family, FunctionalGroup, Species)\n\ncomp &lt;- comp %&gt;% \n  left_join(y = plant,\n            by = \"Spp\")\n\ncomp &lt;- comp %&gt;% \n  select(-Dates.y, -ActualName.y, -Stage.y)\n\ntransect &lt;- transect %&gt;% \n  select(PVT, PlotID, BeginUTM_Northing, BeginUTM_Easting)\n\ncomp &lt;- comp %&gt;% \n  left_join(y=transect,\n            by = \"PlotID\", \n            relationship = \"many-to-one\") #since there is multiple plotID duplicates this is necessary to join the transect database\n\n\n#Loading Covariates####\n\n#create empty list to load the covariates into\ncovariates &lt;-  vector(mode = 'list')\n\n#List all the covariates that you want to use\ncovariates$asp &lt;- rast(\"C:/Users/Alexis Means/OneDrive/OneDrive - University of Idaho/DocuMents/Project/Nutrition Sampling/Rasters/LF_Asp/LC20_Asp_220.tif\")\ncovariates$elev &lt;- rast(\"C:/Users/Alexis Means/OneDrive/OneDrive - University of Idaho/DocuMents/Project/Nutrition Sampling/Rasters/LF_Elev/LC20_Elev_220.tif\")\n\n#can add more covariates here without updating for loop\n\n\n#make a shape object out of the coordinates that exist in comp\ncoords &lt;- vect(comp,\n               geom = c(\"BeginUTM_Easting\",\"BeginUTM_Northing\"),\n               crs = \"EPSG:32610\")\n\n\n#create a for loop#### \n#goes over each covariate raster that we have and \n#reprojecting the UTM points into the the same ESPG of the imported rasters\n\nfor (i in 1:length(covariates)){\n  proj.coords = project(x = coords,\n                        y = covariates[[i]])\n  out = extract(x = covariates[[i]],\n                y = proj.coords)\n  comp[,names(covariates[i])] = out [,2]\n}\n\n## THIS IS A CHECK IF YOU NEED IT\n# helps plot points to troubleshoot\n#i =1\n#proj.coords = project(x = coords,\n#                     y = covariates[[i]])\n#plot(covariates[[1]])\n#points(proj.coords)\n\n#restructured comp dataframe####\n#to make more readable and made sure that my variables\n#are being read correctly before continuing (as a number or categorical variable)\n\ncomp1 &lt;- comp %&gt;% \n  select(PlotID, Spp, Family, Genus, ActualName.x, FunctionalGroup, DryWeight.g., Percent, Julian_Day.x, PVT, Abiotic.cover, elev, asp)\n\n#If there are any 0 values it corrects them to 0.01\ncomp1$DryWeight.g. = ifelse(comp1$DryWeight.g. == 0, .01, comp1$DryWeight.g.)\n\n#make sure everything is being read the way we want it to \ncomp1$elev = as.numeric(comp1$elev)\ncomp1$Family = as.factor(comp1$Family)\ncomp1$Genus= as.factor(comp1$Genus)\ncomp1$ActualName.x= as.factor(comp1$ActualName.x)\ncomp1$Spp= as.factor(comp1$Spp)\ncomp1$DryWeight.g.= as.numeric(comp1$DryWeight.g.)\ncomp1$PVT= as.factor(comp1$PVT)\n\n#calculate sample size for each hierarchical group####\n#species\ncomp1 &lt;- comp1 %&gt;% \n  group_by(ActualName.x) %&gt;% \n  mutate(n.Species = sum(!is.na(ActualName.x))) %&gt;% \n  ungroup()\n\ncomp1 &lt;- comp1 %&gt;% \n  group_by(Genus) %&gt;% \n  mutate(n.Genus = sum(!is.na(Genus))) %&gt;% \n  ungroup()\n\ncomp1 &lt;- comp1 %&gt;% \n  group_by(Family) %&gt;% \n  mutate(n.Family =  sum(!is.na(Family))) %&gt;% \n  ungroup()\n\ncomp1 &lt;- comp1 %&gt;% \n  group_by(FunctionalGroup) %&gt;% \n  mutate(n.FunctionalGroup = sum(!is.na(FunctionalGroup))) %&gt;% \n  ungroup()\n\ncomp1 &lt;- comp1 %&gt;% \n  rename(julian = Julian_Day.x)"
  },
  {
    "objectID": "posts/MarksChannels/Marks.and.Channels.html#stacked-bar-plot",
    "href": "posts/MarksChannels/Marks.and.Channels.html#stacked-bar-plot",
    "title": "Assignment 4",
    "section": "Stacked bar plot",
    "text": "Stacked bar plot\nThe first graph is using color and length to demonstrate the species composition of each PVT. Believe it or not, this looked worse the first time that I ran it. I had to limit the number of observations to the top 30 per PVT.\nThe second graph is essentially the same information but flipped. Instead of filling the bar with the number of species observations I filled it with the observations of of the vegetation community.\n\n\nCode\ncomp1 &lt;- comp1 %&gt;% mutate(PVT = as.factor(PVT))\n\ntop_30 &lt;- comp1 %&gt;%\n  group_by(PVT, ActualName.x) %&gt;%\n  summarise(Count = n(), .groups = 'drop') %&gt;%\n  arrange(PVT, desc(Count)) %&gt;%\n  group_by(PVT) %&gt;%\n  slice_head(n = 30)\n\ntop_10_names &lt;- top_30 %&gt;%\n  count(ActualName.x, sort = TRUE) %&gt;%\n  slice_head(n = 10) %&gt;%\n  pull(ActualName.x)\n\nggplot(top_30 %&gt;% filter(ActualName.x %in% top_10_names), \n       aes(x = PVT, y = Count, fill = ActualName.x)) +\n  geom_bar(stat = \"identity\") +\n  labs(title = \"Species composition within Vegetation Communities\",\n       x = \"Vegetation Type\", y = \"Spp Count\", fill = NULL) +\n  theme_minimal() +\n  theme(legend.position = \"bottom\", \n        legend.key.size = unit(5, \"pt\"),\n        legend.text = element_text(size = 6))\n\n\n\n\n\n\n\n\n\nCode\nggplot(top_30 %&gt;% filter(ActualName.x %in% top_10_names), \n       aes(x = ActualName.x, y = Count, fill = PVT)) +\n  geom_bar(stat = \"identity\") +\n  labs(title = \"Species composition within Vegetation Communities\",\n       x = \"Species\", y = \"# of Observations\") +\n  theme_minimal() +\n  theme(legend.position = \"bottom\", \n        legend.text = element_text(size = 6),\n         axis.text.x = element_text(angle = 45, hjust = 1))"
  },
  {
    "objectID": "posts/MarksChannels/Marks.and.Channels.html#bad-graphs",
    "href": "posts/MarksChannels/Marks.and.Channels.html#bad-graphs",
    "title": "Assignment 4",
    "section": "Bad Graphs",
    "text": "Bad Graphs"
  },
  {
    "objectID": "posts/MarksChannels/Marks.and.Channels.html#good-plots",
    "href": "posts/MarksChannels/Marks.and.Channels.html#good-plots",
    "title": "Assignment 4",
    "section": "Good Plots",
    "text": "Good Plots\n\nScatterplot\nWithin this graph I wanted to observe the trends of biomass as it changes along an elevation gradient. I also colored the each point by the vegetation community that it was sampled within. Since there are multiple observations assigned to the exact same elevation since the elevation is a general measurement for the whole transect, there are multiple observations for the same elevation.\nThis could be cleaner, but it is not terrible.\nuses color and points\n\n\nCode\nfiltered_data &lt;- comp1 %&gt;% filter(DryWeight.g. &lt;= 75)\n\n# Scatter plot with color by PVT\nggplot(filtered_data, aes(x = elev, y = DryWeight.g., color = PVT)) +\n  geom_point(alpha = 0.6) +  # Add transparency to avoid overplotting\n  geom_smooth(method = \"lm\", se = FALSE, color = \"black\") +  # Add overall trendline\n  labs(title = \"Biomass trends by Elevation\",\n       x = \"Elevation\", y = \"Biomass (g)\", color = \"PVT\") +\n  theme_minimal()\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\n\nSpecies- Richness\nWith this graph I wanted to observe the range of species richness within each vegetation community. The boxplot tells us the range of the number of species identified at transects within those vegetation communities. The triangle tells us the rough mean value of species observations and the line tells the median value.\nI could not figure out how to add the triangle to the legend, so it is a little ambiguous without it.\n\n\nCode\ncomp2 &lt;- comp1 %&gt;% \n  left_join(y=transect,\n            by = \"PlotID\") %&gt;% \n  group_by(PlotID) %&gt;% \n  mutate(species_richness = n_distinct(ActualName.x))\ncomp2$PVT.x &lt;- factor(comp2$PVT.x)\nView(comp2)\n\nggplot(comp2, aes(x = PVT.x, y = species_richness, fill = PVT.x)) +\n  geom_boxplot() +\n  stat_summary(fun = mean, geom = \"point\", shape = 24, size = 2, fill = \"yellow\", \n               aes(group = PVT.x)) + \n  labs(title = \"Species Richness with Vegetation Communities\",\n       x = \"Vegetation Type\", \n       y = \"Species Richness\") +\n  scale_x_discrete(labels = NULL) +\n  scale_fill_discrete(name = \"Vegetation Type\",\n                      labels = c(\"668\" = \"Scabland Shrubland\", \n                                 \"669\" = \"Big Sagebrush Shrubland\",\n                                 \"672\" = \"Grassland\",\n                                 \"674\" = \"Big Sagebrush Steppe\",\n                                 \"682\" = \"Riparian\")) +\n  scale_y_continuous(limits = c(5, 20), breaks = c(5, 10, 15, 20)) +\n  theme(axis.text.x = element_blank(), \n        axis.ticks.x = element_blank())"
  },
  {
    "objectID": "posts/MarksChannels/Marks.and.Channels.html#other-graphs-i-want-to-make",
    "href": "posts/MarksChannels/Marks.and.Channels.html#other-graphs-i-want-to-make",
    "title": "Assignment 4",
    "section": "Other graphs I want to make",
    "text": "Other graphs I want to make\nTIME SERIES:\n\nI could calculate the min, mean and max (biomass and percent cover) for each species that I observed and compare how it changes across PVTs or across seasons\nUsing time series I could group each species by PVT and show how the biomass or percent cover changes between seasons ex. plot percent cover of a species in different communities throughout different times of year\n\ncan plot phenology phases overtime\n\n\nBOXPLOT:\n\nshow the mean biomass or percent cover for each species vary by PVT, asp, or elev\ncomparison of biomass or percent cover by asp or elevation ex plot avg biomass of different communities across various elevation ranges or aspect\n\nHEATMAP:\n\nPlot biomass or percent cover across different grid locations of your study area, color coded to show density. Create a heatmap to show how aspect or elevation has an effect on cover or biomass in different PVTs"
  },
  {
    "objectID": "posts/MarksChannels/Marks.and.Channels.html#expressiveness-and-effectiveness",
    "href": "posts/MarksChannels/Marks.and.Channels.html#expressiveness-and-effectiveness",
    "title": "Assignment 4",
    "section": "Expressiveness and Effectiveness",
    "text": "Expressiveness and Effectiveness\n\nSpecies- Richness\nUltimately with my data, I hope to be able to determine any differences in nutritional quality between differing vegetation communities. Before I get to that point, I want to do some simple comparisons of the 5 different vegetation communities that I sampled. With my first graph I want to compare the species richness (number of species observed) between my vegetation communities.\n\n\nCode\ncomp2 &lt;- comp1 %&gt;% \n  left_join(y=transect,\n            by = \"PlotID\") %&gt;% \n  group_by(PlotID) %&gt;% \n  mutate(species_richness = n_distinct(ActualName.x))\ncomp2$PVT.x &lt;- factor(comp2$PVT.x)\nView(comp2)\n\nggplot(comp2, aes(x = PVT.x, y = species_richness, fill = PVT.x)) +\n  geom_boxplot() +\n  labs(title = \"Species Richness by Vegetation Communities\",\n       x = \"Vegetation Type\", \n       y = \"Species Richness\") +\n  scale_x_discrete(labels = NULL) +\n  scale_fill_discrete(name = \"Vegetation Type\",\n                      labels = c(\"668\" = \"Scabland Shrubland\", \n                                 \"669\" = \"Big Sagebrush Shrubland\",\n                                 \"672\" = \"Grassland\",\n                                 \"674\" = \"Big Sagebrush Steppe\",\n                                 \"682\" = \"Riparian\")) +\n  scale_y_continuous(limits = c(5, 20), breaks = c(5, 10, 15, 20)) +\n  theme(axis.text.x = element_blank(), \n        axis.ticks.x = element_blank()) \n\n\n\n\n\n\n\n\n\nFigure 1 Shows the number of unique species that were identified in each vegetation community. Because some of the names are so obnoxiously long, I decided it was more effective to color each box and use a key to identify the different communities. I was surprised to see that the scabland shrubland community had the greatest biodiversity. A lot of our sampling was done within the grassland community because it makes up a majority of our study area, so I expected that or the riparian area to have the greatest diversity. The more you know I guess.\n\n\nPVT Species Composition\nIf I wanted to approach this slightly different and make it really overwhelming, I could look at the composition of species observed in each community instead of the richness and show each species in a stacked bar graph.\n\n\nCode\ncomp1 &lt;- comp1 %&gt;% mutate(PVT = as.factor(PVT))\n\ntop_30 &lt;- comp1 %&gt;%\n  group_by(PVT, ActualName.x) %&gt;%\n  summarise(Count = n(), .groups = 'drop') %&gt;%\n  arrange(PVT, desc(Count)) %&gt;%\n  group_by(PVT) %&gt;%\n  slice_head(n = 30)\n\ntop_10_names &lt;- top_30 %&gt;%\n  count(ActualName.x, sort = TRUE) %&gt;%\n  slice_head(n = 10) %&gt;%\n  pull(ActualName.x)\n\nggplot(top_30 %&gt;% filter(ActualName.x %in% top_10_names), \n       aes(x = PVT, y = Count, fill = ActualName.x)) +\n  geom_bar(stat = \"identity\") +\n  labs(title = \"Species composition within Vegetation Communities\",\n       x = \"Vegetation Type\", y = \"Spp Count\", fill = NULL) +\n  theme_minimal() +\n  theme(legend.position = \"bottom\", \n        legend.key.size = unit(5, \"pt\"),\n        legend.text = element_text(size = 6))\n\n\n\n\n\n\n\n\n\nFigure 2 is a mess of squished colors and scientific names that most people don’t know or care about when making this comparison. It also does not get the same point across that I do when comparing species richness. Since I sampled the grassland community so much, comparing its diversity to the other vegetation communities is inconsistent and does not demonstrate the diversity of that community. Believe it or not I also had to limit the number of names to the top 30 within the legend to make the graph even remotely readable."
  },
  {
    "objectID": "posts/MarksChannels/Marks.and.Channels.html#descriminability",
    "href": "posts/MarksChannels/Marks.and.Channels.html#descriminability",
    "title": "Assignment 4",
    "section": "Descriminability",
    "text": "Descriminability\n\nPhenology Timing\nOne of the big things that I was trying to capture with my data is the “green-up” of the vegetation throughout the summer. To do so I had to make sure I was sampling early enough to get most of my species in their newly emergent stage (N) and make sure I continued to sample until a majority of the vegetation reached senescence (C).\n\n\nCode\nfilter_pheno &lt;- comp %&gt;% \n  select(Julian_Day.x, PlotID, Spp, ActualName.x, Percent, Pheno, Part, DryWeight.g., Genus, Family, Species, FunctionalGroup, PVT, BeginUTM_Northing, BeginUTM_Easting, asp, elev) \n\nfilter_pheno &lt;- filter_pheno %&gt;% \n  mutate(Month = case_when(\n    Julian_Day.x &gt;= 91 & Julian_Day.x &lt;= 120 ~ \"April\",\n    Julian_Day.x &gt;= 121 & Julian_Day.x &lt;= 151 ~ \"May\",\n    Julian_Day.x &gt;= 152 & Julian_Day.x &lt;= 181 ~ \"June\",\n    Julian_Day.x &gt;= 182 & Julian_Day.x &lt;= 212 ~ \"July\",\n    Julian_Day.x &gt;= 213 & Julian_Day.x &lt;= 243 ~ \"August\",\n    TRUE ~ NA_character_), \n   Month = factor(Month, levels = c(\"April\", \"May\", \"June\", \"July\"), ordered = TRUE)\n  )\n   \nfilter_pheno &lt;- filter_pheno %&gt;% \n  mutate(Pheno = factor(Pheno, levels = c(\"N\", \"B\", \"FL\", \"FR\", \"M\", \"C\"), ordered = TRUE)) \n  \nView(filter_pheno)\n\n\nggplot(filter_pheno, aes(x = Pheno)) +\n  geom_bar(fill = \"blue\", color = \"black\") +  \n  labs(\n    title = \"Phenology Counts by Month\",\n    x = \"Phenology \",\n    y = \"Count\"\n  ) +\n  facet_wrap(~ Month, ncol = 2, drop = FALSE) +  \n  theme_minimal() +\n  theme(\n    strip.text = element_text(size = 12, face = \"bold\"),\n    legend.position = \"none\"  \n  )\n\n\n\n\n\n\n\n\n\nFigure 3 shows the progression of phenology stages throughout my sampling time frame for all of the species that I observed. By breaking it into months it allows me to compare how each of the phenological stages progressed, and determine if I think I accurately captured the speed at which the nutritional landscape progresses.\n\n\nCode\nggplot(filter_pheno, aes(x = Julian_Day.x, color = Pheno)) +  \n  geom_line(stat = \"count\", linewidth = 1.2) +\n  scale_color_viridis_d(option = \"viridis\", begin = 0, end = 1, name = \"Phenology State\") + \n  labs(\n    title = \"Phenology Trends Over Time\",\n    x = \"Julian Day\",\n    y = \"# of Observations\"\n  ) +\n  theme_minimal() +\n  theme(\n    strip.text = element_text(size = 12, face = \"bold\"),\n    legend.position = \"right\"  \n  )\n\n\n\n\n\n\n\n\n\nFigure 4 wow this one was worse than I thought it was going to be. With this graph I used the same data from the previous graph. Instead of breaking it up into different categories for each month I used a line graph to plot the number of observations for each phenological stage over time. There is so much information and overlap between the different lines that it is hard to tell what is happening with any of them because they are stacked on top of each other. The color scale also does not work for this because of the gradient, the colors are too closely related and are even harder to differentiate when they are all jumbled together."
  },
  {
    "objectID": "posts/MarksChannels/Marks.and.Channels.html#separability",
    "href": "posts/MarksChannels/Marks.and.Channels.html#separability",
    "title": "Assignment 4",
    "section": "Separability",
    "text": "Separability\n\nCovariate Impact on Biomass\nOne of the covariates I am thinking about using to create a predictive model is elevation. I would like to know if it makes an impact on biomass or percent cover of the vegetation that I observed within my transects Within this graph I wanted to observe the trends of biomass as it changes along an elevation gradient. I also colored the each point by the vegetation community that it was sampled within.\n\n\nCode\nfiltered_data &lt;- comp1 %&gt;% filter(DryWeight.g. &lt;= 75)\n\nggplot(filtered_data, aes(x = elev, y = DryWeight.g., color = PVT)) +\n  geom_point(alpha = 0.6) +  # Add transparency to avoid overplotting\n  geom_smooth(method = \"lm\", se = FALSE, color = \"black\") +  # Add overall trendline\n  labs(title = \"Biomass trends by Elevation\",\n       x = \"Elevation\", y = \"Biomass (g)\", color = \"PVT\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\nFigure 5 Here I chose to use a scatterplot to demonstrate any trends there may be in dry biomass weight as the transects move up in elevation. Since elevation is a general measurement for the transect, there are multiple observations assigned to the exact same elevation making it look a little messy and harder to see a trend. I also chose to color each observation by vegetation type (PVT) to observe those differences as well, but some of the colors are slightly muted and hard to tell the difference.\n\n\nCode\ntotalbio &lt;- comp1 %&gt;% \n  group_by(PlotID) %&gt;% \n  mutate(biomass = sum(DryWeight.g.)) \ntotalbio$PVT &lt;- factor(totalbio$PVT)\n\nView(totalbio)\n\nggplot(totalbio, aes(x = elev, y = biomass, color = PVT)) +\n  geom_point(alpha = 1) +  \n  geom_smooth(method = \"lm\", se = FALSE, color = \"black\") +   \n  labs(title = \"Biomass trends by Elevation\",\n       x = \"Elevation\", y = \"Biomass (g)\", color = \"PVT\") +\n  scale_color_manual(values = c(\"668\" = \"violet\", \"669\" = \"red\", \"674\" = \"yellow\", \"682\"= \"blue\", \"672\" = \"green\"))+\n  theme_gray()\n\n\n\n\n\n\n\n\n\nFigure 6 I still thought that the overall premise of the last graph was good, so I just made some slight adjustments to simplify it and highlight the important information. I calculated the total biomass for each transect so there was only one overall measurement for each elevation. I also made the colors for each of my PVTs more bold."
  },
  {
    "objectID": "posts/MarksChannels/Marks.and.Channels.html#popout",
    "href": "posts/MarksChannels/Marks.and.Channels.html#popout",
    "title": "Assignment 4",
    "section": "Popout",
    "text": "Popout\nI want to see what species has the greatest overall percent cover throughout my transects. I can specifically highlight something useful within this graph because it is going to be a ton of data points unless I group it. To my knowledge, bromus tectorum was the species that was observed the most throughout the season. That does not mean that it has the greatest biomass value or percent cover.\n\n\nCode\nweight &lt;- comp1 %&gt;% \n  group_by(ActualName.x) %&gt;% \n  mutate(totalbiomass = mean(DryWeight.g., na.rm = TRUE)) %&gt;% \nungroup()\n\n\n\nView(weight)\n\n\n\nggplot(weight, aes(x = ActualName.x, y = totalbiomass, color = ActualName.x == \"BROMUS TECTORUM\")) +\n  geom_point(size = 3, alpha = 0.8, position = position_jitter(width = 0.2, height = 0)) +  \n  labs(\n   title = \"Total Biomass by Species\",\n    x = \"Species \",\n    y = \"Total Biomass\"\n  ) +\n  scale_color_manual(values = c(\"black\", \"red\"), guide = \"none\") +  \n  xlab(NULL) +\n theme_minimal()\n\n\n\n\n\n\n\n\n\nFigure 5 shows the total biomass observed for each species throughout my field season. Since there is no way to tell apart the names on the x axis, and I was curious about cheatgrass, I highlighted my cheatgrass observations. This graph is almost good, except for not being able to read the x axis. I could limit this to my top 10 species (because who really cares about the tiny insignificant ones anyway) and it would make it easier to read.\n\n\nCode\nbiomass1 &lt;- comp1 %&gt;%\n  group_by(ActualName.x) %&gt;%\n  mutate(totalbiomass = mean(DryWeight.g., na.rm = TRUE)) %&gt;%\n  filter(totalbiomass &gt; 10)\n\nggplot(biomass1, aes(x = Spp, y = totalbiomass, color = ActualName.x == \"BROMUS TECTORUM\")) +\n  geom_point(size = 3, alpha = 0.8, position = position_jitter(width = 0.2, height = 0)) +  \n  labs(\n   title = \"Total Biomass by Species\",\n    x = \"Species \",\n    y = \"Total Biomass\"\n  ) +\n  scale_color_manual(values = c(\"black\", \"red\"), guide = \"none\") +  \n  xlab(NULL) +\n theme_minimal()+\n  theme(\n    axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1))\n\n\n\n\n\n\n\n\n\nignore this\n\n\nCode\n#totalbiomass &lt;- comp1 %&gt;% \n#  left_join(y=transect,\n#            by = \"PlotID\") %&gt;% \n#    mutate(Season = case_when(\n#    Julian_Day.x &gt;= 75 & Julian_Day.x &lt;= 153 ~ \"SP\",\n#    Julian_Day.x &gt;= 154 & Julian_Day.x &lt;= 228 ~ \"SU\",\n#    TRUE ~ NA_character_  # Assign NA for values outside these ranges\n# )) %&gt;% \n# group_by(Season, PVT.x) %&gt;% \n#  mutate(bio = mean(DryWeight.g.))\n         \n#  totalbiomass$PVT.x &lt;- factor(totalbiomass$PVT.x)\n#View(totalbiomass)\n\n#ggplot(totalbiomass, aes(x = Season, y = bio, fill = PVT.x)) +\n# geom_bar(stat = \"identity\",position = \"dodge\") +   \n#  labs(\n#    title = \"Biomass by PVT\",\n#    x = \"PVT\",\n#   y = \"Total Biomass (g)\"\n#  ) +\n#  theme_minimal()+\n#  theme(legend.position = \"none\")\n\n#ggplot(totalbiomass, aes(x = Season, y = bio, fill = Season)) +\n#  geom_bar(stat = \"identity\", position = \"dodge\") +  \n#  facet_wrap(~ PVT.x, scales = \"free_x\", strip.position = \"bottom\") +  # Creates separate panels for each PVT\n#  labs(\n#    title = \"Biomass by PVT and Season\",\n#    x = \"PVT\",\n#    y = \"Total Biomass (g)\"\n#  ) +\n#  theme_minimal()\n#View(comp2)"
  },
  {
    "objectID": "posts/VotingData/DataDrivenVoting.html",
    "href": "posts/VotingData/DataDrivenVoting.html",
    "title": "Assignment 5",
    "section": "",
    "text": "Data Download\n\n\nCode\nlibrary(tidyverse)\n\nIndivdual.Skater &lt;- read.csv(\"SkaterIndividualstats.csv\")\nOnIce.Skater &lt;- read.csv(\"SkaterOnicestats.csv\")\nGoalie &lt;- read.csv(\"Goalies.csv\")\nIndividual.Skater.Rookie &lt;- read.csv(\"RookieSkaterindividual.csv\")\nOnIce.Skater.Rookie &lt;- read.csv(\"RookieSkaterOnIce.csv\")\nRookie.Goalie &lt;- read.csv(\"RookieGoalies.csv\")\n\n\n\n\nHart Memorial Trophy\nWhat is it: Awarded to the “player judged most valuable to his team.” This isn’t necessarily the best overall player, but rather the one who contributes most significantly to his team’s success.\nFor this trophy I chose to focus on the corsi percentage statistics because I think it is the best all encompassing statistic of how that player contributes to their teams overall performance (if I am understanding the statistic correctly). I started by looking at the Corsi % for each of the players.\n\n\nCode\nlibrary(tidyverse)\n\ntop_players &lt;- OnIce.Skater %&gt;%\n  arrange(desc(CF.)) %&gt;%\n  top_n(30, CF.)\n\nggplot(top_players, aes(x = reorder(Player,-CF.), y = CF.)) + \n  geom_bar(stat = \"identity\") +   \n  theme_minimal() +              \n  labs(title = \"Corsi(%) for Each Player\", x = \"Player\", y = \"Corsi (%)\") +\n  theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5))\n\n\n\n\n\n\n\n\n\nHowever, it arguable that individuals with less time on the ice or do not play as many games are not contributing as much to their teams success. I decided to show a scatterplot of the Corsi percentage compared to the players time spent on the ice during the game. This showed that some of the individuals with the highest Corsi score did not spend as much time on the ice.\n\n\nCode\nOnIce.Skater &lt;- OnIce.Skater %&gt;%\n  mutate(TOI_per_GP = TOI / GP) \n\ntop_players &lt;- OnIce.Skater %&gt;%\n  arrange(desc(CF.)) %&gt;%\n  top_n(20, CF.)\n  \nggplot(top_players, aes(x = TOI_per_GP, y = CF.)) +\n  geom_point(aes(color = Player), alpha = 0.6) +  \n  theme_minimal() +\n  labs(title = \"Corsi(%) vs. Time played per Game\",\n       x = \"Time played per Game\",\n       y = \"Corsi (%)\") +\n  scale_x_continuous(breaks = seq(0, 30, by = 2)) +  \n  theme(legend.position = \"none\", \n        axis.text.x = element_text(angle = 45, hjust = 1))\n\n\n\n\n\n\n\n\n\nBecause of this I chose to filter the dataset one more time to only include individuals who spent more than 16 minutes on the ice per game and then created a bar graph to view individuals with the highest corsi percentage within this group.\n\n\nCode\ntop.indv &lt;- top_players %&gt;%\n  filter(TOI_per_GP &lt;= 16 ) %&gt;%\n  arrange(desc(CF.)) %&gt;%\n  top_n(30, CF.)\n\nggplot(top.indv, aes(x = reorder(Player, -CF.), y = CF.)) + \n  geom_bar(stat = \"identity\") +   \n  theme_minimal() +              \n  labs(title = \"Corsi(%) for Each Player\", x = \"Player\", y = \"Corsi(%)\") +\n  theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5))\n\n\n\n\n\n\n\n\n\nAfter seeing these results my top 5 picks would be:\n\nNathan Clurman\nSamuel Bolduc\nJustin Sourdif\nEmil Bemstrom\nRasmus Asplund\n\n\n\nVezina Trophy\nWhat is it: Presented to the goaltender “adjudged to be the best at this position.” NHL general managers vote on this award.\nI wanted to start of by looking at the statistics fo the GSAA (goals saved above average). To me this seemed like the most valuable statistic to determine which goaltender is the best at what they do. I compared the GSAA to each players time spent on the ice per games played again.\n\n\nCode\nGoalie &lt;- Goalie %&gt;% \n   mutate(TOI_by_GP = TOI / GP) \n\ntop_goalie &lt;- Goalie %&gt;% \n  arrange(desc(GSAA)) %&gt;% \n  top_n(30, GSAA)\n\nggplot(top_goalie, aes(x = TOI_by_GP, y = GSAA)) +\n  geom_point(aes(color = Player), alpha = 0.6) +  \n  theme_minimal() +\n  labs(title = \"Goals Saved Above Average vs. Time player per Game\",\n       x = \"Time played per Game\",\n       y = \"GSAA\") +\n  scale_x_continuous(breaks = seq(40, 65, by = 5)) +  # Custom x-axis intervals from 15 to 30 in steps of 5\n  theme(legend.position = \"none\", \n        axis.text.x = element_text(angle = 45, hjust = 1))\n\n\n\n\n\n\n\n\n\nSince most of the players averaged above 50 TOI/GP, I decided to remove anyone who spent less than 50 TOI/GP because they will most likely have skewed numbers. I then decided to compare the GSAA to the high danger GSAA.\n\n\nCode\nGoalie_filtered&lt;- Goalie %&gt;%\n  filter(TOI_by_GP &gt;= 50)\n\ntop_goalie &lt;- Goalie_filtered %&gt;% \n  arrange(desc(GSAA)) %&gt;% \n  top_n(30, GSAA)\n\nggplot(top_goalie, aes(x = HDGSAA, y = GSAA)) +\n  geom_point(aes(color = Player), alpha = 0.6) +  \n  theme_minimal() +\n  labs(title = \"Goals Saved Above Average vs. High Danger Goals Saved Above Average \",\n       x = \"HDGSAA\",\n       y = \"GSAA\") +\n  scale_x_continuous(breaks = seq(0, 65, by = 10)) +  # Custom x-axis intervals from 15 to 30 in steps of 5\n  theme(legend.position = \"none\", \n        axis.text.x = element_text(angle = 45, hjust = 1))\n\n\n\n\n\n\n\n\n\nI feel like most peoples ability to save low and medium danger goals are probably pretty high as it, is so quantifying their overall ability with GSAA is more helpful. Where the skill really comes in is in the high danger situations where the team is counting on the goalie alone to prevent the other team from scoring. Based on this graph I want to filter out individuals who fall below a 10 for GSAA to determine who the best goalie is.\n\n\nCode\nGoalie_final &lt;- Goalie_filtered %&gt;% \n  filter(GSAA &lt;= 10) %&gt;% \n  arrange(desc(HDGSAA)) %&gt;% \n  top_n(30, HDGSAA)\n\nggplot(Goalie_final, aes(x = reorder(Player, -HDGSAA), y = HDGSAA)) + \n  geom_bar(stat = \"identity\") +   \n  theme_minimal() +              \n  labs(title = \"High Danger GSAA for Each Player\", x = \"Player\", y = \"HDGSAA\") +\n  theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5))\n\n\n\n\n\n\n\n\n\nBased on these results my nominations for this trophy would be:\n\nPyotr Kochetkov\nJoel Blomqvist\nJacob Markstrom\nLinus Ullmark\nJonas Johansson\n\n(way different than our results in class, but what do I know it makes sense to me)\n\n\nJames Norris Memorial Trophy\nWhat is it: Awarded to the defenseman who demonstrates “the greatest all-around ability” at the position.\nFirst I wanted to compare the percentages of SA and GA for each defensive player while they are on the ice. Similar to many of the other graphs, this could not be comparable because of the amount of time played or games play by each player. So first I looked at the amount of time each player spent on the ice per game.\n\n\nCode\ntop.defense &lt;- OnIce.Skater %&gt;% \n  filter(Position == \"D\") %&gt;% \n  mutate(TOI_by_GP = TOI / GP) %&gt;%  \n  arrange(desc(TOI_by_GP)) %&gt;% \n  top_n(30, TOI_by_GP)\n\nggplot(top.defense, aes(x = reorder(Player, -TOI_by_GP), y = TOI_by_GP)) + \n  geom_bar(stat = \"identity\") +   \n  theme_minimal() +              \n  labs(title = \"Time Played per Game for Each Player\", x = \"Player\", y = \"TOI/GP\") +\n  theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5))\n\n\n\n\n\n\n\n\n\nFrom the new filtered dataset, I looked at the amount of goals against each persons team vs the amount of shots against the individuals teams. Players with lower scores mean that they’re defensive efforts are contributing significantly to the teams success. From this graph I decided to filter my final results to the individuals with less than 75 GA and 600 SA.\n\n\nCode\nggplot(top.defense, aes(x = SA, y = GA)) +\n  geom_point(aes(color = Player), alpha = 0.6) +  \n  theme_minimal() +\n  labs(title = \"Goals Against vs Shots Against \",\n       x = \"Shots Against (SA)\",\n       y = \"Goals Against (GA)\") +\n  theme(legend.position = \"none\")\n\n\n\n\n\n\n\n\n\nLastly, I decided to look at the count of scores against the team from my filtered dataset. These individuals have spent the most time on the ice during the games, had the least amount of goals against and shots against their team, as well as the lowest chance of scores against their team while they were on the ice.\n\n\nCode\nwin.defense &lt;- top.defense %&gt;% \n    filter(GA &lt;= 75 ) %&gt;% \n    filter(SA &lt;= 600 ) %&gt;% \n  arrange(desc(SCA)) %&gt;% \n  top_n(30, SCA)\n\nggplot(win.defense, aes(x = reorder(Player, SCA), y = SCA)) + \n  geom_bar(stat = \"identity\") +   \n  theme_minimal() +              \n  labs(title = \"Scoring Chances Against for Each Player\", x = \"Player\", y = \"SCA\") +\n  theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5))\n\n\n\n\n\n\n\n\n\nBecause of these results this would be my ballet:\n\nDrew Doughty\nTony DeAngelo\nFilip Hronek\nQuinn Hughes\nNoah Dobson\n\n\n\nCalder Memorial Trophy\nWhat is it: Given to the player “adjudged to be the most proficient in his first year of competition.” This is essentially the rookie of the year award.\nFor this trophy I filtered it similarly to Hart Memorial Trophy. I filtered the dataset to only include the top 50 players that had the most time played per game. I then compared this time to their overall Corsi percentage. I chose to filter the dataset again to only include the players that had spent more than 19 minutes on the ice per game because that time frame seemed to be when the Corsi statistics start to fall due to players spending more time on the ice.\n\n\nCode\nOnIce.rookie &lt;- OnIce.Skater.Rookie %&gt;%\n  mutate(TOI_per_GP = TOI / GP) \n\ntop.rookie &lt;- OnIce.rookie %&gt;%\n  arrange(desc(TOI_per_GP)) %&gt;%\n  top_n(50, TOI_per_GP)\n\nggplot(top.rookie, aes(x = TOI_per_GP, y = CF.)) +\n  geom_point(aes(color = Player), alpha = 0.6) + \n  theme_minimal() +\n  labs(title = \"Corsi vs. Time played per Game\",\n       x = \"Time played per Game\",\n       y = \"Corsi (%)\") +\n  scale_x_continuous(breaks = seq(15, 30, by = 1)) +  \n  theme(legend.position = \"none\", \n        axis.text.x = element_text(angle = 45, hjust = 1))\n\n\n\n\n\n\n\n\n\nI then created a bargraph to view the players with the highest Corsi percentage from this group.\n\n\nCode\ntop.rookie.cf &lt;- top.rookie %&gt;%\n  filter(TOI_per_GP &lt;= 19 ) %&gt;%\n  arrange(desc(CF.)) %&gt;%\n  top_n(30, CF.)\n\nggplot(top.rookie.cf, aes(x = reorder(Player, -CF.), y = CF.)) + \n  geom_bar(stat = \"identity\") +   \n  theme_minimal() +              \n  labs(title = \"Corsi(%) for Each Player\", x = \"Player\", y = \"Corsi(%)\") +\n  theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5))\n\n\n\n\n\n\n\n\n\nBased on these results my ballot would be:\n\nAlex Laferriere\nBrandt Clarke\nPavel Dorofeyev\nJordan Spence\nMatt Coronato\n\n\n\nFrank J. Selke Trophy\nWhat is it: Awarded to the forward who best excels in the defensive aspects of the game.\nI started by filtering the On Ice dataset to just the forward positions and chose to analyze it similar to how I analyzed the defensive player data for the James Norris Memorial Trophy. I started by looking at the amount of time each player spent on the ice during each game and only kept the top 30.\n\n\nCode\ntop.ofd &lt;- OnIce.Skater %&gt;% \n  filter(Position != \"D\") %&gt;% \n  mutate(TOI_by_GP = TOI / GP) %&gt;%  \n  arrange(desc(TOI_by_GP)) %&gt;% \n  top_n(30, TOI_by_GP)\n\nggplot(top.ofd, aes(x = reorder(Player, -TOI_by_GP), y = TOI_by_GP)) + \n  geom_bar(stat = \"identity\") +   \n  theme_minimal() +              \n  labs(title = \"Time Played per Game Values for Each Player\", x = \"Player\", y = \"TOI/GP\") +\n  theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5))\n\n\n\n\n\n\n\n\n\nI then looked at the number of goals and shots against each players teams while they were on the ice from the filtered data set. There are some players that have higher shots against their team, but less goals against their team. I want to select from the lowest values from both of these values so I filtered for the less the 60 shots against their team and less than 600 goals against their team.\n\n\nCode\nggplot(top.ofd, aes(x = SA, y = GA)) +\n  geom_point(aes(color = Player), alpha = 0.6) +  \n  theme_minimal() +\n  labs(title = \"Goals Against vs Shots Against \",\n       x = \"Shots Against (SA)\",\n       y = \"Goals Against (GA)\") +\n  theme(legend.position = \"none\")\n\n\n\n\n\n\n\n\n\nLastly I wanted see the overall scores against the individuals teams from the filtered data set of the most time played per game with the least amount of shots and goals against their team.\n\n\nCode\nwin.ofd &lt;- top.ofd %&gt;% \n    filter(GA &lt;= 60 ) %&gt;% \n    filter(SA &lt;= 600 ) %&gt;% \n  arrange(desc(SCA)) %&gt;% \n  top_n(30, SCA)\n\nggplot(win.ofd, aes(x = reorder(Player, SCA), y = SCA)) + \n  geom_bar(stat = \"identity\") +   \n  theme_minimal() +              \n  labs(title = \"SCA for Each Player\", x = \"Player\", y = \"SCA\") +\n  theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5))\n\n\n\n\n\n\n\n\n\n\nMatthew Barzal\nKirill Kaprizov\nAleksander Barkov\nArtturi Lehkonen\nTim Stutzle\n\n\n\nLady Byng Memorial Trophy\nWhat is it: Presented to the player who exhibits “the best type of sportsmanship and gentlemanly conduct combined with a high standard of playing ability.”\nTo get at “sportsmanship and gentlemanly conduct” I want to look at the number of penalties and misconducts by each player and only look at the playing abilities of those with lower counts. Since minor penalities are less aggressive I chose to focus on just the major penalties\n\n\nCode\nggplot(Indivdual.Skater, aes(x = Misconduct, y = Total.Penalties)) +\n  geom_point(aes(color = Player), alpha = 0.6) +  \n  theme_minimal() +\n  labs(title = \"Sportmanship and Gentlemanly Conduct\",\n       x = \"# of Misconducts\",\n       y = \"Total Penalites\") +\n  theme(legend.position = \"none\")\n\n\n\n\n\n\n\n\n\nThere are not many players with misconducts, so I am going to remove any players that have at least 1. Since we are aiming for players with the most gentlemanly like conduct I might as well filter out anyone with any penalties at all as well. I then took the top 30 players who have spent the most time on the ice per game. To compare their overall playing ability I am then going to look at their corsi percentage.\n\n\nCode\ngood.guys &lt;- Indivdual.Skater %&gt;% \n  filter(Misconduct &lt;= 0 ) %&gt;% \n  filter(Total.Penalties &lt;= 0 ) %&gt;% \n    mutate(TOI_by_GP = TOI / GP) %&gt;%  \n      arrange(desc(TOI_by_GP)) %&gt;% \n      top_n(30, TOI_by_GP)\ngood.guys &lt;- good.guys %&gt;% \n  left_join(y = OnIce.Skater,\n            by = \"Player\")\n\nView(good.guys)\nggplot(good.guys, aes(x = reorder(Player, -CF.), y = CF.)) + \n  geom_bar(stat = \"identity\") +   \n  theme_minimal() +              \n  labs(title = \"Corsi(%) for Each Player\", x = \"Player\", y = \"Corsi(%)\") +\n  theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5))\n\n\n\n\n\n\n\n\n\nMy top picks for this trophy would be:\n\nAngus Crookshank\nTobias Bjornfot\nBrian Halonen\nCorey Schueneman\nDaniil Misyul"
  },
  {
    "objectID": "posts/Midterm.html",
    "href": "posts/Midterm.html",
    "title": "BCB 520 - Final Project",
    "section": "",
    "text": "Located within the Columbia Plateau, the John Day Canyon is a steep, rugged landscape where sagebrush and grasses dominate the hillsides. This dynamic environment supports a unique population of bighorn sheep — one that, remarkably, has avoided the disease outbreaks that often devastate other herds.\nMy research focuses on understanding the nutritional requirements of these bighorn sheep and how those needs shift throughout their reproductive cycle due to changing metabolic demands. The ultimate goal is to develop a predictive model that links their nutritional requirements to movement patterns. By doing so, we can identify potential threats, such as areas where bighorn sheep may come into contact with domestic livestock, and pinpoint critical habitats essential for their survival.\nTo achieve this, I am collecting vegetation data to calculate a measure of “suitable biomass”—essentially, the portion of available forage that meaningfully contributes to the sheep’s energy needs at different reproductive stages. This metric is created using measures of digestible energy and digestible protein. I have currently not finalized my values of “suitable biomass”, but I do have preliminary values of digestible energy and digestible protein from a subset of my data. Eventually using this metric, I will develop a Generalized Additive Model (GAM) to map areas of high and low nutritional quality across the landscape.\nThese techniques will help determine which resources most influence bighorn sheep movement and allow us to predict future movement patterns—a critical step in ensuring their continued success in this landscape. By bridging nutritional ecology with movement ecology, this research will contribute valuable insights into how bighorn sheep navigate their environment and help inform conservation strategies for this unique, disease-free population.\n\n\n\n\nCode\nlibrary(lpSolve)\nlibrary(openxlsx)\nlibrary(tools)\nlibrary(dplyr)\nlibrary(sf)\nlibrary(tidyverse)\n\n# Define the path to the directory containing the file\nexcelpath &lt;- \"C:/Users/Alexis Means/Documents/Project/Nutrition Sampling/R code/FRESH/processed.data/\"\n\n# Define the specific file name\nfilename &lt;- \"FRESH.Subset.xlsx\"\n\n# Construct the full file path\nexcel.file &lt;- file.path(excelpath, filename)\n\n# Load the workbook and read the data\nlibrary(openxlsx)\nhabitat &lt;- loadWorkbook(excel.file)\ndata &lt;- data.frame(readWorkbook(excel.file, sheet = \"FRESH Data\", startRow = 1, colNames = TRUE))\n\n\nplant &lt;-read.csv(\"C:/Users/Alexis Means/Documents/Project/Nutrition Sampling/R code/Cleaning/processed.data/plant.csv\")\n\ndata &lt;- data %&gt;% \n  rename(Code = Plant.Code) %&gt;% \n  left_join(y = plant, \n            by = \"Code\",\n            relationship = \"many-to-one\")\n\n\n\n\n\nFor further description as to what each of my variables are within my data set. Please see my data dictionary here.\n\n\nCode\ntable&lt;- read.csv(\"C:/Users/Alexis Means/Documents/School/BCB520/2A/attributes.csv\") \nknitr::kable(table)\n\n\n\n\n\n\n\n\n\n\nAttribute\nType\nNote\n\n\n\n\nBiomass\nQuantitative\nThis measurement tells us what the weight of dry biomass is for each specific observation\n\n\nTransectID\nCategorical\nThis descriptor is a unique ID that tells us which randomized point we sampled\n\n\nQuadrat\nCategorical\nThere are 5 quadrats that we sample for each quadrat (20,40,60,80,100)\n\n\nCode\nCategorical\nThese are unique codes that describe the family, genius and species for every item observed\n\n\nPhenology\nCategorical\nEach species is assigned a growth stage when we observe it - New, Budding, Flowering, Fruiting, Mature or Cured (N, B, FL, FR, M, C)\n\n\nPVT\nCategorical\nThis number describes the vegetation community that was being sampled, we have 5 total for the study area, it is used as part of the descriptor for each plotID\n\n\npercent\nQuantitative\nThis measurement tells us the percent cover that each composition_id occupies within a 1x1m quadrat\n\n\nSpp\nCategorical\nThis unique ID is slightly more broad and will be used to identify species/phenology combinations within each vegetation type as well as the season\n\n\nFamily\nCategorical\nThis will be used to group quality data if we do not have enough information to determine the quality down to the smaller scale (genus)\n\n\nGenus\nCategorical\nThis will be used to group quality data if we do not have enough information to determine the quality down to the smaller scale (spp)\n\n\nSpecies\nCategorical\nThis will be used to group quality data if we do not have enough information to determine the quality down to the smaller scale (phenological stage)\n\n\nFunctionalGroup\nCategorical\nThe smallest grouping variable for my quality data (perennial or annual grass, forb, or shrub)\n\n\nFGNew\nCategorical\nShortened version of FunctionalGroup\n\n\nCommonName\nCategorical\nThis is another identifier for each species, it will likely not be used within the analysis so it could be removed\n\n\nDuration\nCategorical\nThis is another category I may use to group quality data based on the growth duration of each species\n\n\nStatus\nCategorical\nEach species is categorized as native or invasive\n\n\nSeason\nCategorical\nOur observations are grouped based on the date that they were sampled (Spring, Summer and Fall) to observe the changes in nutritional quality\n\n\nDates\nCategorical\nThis keeps track of the day that each observation was sampled\n\n\nAspect\nCategorical\nDescribed the direction the hill was facing that each of our transects had been sampled on\n\n\nElev\nQuantitative\nDescribes the elevation that each of the transects was sampled at\n\n\nLat/Long\nCategorical\nEach of the lat/long pairs plots the beginning, middle and end of each of the transects\n\n\nDE\nQuantitative\nAmount of digestible energy provided by each species\n\n\nDP\nQuantitative\nAmount of digestible protien provided by each species\n\n\nDE.SD\nQuantitative\nStandard deviation of digestible energy\n\n\nDP.SD\nQuantitative\nStandard deviation of digestible protien\n\n\nJulian Date\nCategorical\nThe converted date that each of the plots was sampled to julian day\n\n\nEasting\nCategorical\nThe converted latitude to UTM\n\n\nNorthing\nCategorical\nThe converted longitude to UTM\n\n\nTotalDE\nQuantitative\nThe amount of total DE available at a transect\n\n\nTotalDP\nQuantitative\nThe amount of total DP available at a transect\n\n\nSuitableBiomass\nQuantitative\nThe amount of forage available at each transect that meet the assigned energetic demands of a lactating female sheep\n\n\nAveDE\nQuantitative\nThe average amount of digestible energy available at a transect\n\n\nAveDP\nQuantitative\nThe average amount of digestible protien available at a transect\n\n\nMonth\nCategorical\nThe month that the plot was sampled\n\n\n\n\n\n\n\n\n\n\n\nUsing a subset of my quality data, I began by comparing measurements of digestible energy (DE) and digestible protein (DP) across plant species and phenological stages. My main goal was to explore whether there is a correlation between high DE and high DP. The scatter plot results showed a pattern consistent with my expectations: the highest values for both DE and DP occur during the newly emergent (N) and budding (B) stages. These values drop sharply by the flowering (FL) stage and remain relatively stable thereafter.\n\n\nCode\nlibrary(tidyverse)\n\ndata$Phenology &lt;- factor(data$Phenology, levels = c(\"N\", \"B\", \"FL\", \"FR\", \"M\", \"C\"))\n\nggplot(data, aes(x = DP, y = DE)) +\n  geom_point(color = \"blue\", alpha = 0.6) +\n  geom_smooth(method = \"lm\", se = TRUE, color = \"red\") + \n  labs(title = \"Relationship Between DE and DP by Phenology\",\n       x = \"Digestible Protein (DP)\",\n       y = \"Digestible Energy (DE)\") +\n  theme_minimal() +\n  facet_wrap(~ Phenology, scales = \"free\") +\n  scale_x_continuous(expand = c(0.05, 0)) +  \n  scale_y_continuous(expand = c(0.05, 0)) +\n  theme(strip.text = element_text(face = \"bold\"))  \n\n\n\n\n\n\n\n\n\nTo better visualize the trends in DP and DE across phenological stages, I isolated the DE and DP values for direct comparison. Both metrics follow the expected pattern, showing a general decline over progressing phenological stage. While many species meet the DE requirement of 11.5 kJ per gram of forage, very few meet the necessary DP threshold of 7.5 g per 100 g of forage beyond the newly emergent stage. These thresholds represent the minimum forage quality needed to meet the energetic and protein demands of a lactating female sheep.\n\n\nCode\n# Ensure Phenology is a factor with the correct order\ndata$Phenology &lt;- factor(data$Phenology, levels = c(\"N\", \"B\", \"FL\", \"FR\", \"M\", \"C\"))\n\nggplot(data, aes(x = Phenology, y = DE, fill = Phenology)) +\n  geom_boxplot(alpha = 0.7, outlier.shape = NA) +  \n  scale_fill_viridis_d(option = \"plasma\") +  \n  labs(title = \"Distribution of Digestible Energy (DE) by Phenology\",\n       x = \"Phenology\",\n       y = \"DE(kJ g^-1)\") +\n  theme_minimal() +\n  theme(legend.position = \"none\")+\n   geom_hline(yintercept = 11.5, linetype = \"dashed\", color = \"red\", size = 1)+\n  annotate(\"text\", x = 6.4, y = 11.8, label = \"11.5\", color = \"black\", size = 4, fontface = \"italic\")\n\n\n\n\n\n\n\n\n\n\n\nCode\nggplot(data, aes(x = Phenology, y = DP, fill = Phenology)) +\n  geom_boxplot(alpha = 0.7, outlier.shape = NA) +  \n  scale_fill_viridis_d(option = \"plasma\") +  \n  labs(title = \"Distribution of Digestible Protien (DP) by Phenology\",\n       x = \"Phenology\",\n       y = \"DP (g protien/100g forage)\") +\n  theme_minimal() +\n  theme(legend.position = \"none\")+\n   geom_hline(yintercept = 7.5, linetype = \"dashed\", color = \"red\", size = 1)+\n  annotate(\"text\", x = 6.5, y = 8, label = \"7.5\", color = \"black\", size = 4, fontface = \"italic\")+\n  coord_cartesian(ylim = c(-2, 12))\n\n\n\n\n\n\n\n\n\n\n\n\nI was curious whether this trend varied across different vegetation types, particularly in riparian areas, which retain the most moisture. However, I did not observe any clear pattern indicating that a specific vegetation type consistently supported significantly higher quality metrics than others.\n\n\nCode\ndata &lt;- data %&gt;%\n  mutate(PVT = str_sub(TransectID, start = 4, end = 6)) %&gt;% \n  group_by(PVT) %&gt;%\n  mutate(Stand_DE = scale(DE)) %&gt;%\n  mutate(Stand_DP = scale(DP)) %&gt;%\n  ungroup()\n\ndata &lt;- data %&gt;%\n  mutate(PVT = case_when(\n    PVT == \"672\" ~ \"Grassland\",\n    PVT == \"682\" ~ \"Riparian\",\n    PVT == \"674\" ~ \"Intermediate\",\n    PVT == \"668\" ~ \"Scabland\",\n    PVT == \"669\" ~ \"Shrubland\",\n    TRUE ~ as.character(PVT)  # This keeps any other values unchanged\n  ))\n\nggplot(data, aes(x = PVT, y = DE, fill = PVT)) +\n  geom_boxplot(alpha = 0.7, outlier.shape = NA) +  \n  scale_fill_viridis_d(option = \"plasma\") +  \n  labs(title = \"Distribution of Digestible Energy (DE) by Phenology and PVT\",\n       x = NULL,  # Remove x-axis label\n       y = \"DE (kJ g^-1)\",\n       fill = \"PVT\") +  # Label for the legend\n  theme_minimal() +\n  theme(\n    legend.position = \"right\",  # Show legend on the right\n    axis.text.x = element_blank(),  # Remove x-axis text\n    axis.ticks.x = element_blank()  # Remove x-axis ticks\n  ) +\n  geom_hline(yintercept = 11.5, linetype = \"dashed\", color = \"red\", size = 1) +\n  facet_wrap(~ Phenology, scales = \"free_x\", ncol = 3) +\n  coord_cartesian(ylim = c(8, 15))\n\n\n\n\n\n\n\n\n\nCode\nggplot(data, aes(x = PVT, y = DP, fill = PVT)) +\n  geom_boxplot(alpha = 0.7, outlier.shape = NA) +  \n  scale_fill_viridis_d(option = \"plasma\") +  \n  labs(title = \"Distribution of Digestible Protein (DP) by Phenology and PVT\",\n      x = NULL,  # Remove x-axis label\n       y = \"DP (g protein/100 g forage)\",\n       fill = \"PVT\") +  # Label for the legend\n  theme_minimal() +\n  theme(legend.position = \"right\",  # Show legend on the right\n    axis.text.x = element_blank(),  # Remove x-axis text\n    axis.ticks.x = element_blank(),\n    strip.text = element_text(face = \"bold\")# Remove x-axis ticks\n  ) +\n  geom_hline(yintercept = 7.5, linetype = \"dashed\", color = \"red\", size = 1) +\n  facet_wrap(~ Phenology, scales = \"free_x\", ncol = 3)+\n  coord_cartesian(ylim = c(-2, 12))\n\n\n\n\n\n\n\n\n\n\n\nCode\nplot &lt;- read.csv(\"C:/Users/Alexis Means/Documents/Project/Nutrition Sampling/R code/Cleaning/processed.data/transect.csv\")\n\n# Define the path to the directory containing the file\nexcelpath &lt;- \"C:/Users/Alexis Means/Documents/Project/Nutrition Sampling/R code/FRESH/processed.data/\"\n\n# Define the specific file name\nfilename &lt;- \"2024.subset.results.xlsx\"\n\n# Construct the full file path\nexcel.file &lt;- file.path(excelpath, filename)\n\n# Load the workbook and read the data\n\nhabitat &lt;- loadWorkbook(excel.file)\nsuitable &lt;- data.frame(readWorkbook(excel.file, sheet = \"Plot-Level-Summary\", startRow = 1, colNames = TRUE))\n\n\nsuitable &lt;- suitable %&gt;% \n  rename(PlotID = TransectID) %&gt;% \n  left_join(y = plot,\n            by = \"PlotID\")\n\nsuitable &lt;- suitable %&gt;% \n  rename(Lat = BeginLat,\n         Long = BeginLong,\n         Easting = BeginUTM_Easting,\n         Northing = BeginUTM_Northing) %&gt;% \n  select(PlotID, TotalDE, TotalDP, SuitableBiomass, AveDE, AveDP, Julian_Day, Lat, Long, Easting, Northing)\n\n\n# Create an sf object with the Lat and Long columns\nsuitable_UTM &lt;- st_as_sf(suitable, coords = c(\"Long\", \"Lat\"), crs = 4326)  # EPSG:4326 is WGS84\n\n# Convert to UTM Zone 11N (EPSG:26911)\nsuitable_UTM &lt;- st_transform(suitable_UTM, crs = 32611)\n\n# Extract UTM coordinates (Easting and Northing)\nsuitable$Easting &lt;- st_coordinates(suitable_UTM)[, 1]\nsuitable$Northing &lt;- st_coordinates(suitable_UTM)[, 2]\n\nsuitable &lt;- suitable %&gt;%  \nmutate(Month = case_when(\n    Julian_Day &gt;= 93 & Julian_Day &lt; 124 ~ \"April\",\n    Julian_Day &gt;= 124 & Julian_Day &lt; 155 ~ \"May\",\n    Julian_Day &gt;= 155 & Julian_Day &lt; 185 ~ \"June\",\n    Julian_Day &gt;= 185 & Julian_Day &lt;= 212 ~ \"July\",\n    TRUE ~ NA_character_\n  )) %&gt;%\n  filter(!is.na(Month)) %&gt;%\n  mutate(Month = factor(Month, levels = c(\"April\", \"May\", \"June\", \"July\")))\n\nsuitable &lt;- suitable %&gt;% \n  mutate(PVT = str_sub(PlotID, start = 4, end = 6)) %&gt;% \n  mutate(PVT = case_when(\n    PVT == \"672\" ~ \"Grassland\",\n    PVT == \"682\" ~ \"Riparian\",\n    PVT == \"674\" ~ \"Intermediate\",\n    PVT == \"668\" ~ \"Scabland\",\n    PVT == \"669\" ~ \"Shrubland\",\n    TRUE ~ as.character(PVT)  # This keeps any other values unchanged\n  ))\n\n\n\n\n\nUsing measurements of DE and DP, along with the biomass of forage collected at my transects, I applied the FRESH Model (Hanley et al. 2012) to evaluate how many of the sampled areas met the nutritional requirements of a lactating female sheep, based on the combined contribution of all observed species. This analysis produced my estimate of “suitable biomass.”\nWhile my initial hypothesis was that riparian areas would stand out for their nutrient quality, this was not supported by the DE and DP values alone. However, due to the higher plant density in these moisture-rich areas, riparian zones did yield a much greater total biomass, resulting in higher suitable biomass values overall compared to other vegetation types.\nOne vegetation community that caught my attention was the scabland community. Found mostly on exposed ridges, these areas are typically rocky, wind-swept, and sun-exposed—conditions not usually associated with high productivity. However, these ridges are often the most accessible points in the landscape and are frequently used by landowners for grazing cattle on BLM land. They also lie closer to potential sources of agricultural runoff and experience more frequent disturbance. I suspect that these human influences may be altering the natural composition and productivity of the scabland community. Therefore, I plan to include distance to private land as a variable in my GAM, as I believe it may be a key factor shaping this vegetation type.\n\n\nCode\nggplot(suitable, aes(x = PVT, y = SuitableBiomass, fill = PVT)) +\n  geom_boxplot(alpha = 0.7, outlier.shape = NA) +\n  scale_fill_viridis_d(option = \"plasma\") +\n  labs(title = \"Comparison of Suitable Biomass Across PVTs\",\n       x = \"Plant Vegetation Type (PVT)\",\n       y = \"Suitable Biomass\") +\n  theme_minimal() +\n  theme(legend.position = \"none\",\n        axis.text.x = element_text(angle = 45, hjust = 1))+\n  coord_cartesian(ylim = c(-2, 170))\n\n\n\n\n\n\n\n\n\n\n\n\nNext, I looked at how these forage quality metrics changed over time. It’s important to note that if a transect did not meet the nutritional requirements for a lactating female sheep, it was assigned a suitable biomass value of zero. Because of this, it may appear that my sampling ended in early July, even though I continued collecting data through August. This is likely because many transects no longer met the nutritional thresholds by mid-summer, resulting in more zeros for suitable biomass.\nThe trends in suitable biomass and digestible energy align with my expectations—they both decline over time. Digestible protein, however, remains relatively stable throughout the season.\nIt’s also reassuring to see that my assumption about the timing of the “green-up”—the period when forage is at its most nutritious—was accurate. The first graph shows a steady decline in suitable biomass until mid-May, after which values remain fairly constant with only a slight decrease through the rest of the summer.\n\n\nCode\n# Define the Julian days and corresponding month labels\ndate_breaks &lt;- c(92, 122, 155, 185)\ndate_labels &lt;- c(\"April\", \"May\", \"June\", \"July\")\n\n\nggplot(suitable, aes(x = Julian_Day, y = SuitableBiomass)) +\n  geom_point(aes(color = PVT), alpha = 0.6) +\n  geom_smooth(method = \"loess\", se = TRUE, color = \"black\") +\n  scale_color_viridis_d() +\n  labs(title = \"Suitable Biomass Over Time\",\n       x = \"Julian Day\",\n       y = \"Suitable Biomass\",\n       color = \"PVT\") +\n  theme_minimal() +\n  theme(legend.position = \"right\",\n        axis.text.x = element_text(angle = 0, hjust = 0.5)) +\n  scale_x_continuous(breaks = date_breaks,\n    labels = date_labels,\n    limits = c(min(date_breaks), max(date_breaks))\n  )\n\n\n\n\n\n\n\n\n\n\n\nCode\nggplot(suitable, aes(x = Julian_Day, y = AveDE)) +\n  geom_point(aes(color = PVT), alpha = 0.6) +\n  geom_smooth(method = \"loess\", se = TRUE, color = \"black\") +\n  scale_color_viridis_d() +\n  labs(title = \"Average DE Over Time\",\n       x = \"Julian Day\",\n       y = \"DE\",\n       color = \"PVT\") +\n  theme_minimal() +\n  theme(legend.position = \"right\",\n        axis.text.x = element_text(angle = 0, hjust = 0.5)) +\n  scale_x_continuous(breaks = date_breaks,\n    labels = date_labels,\n    limits = c(min(date_breaks), max(date_breaks))\n  )\n\n\n\n\n\n\n\n\n\n\n\nCode\nggplot(suitable, aes(x = Julian_Day, y = AveDP)) +\n  geom_point(aes(color = PVT), alpha = 0.6) +\n  geom_smooth(method = \"loess\", se = TRUE, color = \"black\") +\n  scale_color_viridis_d() +\n  labs(title = \"Average DP Over Time\",\n       x = \"Julian Day\",\n       y = \"DP\",\n       color = \"PVT\") +\n  theme_minimal() +\n  theme(legend.position = \"right\",\n        axis.text.x = element_text(angle = 0, hjust = 0.5)) +\n  scale_x_continuous(\n    breaks = date_breaks,\n    labels = date_labels,\n    limits = c(min(date_breaks), max(date_breaks))\n  )\n\n\n\n\n\n\n\n\n\n\n\n\n\nOne of the key parts of my project is understanding the spread of invasive species throughout the canyon, specifically cheat grass. When observing the canyon it seems like cheat grass dominates the landscape which could effect the amount of nutrients available later in the summer after much of it has progressed through its flowering stage. To start I wanted to looks at the density of biomass for all native versus invasive species within the transects that I sampled in our study area. From this graph we can see that overall biomass of native and invasive species is relatively similar throughout the canyon. However, there is an overall greater density of native species.\n\n\nCode\nspp.map &lt;- data %&gt;% \n  select(TransectID, Code, Phenology, Part, Biomass, Duration, Status)\n\nplot &lt;- read.csv(\"C:/Users/Alexis Means/Documents/Project/Nutrition Sampling/R code/Cleaning/processed.data/transect.csv\")\n\nspp.map &lt;- spp.map %&gt;% \n  rename(PlotID = TransectID)\n\nspp.map &lt;- spp.map %&gt;% \n  left_join(y = plot,\n            by = \"PlotID\",\n            relationship = \"many-to-one\")\n\nspp.map &lt;- spp.map %&gt;% \n  rename(Lat = BeginLat,\n         Long = BeginLong,\n         Easting = BeginUTM_Easting,\n         Northing = BeginUTM_Northing) %&gt;% \n  select(PlotID, Code, Phenology, Part, Biomass, Duration, Status, Julian_Day, Lat, Long, Easting, Northing)\n\n\n# Create an sf object with the Lat and Long columns\nspp.map_UTM &lt;- st_as_sf(spp.map, coords = c(\"Long\", \"Lat\"), crs = 4326)  # EPSG:4326 is WGS84\n\n# Convert to UTM Zone 11N (EPSG:26911)\nspp.map_UTM &lt;- st_transform(spp.map_UTM, crs = 32611)\n\n# Extract UTM coordinates (Easting and Northing)\nspp.map$Easting &lt;- st_coordinates(spp.map_UTM)[, 1]\nspp.map$Northing &lt;- st_coordinates(spp.map_UTM)[, 2]\n\n\n\n\nCode\n# Load necessary libraries\nlibrary(tidyverse)\n\n# Summarize biomass weight by spatial location and species status\nspp.summary &lt;- spp.map %&gt;%\n   filter(!is.na(Biomass) & Biomass &gt; 0)  # Remove NAs\n  \nggplot(spp.summary, aes(x = Easting, y = Northing, weight = Biomass)) +\n  stat_density_2d(aes(fill = after_stat(density)), geom = \"raster\", contour = FALSE) +\n  facet_wrap(~ Status) +  # Separate maps for Native/Invasive\n  scale_fill_viridis_c(\n    name = \"Biomass Density\", \n    option = \"turbo\",\n    breaks = c(1e-09, 7e-09),  # Define specific density values\n    labels = c(\"Low\", \"High\")  # Replace numerical values with \"Low\" and \"High\"\n  ) +  \n  labs(title = \"Density of Biomass (Native vs Invasive Species)\",\n       x = \"Easting\", \n       y = \"Northing\") +\n  theme_minimal() +\n  theme(axis.text = element_blank(),  # Remove tick labels\n    axis.ticks = element_blank())  # Rotate x-axis labels\n\n\n\n\n\n\n\n\n\nI am still currently using only a subset of my quality data, so these results may be slightly skewed from the results of my complete data set.\nI would also like to see the differences in overall biomass for each month. I had a much larger sample size in April and May than I did in June and July, so I standardized my biomass values before plotting them.\n\n\nCode\nmonth.sum &lt;- spp.map %&gt;%\n  filter(!is.na(Biomass) & Biomass &gt; 0) %&gt;%  # Remove NAs\n  mutate(Month = case_when(\n    Julian_Day &gt;= 93 & Julian_Day &lt; 124 ~ \"April\",\n    Julian_Day &gt;= 124 & Julian_Day &lt; 155 ~ \"May\",\n    Julian_Day &gt;= 155 & Julian_Day &lt; 185 ~ \"June\",\n    Julian_Day &gt;= 185 & Julian_Day &lt;= 212 ~ \"July\",\n    TRUE ~ NA_character_\n  )) %&gt;%\n  filter(!is.na(Month)) %&gt;%\n  mutate(Month = factor(Month, levels = c(\"April\", \"May\", \"June\", \"July\")))\n\n# Normalize biomass within each month (to make sample sizes comparable)\nmonth.sum &lt;- month.sum %&gt;%\n  group_by(Month) %&gt;%\n  mutate(Total_Biomass = sum(Biomass),  # Calculate total biomass for each month\n         Normalized_Biomass = Biomass / Total_Biomass) %&gt;%  # Normalize biomass\n  ungroup()  # Remove grouping\n\n\n# Create density plot faceted by Month and Status\nggplot(month.sum, aes(x = Easting, y = Northing, weight = Normalized_Biomass)) +\n  stat_density_2d(aes(fill = after_stat(density)), geom = \"raster\", contour = FALSE) +\n  facet_grid(Month ~ Status) +  # Grid facet by Month (rows) and Status (columns)\n  scale_fill_viridis_c(\n    name = \"Biomass Density\", \n    option = \"turbo\",\n    breaks = c(2e-09, 18e-09),  # Define specific density values\n    labels = c(\"Low\", \"High\")  # Replace numerical values with \"Low\" and \"High\"\n  ) +  \n  labs(title = \"Normalized Density of Biomass (Native vs Invasive Species by Month)\",\n       x = \"Easting\", \n       y = \"Northing\") +\n  theme_minimal() +\n  theme(axis.text = element_blank(),  # Remove tick labels\n        axis.ticks = element_blank())\n\n\n\n\n\n\n\n\n\nSince cheatgrass is the main invasive species we’ve been tracking in the canyon, I’m especially interested in how its biomass changes from month to month. In this part of my dataset, I didn’t record any cheatgrass observations in June, so I’ll need to be cautious about interpreting the rest of the results until I can finish my biomass predictions. That said, the data I do have suggest that cheatgrass biomass peaked in the southern end of the canyon around June and began to decline after that.\n\n\nCode\n# Filter for observations with Species Code \"BRTE\"\ncheat.sum &lt;- spp.map %&gt;%\n  filter(!is.na(Biomass) & Biomass &gt; 0, Code == \"BRTE\") %&gt;%  # Remove NAs and filter for \"BRTE\"\n  mutate(Month = case_when(\n    Julian_Day &gt;= 93 & Julian_Day &lt; 124 ~ \"April\",\n    Julian_Day &gt;= 124 & Julian_Day &lt; 155 ~ \"May\",\n    Julian_Day &gt;= 155 & Julian_Day &lt; 185 ~ \"June\",\n    Julian_Day &gt;= 185 & Julian_Day &lt;= 212 ~ \"July\",\n    TRUE ~ NA_character_\n  )) %&gt;%\n  filter(!is.na(Month)) %&gt;%\n  mutate(Month = factor(Month, levels = c(\"April\", \"May\", \"June\", \"July\")))  # Set correct order\n\n# Normalize biomass within each month (to make sample sizes comparable)\ncheat.sum &lt;- cheat.sum %&gt;%\n  group_by(Month) %&gt;%\n  mutate(Total_Biomass = sum(Biomass),  # Calculate total biomass for each month\n         Normalized_Biomass = Biomass / Total_Biomass) %&gt;%  # Normalize biomass\n  ungroup()  # Remove grouping\n\n# Create density plot faceted by Month and Status for species \"BRTE\"\nggplot(cheat.sum, aes(x = Easting, y = Northing, weight = Normalized_Biomass)) +\n  stat_density_2d(aes(fill = after_stat(density)), geom = \"raster\", contour = FALSE) +\n  facet_grid(Month ~ Code) +  # Grid facet by Month (rows) and Status (columns)\n  scale_fill_viridis_c(\n    name = \"Biomass Density\", \n    option = \"turbo\",\n    breaks = c(2e-09, 14e-09),  # Define specific density values\n    labels = c(\"Low \", \"High \")  # Replace numerical values with \"Low\" and \"High\"\n  ) +  \n  labs(title = \"Normalized Density of Biomass for BRTE by month\",\n       x = \"Easting\", \n       y = \"Northing\") +\n  theme_minimal() +\n  theme(axis.text = element_blank(),  # Remove tick labels\n        axis.ticks = element_blank())\n\n\n\n\n\n\n\n\n\nThe metric of “suitable biomass” is a single value applied to my transect, so I have not figured out how to apply that value to specific species. I could however look at the overall DE and DP for native versus invasive species. (another graph to add to the to-do list)\n\n\n\nLastly, I want to see how the sheep movements change each month with the overall biomass of both native and invasive species. I started out by creating a heat map of our overall sheep location use throughout the canyon.\n\n\nCode\ngps &lt;- read.csv(\"C:/Users/Alexis Means/Documents/Project/Demographics/Code/cleaned.data/sheep_clean_24.csv\")\n\ngps &lt;- gps %&gt;% \n  rename(Easting = x_,\n         Northing = y_)\n\n# Step 1: Kernel Density Estimation (KDE) for GPS data\ngps_kde &lt;- ggplot(gps, aes(x = Easting, y = Northing)) +\n  stat_density_2d(aes(fill = after_stat(density)), geom = \"raster\", contour = FALSE) +\n  scale_fill_viridis_c(option = \"inferno\",\n          name = \"GPS Use Density\",\n          breaks = c(2e-09, 10e-09),  # Define specific density values\n          labels = c(\"Low\", \"High\")  # Replace  values with \"Low\" and \"High\"\n  ) +\n  labs(title = \"Sheep Area Use\")+\n  theme_minimal()+\n  theme(axis.text = element_blank(),  # Remove tick labels\n        axis.ticks = element_blank()) \n  plot(gps_kde)\n\n\n\n\n\n\n\n\n\nIf the areas of high biomass density align with values of high nutrient quality in theory this means that the density of our sheep points should also follow the trends of high biomass density in the months of April and May. I wanted to see if I could overlay our sheep locations each month with the biomass density data each month to observe my hunch that sheep would follow this trend in these months. They do not appear to follow this trend, most likely due to other outside factors such as selection for escape terrain that outweigh the need to follow vegetation trends. It is also likely that areas of high biomass does not always mean areas of high nutritional quality.\n\n\nCode\nmonth.sum &lt;- spp.map %&gt;%\n  filter(!is.na(Biomass) & Biomass &gt; 0) %&gt;%  # Remove NAs\n  mutate(Month = case_when(\n    Julian_Day &gt;= 93 & Julian_Day &lt; 124 ~ \"April\",\n    Julian_Day &gt;= 124 & Julian_Day &lt; 155 ~ \"May\",\n    Julian_Day &gt;= 155 & Julian_Day &lt; 185 ~ \"June\",\n    Julian_Day &gt;= 185 & Julian_Day &lt;= 212 ~ \"July\",\n    TRUE ~ NA_character_\n  )) %&gt;%\n  filter(!is.na(Month)) %&gt;%\n  mutate(Month = factor(Month, levels = c(\"April\", \"May\", \"June\", \"July\")))\n\n\n# Normalize biomass within each month (to make sample sizes comparable)\nmonth.sum &lt;- month.sum %&gt;%\n  group_by(Month) %&gt;%\n  mutate(Total_Biomass = sum(Biomass),  # Calculate total biomass for each month\n         Normalized_Biomass = Biomass / Total_Biomass) %&gt;%  # Normalize biomass\n  ungroup()  # Remove grouping\n\n# Extract month from the GPS timestamp\ngps &lt;- gps %&gt;%\n  mutate(Month = case_when(\n    month(t_) == 4 ~ \"April\",\n    month(t_) == 5 ~ \"May\",\n    month(t_) == 6 ~ \"June\",\n    month(t_) == 7 ~ \"July\",\n    TRUE ~ NA_character_\n  )) %&gt;%\n  filter(!is.na(Month)) %&gt;% \n  mutate(Month = factor(Month, levels = c(\"April\", \"May\", \"June\", \"July\")))\n\nggplot() + # Biomass density heatmap using kernel density estimation\n  stat_density_2d(\n    data = month.sum,\n    aes(x = Easting, y = Northing, weight = Normalized_Biomass, fill = after_stat(density)),\n    geom = \"raster\",\n    contour = FALSE\n  ) +\n  facet_grid(Month ~ Status) +  # Grid facet by Month (rows) and Status (columns)\n  scale_fill_viridis_c(\n    name = \"Biomass Density\", \n    option = \"turbo\",\n    breaks = c(2e-09, 18e-09),  # Define specific density values\n    labels = c(\"Low\", \"High\")  # Replace numerical values with \"Low\" and \"High\"\n  ) +  \n  labs(title = \"Normalized Density of Biomass with GPS Locations (Native vs Invasive Species by Month)\",\n       x = \"Easting\", \n       y = \"Northing\") +\n  theme_minimal() +\n  theme(axis.text = element_blank(),  # Remove tick labels\n        axis.ticks = element_blank()) +\n  # Overlay GPS points, filtering by Month to match the facet\n  geom_point(\n    data = gps, \n    aes(x = Easting, y = Northing), \n    color = \"red\", alpha = 0.1, size = 0.4\n  )\n\n\n\n\n\n\n\n\n\n\n\nCode\n# Define the path to the directory containing the file\nexcelpath &lt;- \"C:/Users/Alexis Means/Documents/Project/Nutrition Sampling/R code/FRESH/processed.data/\"\n\n# Define the specific file name\nfilename &lt;- \"2024.subset.results.xlsx\"\n\n# Construct the full file path\nexcel.file &lt;- file.path(excelpath, filename)\n\n# Load the workbook and read the data\n\nhabitat &lt;- loadWorkbook(excel.file)\nsuitable &lt;- data.frame(readWorkbook(excel.file, sheet = \"Plot-Level-Summary\", startRow = 1, colNames = TRUE))\n\n\nsuitable.map &lt;- suitable %&gt;% \n  rename(PlotID = TransectID) %&gt;% \n  left_join(y = plot,\n            by = \"PlotID\")\n\nsuitable.map &lt;- suitable.map %&gt;% \n  rename(Lat = BeginLat,\n         Long = BeginLong,\n         Easting = BeginUTM_Easting,\n         Northing = BeginUTM_Northing) %&gt;% \n  select(PlotID, TotalDE, TotalDP, SuitableBiomass, AveDE, AveDP, Julian_Day, Lat, Long, Easting, Northing)\nView(suitable.map)\n\n# Create an sf object with the Lat and Long columns\nsuitable.map_UTM &lt;- st_as_sf(suitable.map, coords = c(\"Long\", \"Lat\"), crs = 4326)  # EPSG:4326 is WGS84\n\n# Convert to UTM Zone 11N (EPSG:26911)\nsuitable.map_UTM &lt;- st_transform(suitable.map_UTM, crs = 32611)\n\n# Extract UTM coordinates (Easting and Northing)\nsuitable.map$Easting &lt;- st_coordinates(suitable.map_UTM)[, 1]\nsuitable.map$Northing &lt;- st_coordinates(suitable.map_UTM)[, 2]\n\n\n\n\n\nAfter completing the FRESH model using a subset of my data, I was able to get estimates of suitable biomass available at each transect that I sampled. I replicated similar graphs to my biomass density for native vs invasive species and the results are fairly similar. Like the biomass plots, there is a higher density in the south end of our study area when looking at the suitable biomass overall for the study area.\n\n\nCode\nsuitable.summary &lt;- suitable.map %&gt;%\n   filter(!is.na(SuitableBiomass) & SuitableBiomass &gt; 0)  # Remove NAs\n  \nggplot(suitable.summary, aes(x = Easting, y = Northing, weight = SuitableBiomass)) +\n  stat_density_2d(aes(fill = after_stat(density)), geom = \"raster\", contour = FALSE) +\n  scale_fill_viridis_c(\n    name = \"Suitable Biomass Density\", \n    option = \"turbo\",\n    breaks = c(0.5e-09, 3.5e-09),  # Define specific density values\n    labels = c(\"Low\", \"High\")  # Replace numerical values with \"Low\" and \"High\"\n  ) +  \n  labs(title = \"Density of Suitable Biomass\",\n       x = \"Easting\", \n       y = \"Northing\") +\n  theme_minimal() +\n  theme(axis.text = element_blank(),  # Remove tick labels\n    axis.ticks = element_blank())  # Rotate x-axis labels\n\n\n\n\n\n\n\n\n\n\n\nCode\n#|warning: false\n#| message: false\nsuitablemonth.sum &lt;- suitable.map %&gt;%\n  filter(!is.na(SuitableBiomass) & SuitableBiomass &gt; 0) %&gt;%\n    mutate(Month = case_when(\n      Julian_Day &gt;= 93 & Julian_Day &lt; 124 ~ \"April\",\n      Julian_Day &gt;= 124 & Julian_Day &lt; 155 ~ \"May\",\n      Julian_Day &gt;= 155 & Julian_Day &lt; 185 ~ \"June\",\n      Julian_Day &gt;= 185 & Julian_Day &lt;= 212 ~ \"July\",\n      TRUE ~ NA_character_\n    )) %&gt;%\n  filter(!is.na(Month)) %&gt;%\n  mutate(Month = factor(Month, levels = c(\"April\", \"May\", \"June\", \"July\")))\n\n# Normalize biomass within each month (to make sample sizes comparable)\nsuitablemonth.sum &lt;- suitablemonth.sum %&gt;%\n  group_by(Month) %&gt;%\n  mutate(Total_SuitableBiomass = sum(SuitableBiomass),  # Calculate total biomass for each month\n         Normalized_SuitableBiomass = SuitableBiomass / Total_SuitableBiomass) %&gt;%  # Normalize biomass\n  ungroup()  # Remove grouping\n\n\n# Create density plot faceted by Month and Status\nggplot(suitablemonth.sum, aes(x = Easting, y = Northing, weight = Normalized_SuitableBiomass)) +\n  stat_density_2d(aes(fill = after_stat(density)), geom = \"raster\", contour = FALSE) +\n  facet_grid(\"Month\") +  # Grid facet by Month (rows) and Status (columns)\n  scale_fill_viridis_c(\n    name = \"Suitable Biomass Density\", \n    option = \"turbo\",\n    breaks = c(1e-09, 9e-09),  # Define specific density values\n    labels = c(\"Low \", \"High \")  # Replace numerical values with \"Low\" and \"High\"\n  ) +  \n  labs(title = \"Normalized Density of Suitable Biomass\",\n       x = \"Easting\", \n       y = \"Northing\") +\n  theme_minimal() +\n  theme(axis.text = element_blank(),  # Remove tick labels\n        axis.ticks = element_blank())\n\n\nWarning: The following aesthetics were dropped during statistical transformation:\nweight.\nℹ This can happen when ggplot fails to infer the correct grouping structure in\n  the data.\nℹ Did you forget to specify a `group` aesthetic or to convert a numerical\n  variable into a factor?\nThe following aesthetics were dropped during statistical transformation:\nweight.\nℹ This can happen when ggplot fails to infer the correct grouping structure in\n  the data.\nℹ Did you forget to specify a `group` aesthetic or to convert a numerical\n  variable into a factor?\nThe following aesthetics were dropped during statistical transformation:\nweight.\nℹ This can happen when ggplot fails to infer the correct grouping structure in\n  the data.\nℹ Did you forget to specify a `group` aesthetic or to convert a numerical\n  variable into a factor?\nThe following aesthetics were dropped during statistical transformation:\nweight.\nℹ This can happen when ggplot fails to infer the correct grouping structure in\n  the data.\nℹ Did you forget to specify a `group` aesthetic or to convert a numerical\n  variable into a factor?\n\n\n\n\n\n\n\n\n\nWhen looking at the density of suitable biomass month by month, May still has the highest density of suitable biomass. While this is most likely the month with the largest amount of species in their nutrient dense phase, it is also the month that we sampled the most. So I feel like the sampling efforts may be slightly skewing my data.\nIn order to truly see these values accurately represented across my study area, I will need to start creating my predictive GAM. This will allow me to project these values of suitable biomass to other 30x30m pixels with similar covariates and predict how vegetative quality changes throughout the canyon in different times of the year."
  },
  {
    "objectID": "posts/Midterm.html#understanding-bighorn-sheep-nutrition-and-movement-in-the-john-day-canyon",
    "href": "posts/Midterm.html#understanding-bighorn-sheep-nutrition-and-movement-in-the-john-day-canyon",
    "title": "BCB 520 - Final Project",
    "section": "",
    "text": "Located within the Columbia Plateau, the John Day Canyon is a steep, rugged landscape where sagebrush and grasses dominate the hillsides. This dynamic environment supports a unique population of bighorn sheep — one that, remarkably, has avoided the disease outbreaks that often devastate other herds.\nMy research focuses on understanding the nutritional requirements of these bighorn sheep and how those needs shift throughout their reproductive cycle due to changing metabolic demands. The ultimate goal is to develop a predictive model that links their nutritional requirements to movement patterns. By doing so, we can identify potential threats, such as areas where bighorn sheep may come into contact with domestic livestock, and pinpoint critical habitats essential for their survival.\nTo achieve this, I am collecting vegetation data to calculate a measure of “suitable biomass”—essentially, the portion of available forage that meaningfully contributes to the sheep’s energy needs at different reproductive stages. This metric is created using measures of digestible energy and digestible protein. I have currently not finalized my values of “suitable biomass”, but I do have preliminary values of digestible energy and digestible protein from a subset of my data. Eventually using this metric, I will develop a Generalized Additive Model (GAM) to map areas of high and low nutritional quality across the landscape.\nThese techniques will help determine which resources most influence bighorn sheep movement and allow us to predict future movement patterns—a critical step in ensuring their continued success in this landscape. By bridging nutritional ecology with movement ecology, this research will contribute valuable insights into how bighorn sheep navigate their environment and help inform conservation strategies for this unique, disease-free population.\n\n\n\n\nCode\nlibrary(lpSolve)\nlibrary(openxlsx)\nlibrary(tools)\nlibrary(dplyr)\nlibrary(sf)\nlibrary(tidyverse)\n\n# Define the path to the directory containing the file\nexcelpath &lt;- \"C:/Users/Alexis Means/Documents/Project/Nutrition Sampling/R code/FRESH/processed.data/\"\n\n# Define the specific file name\nfilename &lt;- \"FRESH.Subset.xlsx\"\n\n# Construct the full file path\nexcel.file &lt;- file.path(excelpath, filename)\n\n# Load the workbook and read the data\nlibrary(openxlsx)\nhabitat &lt;- loadWorkbook(excel.file)\ndata &lt;- data.frame(readWorkbook(excel.file, sheet = \"FRESH Data\", startRow = 1, colNames = TRUE))\n\n\nplant &lt;-read.csv(\"C:/Users/Alexis Means/Documents/Project/Nutrition Sampling/R code/Cleaning/processed.data/plant.csv\")\n\ndata &lt;- data %&gt;% \n  rename(Code = Plant.Code) %&gt;% \n  left_join(y = plant, \n            by = \"Code\",\n            relationship = \"many-to-one\")\n\n\n\n\n\nFor further description as to what each of my variables are within my data set. Please see my data dictionary here.\n\n\nCode\ntable&lt;- read.csv(\"C:/Users/Alexis Means/Documents/School/BCB520/2A/attributes.csv\") \nknitr::kable(table)\n\n\n\n\n\n\n\n\n\n\nAttribute\nType\nNote\n\n\n\n\nBiomass\nQuantitative\nThis measurement tells us what the weight of dry biomass is for each specific observation\n\n\nTransectID\nCategorical\nThis descriptor is a unique ID that tells us which randomized point we sampled\n\n\nQuadrat\nCategorical\nThere are 5 quadrats that we sample for each quadrat (20,40,60,80,100)\n\n\nCode\nCategorical\nThese are unique codes that describe the family, genius and species for every item observed\n\n\nPhenology\nCategorical\nEach species is assigned a growth stage when we observe it - New, Budding, Flowering, Fruiting, Mature or Cured (N, B, FL, FR, M, C)\n\n\nPVT\nCategorical\nThis number describes the vegetation community that was being sampled, we have 5 total for the study area, it is used as part of the descriptor for each plotID\n\n\npercent\nQuantitative\nThis measurement tells us the percent cover that each composition_id occupies within a 1x1m quadrat\n\n\nSpp\nCategorical\nThis unique ID is slightly more broad and will be used to identify species/phenology combinations within each vegetation type as well as the season\n\n\nFamily\nCategorical\nThis will be used to group quality data if we do not have enough information to determine the quality down to the smaller scale (genus)\n\n\nGenus\nCategorical\nThis will be used to group quality data if we do not have enough information to determine the quality down to the smaller scale (spp)\n\n\nSpecies\nCategorical\nThis will be used to group quality data if we do not have enough information to determine the quality down to the smaller scale (phenological stage)\n\n\nFunctionalGroup\nCategorical\nThe smallest grouping variable for my quality data (perennial or annual grass, forb, or shrub)\n\n\nFGNew\nCategorical\nShortened version of FunctionalGroup\n\n\nCommonName\nCategorical\nThis is another identifier for each species, it will likely not be used within the analysis so it could be removed\n\n\nDuration\nCategorical\nThis is another category I may use to group quality data based on the growth duration of each species\n\n\nStatus\nCategorical\nEach species is categorized as native or invasive\n\n\nSeason\nCategorical\nOur observations are grouped based on the date that they were sampled (Spring, Summer and Fall) to observe the changes in nutritional quality\n\n\nDates\nCategorical\nThis keeps track of the day that each observation was sampled\n\n\nAspect\nCategorical\nDescribed the direction the hill was facing that each of our transects had been sampled on\n\n\nElev\nQuantitative\nDescribes the elevation that each of the transects was sampled at\n\n\nLat/Long\nCategorical\nEach of the lat/long pairs plots the beginning, middle and end of each of the transects\n\n\nDE\nQuantitative\nAmount of digestible energy provided by each species\n\n\nDP\nQuantitative\nAmount of digestible protien provided by each species\n\n\nDE.SD\nQuantitative\nStandard deviation of digestible energy\n\n\nDP.SD\nQuantitative\nStandard deviation of digestible protien\n\n\nJulian Date\nCategorical\nThe converted date that each of the plots was sampled to julian day\n\n\nEasting\nCategorical\nThe converted latitude to UTM\n\n\nNorthing\nCategorical\nThe converted longitude to UTM\n\n\nTotalDE\nQuantitative\nThe amount of total DE available at a transect\n\n\nTotalDP\nQuantitative\nThe amount of total DP available at a transect\n\n\nSuitableBiomass\nQuantitative\nThe amount of forage available at each transect that meet the assigned energetic demands of a lactating female sheep\n\n\nAveDE\nQuantitative\nThe average amount of digestible energy available at a transect\n\n\nAveDP\nQuantitative\nThe average amount of digestible protien available at a transect\n\n\nMonth\nCategorical\nThe month that the plot was sampled"
  },
  {
    "objectID": "posts/Midterm.html#quality-trends",
    "href": "posts/Midterm.html#quality-trends",
    "title": "Midterm",
    "section": "",
    "text": "With some of my quality data, I wanted to start by comparing the measurements of digestible energy (DE) and digestible protien (DP) between plant species and phenological stages that I observed while I was sampling. Mainly I want to observe if there is any correlation between high DE and high DP. After looking at the results of my scatter plots, the trend follows the patterns that I would expect. There is an increase in DE and DP through the newly emergent (N) and budding stages (B), followed by an immedaite decrease in the flowering (FL) stage.\n\n\nCode\nlibrary(tidyverse)\n\ndata$Phenology &lt;- factor(data$Phenology, levels = c(\"N\", \"B\", \"FL\", \"FR\", \"M\", \"C\"))\n\nggplot(data, aes(x = DP, y = DE)) +\n  geom_point(color = \"blue\", alpha = 0.6) +\n  geom_smooth(method = \"lm\", se = TRUE, color = \"red\") +  # Linear trend line\n  labs(title = \"Relationship Between DE and DP by Phenology\",\n       x = \"Digestible Protein (DP)\",\n       y = \"Digestible Energy (DE)\") +\n  theme_minimal() +\n  \n  # Set phenology as a factor with a specific order\n  facet_wrap(~ Phenology, scales = \"free\") +\n  scale_x_continuous(expand = c(0.05, 0)) +  # Adjust spacing\n  scale_y_continuous(expand = c(0.05, 0)) +\n  theme(strip.text = element_text(face = \"bold\"))  # Bold facet labels\n\n\n\n\n\n\n\n\n\nTo better visualize the trends in DP and DE between different phenological stages. I isolated the DE and DP and values to compare each state. Both the DE and DP values follow the trend that I expect them to, however, very few of my species meet the necessary DP value of 7.5.\n\n\nCode\n# Ensure Phenology is a factor with the correct order\ndata$Phenology &lt;- factor(data$Phenology, levels = c(\"N\", \"B\", \"FL\", \"FR\", \"M\", \"C\"))\n\nggplot(data, aes(x = Phenology, y = DE, fill = Phenology)) +\n  geom_boxplot(alpha = 0.7, outlier.shape = NA) +  \n  geom_jitter(width = 0.2, alpha = 0.4, color = \"black\") +   \n  scale_fill_viridis_d(option = \"plasma\") +  \n  labs(title = \"Distribution of Digestible Energy (DE) by Phenology\",\n       x = \"Phenology\",\n       y = \"DE(kJ g^-1)\") +\n  theme_minimal() +\n  theme(legend.position = \"none\")+\n   geom_hline(yintercept = 11.5, linetype = \"dashed\", color = \"red\", size = 1)+\n  annotate(\"text\", x = 6.4, y = 11.8, label = \"11.5\", color = \"black\", size = 4, fontface = \"italic\")\n\n\n\n\n\n\n\n\n\n\n\nCode\nggplot(data, aes(x = Phenology, y = DP, fill = Phenology)) +\n  geom_boxplot(alpha = 0.7, outlier.shape = NA) +  # Boxplot without outlier points\n  geom_jitter(width = 0.2, alpha = 0.4, color = \"black\") +  # Add jitter for visibility\n  scale_fill_viridis_d(option = \"plasma\") +  # Use a color palette\n  labs(title = \"Distribution of Digestible Protien (DP) by Phenology\",\n       x = \"Phenology\",\n       y = \"DP (g protien/100g forage)\") +\n  theme_minimal() +\n  theme(legend.position = \"none\")+\n   geom_hline(yintercept = 7.5, linetype = \"dashed\", color = \"red\", size = 1)+\n  annotate(\"text\", x = 6.5, y = 7.7, label = \"7.5\", color = \"black\", size = 4, fontface = \"italic\")\n\n\n\n\n\n\n\n\n\n\n\nCode\ndata &lt;- data %&gt;%\n  mutate(PVT = str_sub(TransectID, start = 4, end = 6))\n\nggplot(data, aes(x = PVT, y = DE, fill = Phenology)) +\n  geom_boxplot(alpha = 0.7, outlier.shape = NA) +  \n  geom_jitter(width = 0.2, alpha = 0.4, color = \"black\") +   \n  scale_fill_viridis_d(option = \"plasma\") +  \n  labs(title = \"Distribution of Digestible Energy (DE) by Phenology and PVT\",\n       x = \"Phenology\",\n       y = \"DE(kJ g^-1)\") +\n  theme_minimal() +\n  theme(legend.position = \"none\",\n        axis.text.x = element_text(angle = 45, hjust = 1)) +  # Rotate x-axis labels\n  geom_hline(yintercept = 11.5, linetype = \"dashed\", color = \"red\", size = 1) +\n  annotate(\"text\", x = Inf, y = 11.8, label = \"11.5\", color = \"black\", size = 4,\n           hjust = 1.1, vjust = -0.5) +\n  facet_wrap(~ Phenology, scales = \"free_x\", ncol = 3)  # Adjust ncol as needed\n\n\n\n\n\n\n\n\n\n\n\nCode\n# Filter the data for Phenology \"N\"\ndata_N &lt;- data %&gt;% filter(Phenology == \"N\")\n\nggplot(data_N, aes(x = PVT, y = DE, fill = PVT)) +\n  geom_boxplot(alpha = 0.7, outlier.shape = NA) +  \n  geom_jitter(width = 0.2, alpha = 0.4, color = \"black\") +   \n  scale_fill_viridis_d(option = \"plasma\") +  \n  labs(title = \"Distribution of Digestible Energy (DE) for Phenology 'N' by PVT\",\n       x = \"Plant Vegetation Type (PVT)\",\n       y = \"DE (kJ g^-1)\") +\n  theme_minimal() +\n  theme(legend.position = \"none\",\n        axis.text.x = element_text(angle = 45, hjust = 1)) +\n  geom_hline(yintercept = 11.5, linetype = \"dashed\", color = \"red\", size = 1) +\n  annotate(\"text\", x = Inf, y = 11.8, label = \"11.5\", color = \"black\", size = 4,\n           hjust = 1.1, vjust = -0.5)\n\n\n\n\n\n\n\n\n\nCode\n# Filter the data for Phenology \"B\"\ndata_B &lt;- data %&gt;% filter(Phenology == \"B\")\n\nggplot(data_B, aes(x = PVT, y = DE, fill = PVT)) +\n  geom_boxplot(alpha = 0.7, outlier.shape = NA) +  \n  geom_jitter(width = 0.2, alpha = 0.4, color = \"black\") +   \n  scale_fill_viridis_d(option = \"plasma\") +  \n  labs(title = \"Distribution of Digestible Energy (DE) for Phenology 'B' by PVT\",\n       x = \"Plant Vegetation Type (PVT)\",\n       y = \"DE (kJ g^-1)\") +\n  theme_minimal() +\n  theme(legend.position = \"none\",\n        axis.text.x = element_text(angle = 45, hjust = 1)) +\n  geom_hline(yintercept = 11.5, linetype = \"dashed\", color = \"red\", size = 1) +\n  annotate(\"text\", x = Inf, y = 11.8, label = \"11.5\", color = \"black\", size = 4,\n           hjust = 1.1, vjust = -0.5)\n\n\n\n\n\n\n\n\n\nCode\n# Filter the data for Phenology \"B\"\ndata_FL &lt;- data %&gt;% filter(Phenology == \"FL\")\n\nggplot(data_FL, aes(x = PVT, y = DE, fill = PVT)) +\n  geom_boxplot(alpha = 0.7, outlier.shape = NA) +  \n  geom_jitter(width = 0.2, alpha = 0.4, color = \"black\") +   \n  scale_fill_viridis_d(option = \"plasma\") +  \n  labs(title = \"Distribution of Digestible Energy (DE) for Phenology 'FL' by PVT\",\n       x = \"Plant Vegetation Type (PVT)\",\n       y = \"DE (kJ g^-1)\") +\n  theme_minimal() +\n  theme(legend.position = \"none\",\n        axis.text.x = element_text(angle = 45, hjust = 1)) +\n  geom_hline(yintercept = 11.5, linetype = \"dashed\", color = \"red\", size = 1) +\n  annotate(\"text\", x = Inf, y = 11.8, label = \"11.5\", color = \"black\", size = 4,\n           hjust = 1.1, vjust = -0.5)\n\n\n\n\n\n\n\n\n\nCode\n# Filter the data for Phenology \"FR\"\ndata_FR &lt;- data %&gt;% filter(Phenology == \"FR\")\n\nggplot(data_FR, aes(x = PVT, y = DE, fill = PVT)) +\n  geom_boxplot(alpha = 0.7, outlier.shape = NA) +  \n  geom_jitter(width = 0.2, alpha = 0.4, color = \"black\") +   \n  scale_fill_viridis_d(option = \"plasma\") +  \n  labs(title = \"Distribution of Digestible Energy (DE) for Phenology 'FR' by PVT\",\n       x = \"Plant Vegetation Type (PVT)\",\n       y = \"DE (kJ g^-1)\") +\n  theme_minimal() +\n  theme(legend.position = \"none\",\n        axis.text.x = element_text(angle = 45, hjust = 1)) +\n  geom_hline(yintercept = 11.5, linetype = \"dashed\", color = \"red\", size = 1) +\n  annotate(\"text\", x = Inf, y = 11.8, label = \"11.5\", color = \"black\", size = 4,\n           hjust = 1.1, vjust = -0.5)\n\n\n\n\n\n\n\n\n\nCode\n# Filter the data for Phenology \"M\"\ndata_M &lt;- data %&gt;% filter(Phenology == \"M\")\n\nggplot(data_M, aes(x = PVT, y = DE, fill = PVT)) +\n  geom_boxplot(alpha = 0.7, outlier.shape = NA) +  \n  geom_jitter(width = 0.2, alpha = 0.4, color = \"black\") +   \n  scale_fill_viridis_d(option = \"plasma\") +  \n  labs(title = \"Distribution of Digestible Energy (DE) for Phenology 'M' by PVT\",\n       x = \"Plant Vegetation Type (PVT)\",\n       y = \"DE (kJ g^-1)\") +\n  theme_minimal() +\n  theme(legend.position = \"none\",\n        axis.text.x = element_text(angle = 45, hjust = 1)) +\n  geom_hline(yintercept = 11.5, linetype = \"dashed\", color = \"red\", size = 1) +\n  annotate(\"text\", x = Inf, y = 11.8, label = \"11.5\", color = \"black\", size = 4,\n           hjust = 1.1, vjust = -0.5)\n\n\n\n\n\n\n\n\n\nCode\n# Filter the data for Phenology \"C\"\ndata_C &lt;- data %&gt;% filter(Phenology == \"C\")\n\nggplot(data_C, aes(x = PVT, y = DE, fill = PVT)) +\n  geom_boxplot(alpha = 0.7, outlier.shape = NA) +  \n  geom_jitter(width = 0.2, alpha = 0.4, color = \"black\") +   \n  scale_fill_viridis_d(option = \"plasma\") +  \n  labs(title = \"Distribution of Digestible Energy (DE) for Phenology 'C' by PVT\",\n       x = \"Plant Vegetation Type (PVT)\",\n       y = \"DE (kJ g^-1)\") +\n  theme_minimal() +\n  theme(legend.position = \"none\",\n        axis.text.x = element_text(angle = 45, hjust = 1)) +\n  geom_hline(yintercept = 11.5, linetype = \"dashed\", color = \"red\", size = 1) +\n  annotate(\"text\", x = Inf, y = 11.8, label = \"11.5\", color = \"black\", size = 4,\n           hjust = 1.1, vjust = -0.5)\n\n\n\n\n\n\n\n\n\n\n\nCode\n# Filter the data for Phenology \"N\"\ndata_N &lt;- data %&gt;% filter(Phenology == \"N\")\n\nggplot(data_N, aes(x = PVT, y = DP, fill = PVT)) +\n  geom_boxplot(alpha = 0.7, outlier.shape = NA) +  \n  geom_jitter(width = 0.2, alpha = 0.4, color = \"black\") +   \n  scale_fill_viridis_d(option = \"plasma\") +  \n  labs(title = \"Distribution of Digestible Protein (DP) for Phenology 'N' by PVT\",\n       x = \"Plant Vegetation Type (PVT)\",\n       y = \"DP (kJ g^-1)\") +\n  theme_minimal() +\n  theme(legend.position = \"none\",\n        axis.text.x = element_text(angle = 45, hjust = 1)) +\n  geom_hline(yintercept = 7.5, linetype = \"dashed\", color = \"red\", size = 1) +\n  annotate(\"text\", x = Inf, y = 7.8, label = \"7.5\", color = \"black\", size = 4,\n           hjust = 1.1, vjust = -0.5)\n\n\n\n\n\n\n\n\n\nCode\n# Filter the data for Phenology \"B\"\ndata_B &lt;- data %&gt;% filter(Phenology == \"B\")\n\nggplot(data_B, aes(x = PVT, y = DP, fill = PVT)) +\n  geom_boxplot(alpha = 0.7, outlier.shape = NA) +  \n  geom_jitter(width = 0.2, alpha = 0.4, color = \"black\") +   \n  scale_fill_viridis_d(option = \"plasma\") +  \n  labs(title = \"Distribution of Digestible Protein (DP) for Phenology 'B' by PVT\",\n       x = \"Plant Vegetation Type (PVT)\",\n       y = \"DP (kJ g^-1)\") +\n  theme_minimal() +\n  theme(legend.position = \"none\",\n        axis.text.x = element_text(angle = 45, hjust = 1)) +\n  geom_hline(yintercept = 7.5, linetype = \"dashed\", color = \"red\", size = 1) +\n  annotate(\"text\", x = Inf, y = 7.8, label = \"7.5\", color = \"black\", size = 4,\n           hjust = 1.1, vjust = -0.5)\n\n\n\n\n\n\n\n\n\nCode\n# Filter the data for Phenology \"B\"\ndata_FL &lt;- data %&gt;% filter(Phenology == \"FL\")\n\nggplot(data_FL, aes(x = PVT, y = DP, fill = PVT)) +\n  geom_boxplot(alpha = 0.7, outlier.shape = NA) +  \n  geom_jitter(width = 0.2, alpha = 0.4, color = \"black\") +   \n  scale_fill_viridis_d(option = \"plasma\") +  \n  labs(title = \"Distribution of Digestible Protein (DP) for Phenology 'FL' by PVT\",\n       x = \"Plant Vegetation Type (PVT)\",\n       y = \"DP (kJ g^-1)\") +\n  theme_minimal() +\n  theme(legend.position = \"none\",\n        axis.text.x = element_text(angle = 45, hjust = 1)) +\n  geom_hline(yintercept = 7.5, linetype = \"dashed\", color = \"red\", size = 1) +\n  annotate(\"text\", x = Inf, y = 7.8, label = \"7.5\", color = \"black\", size = 4,\n           hjust = 1.1, vjust = -0.5)\n\n\n\n\n\n\n\n\n\nCode\n# Filter the data for Phenology \"FR\"\ndata_FR &lt;- data %&gt;% filter(Phenology == \"FR\")\n\nggplot(data_FR, aes(x = PVT, y = DP, fill = PVT)) +\n  geom_boxplot(alpha = 0.7, outlier.shape = NA) +  \n  geom_jitter(width = 0.2, alpha = 0.4, color = \"black\") +   \n  scale_fill_viridis_d(option = \"plasma\") +  \n  labs(title = \"Distribution of Digestible Protein (DP) for Phenology 'FR' by PVT\",\n       x = \"Plant Vegetation Type (PVT)\",\n       y = \"DP (kJ g^-1)\") +\n  theme_minimal() +\n  theme(legend.position = \"none\",\n        axis.text.x = element_text(angle = 45, hjust = 1)) +\n  geom_hline(yintercept = 7.5, linetype = \"dashed\", color = \"red\", size = 1) +\n  annotate(\"text\", x = Inf, y = 7.8, label = \"7.5\", color = \"black\", size = 4,\n           hjust = 1.1, vjust = -0.5)\n\n\n\n\n\n\n\n\n\nCode\n# Filter the data for Phenology \"M\"\ndata_M &lt;- data %&gt;% filter(Phenology == \"M\")\n\nggplot(data_M, aes(x = PVT, y = DP, fill = PVT)) +\n  geom_boxplot(alpha = 0.7, outlier.shape = NA) +  \n  geom_jitter(width = 0.2, alpha = 0.4, color = \"black\") +   \n  scale_fill_viridis_d(option = \"plasma\") +  \n  labs(title = \"Distribution of Digestible Protein (DP)) for Phenology 'M' by PVT\",\n       x = \"Plant Vegetation Type (PVT)\",\n       y = \"DP (kJ g^-1)\") +\n  theme_minimal() +\n  theme(legend.position = \"none\",\n        axis.text.x = element_text(angle = 45, hjust = 1)) +\n  geom_hline(yintercept = 7.5, linetype = \"dashed\", color = \"red\", size = 1) +\n  annotate(\"text\", x = Inf, y = 7.8, label = \"7.5\", color = \"black\", size = 4,\n           hjust = 1.1, vjust = -0.5)\n\n\n\n\n\n\n\n\n\nCode\n# Filter the data for Phenology \"C\"\ndata_C &lt;- data %&gt;% filter(Phenology == \"C\")\n\nggplot(data_C, aes(x = PVT, y = DP, fill = PVT)) +\n  geom_boxplot(alpha = 0.7, outlier.shape = NA) +  \n  geom_jitter(width = 0.2, alpha = 0.4, color = \"black\") +   \n  scale_fill_viridis_d(option = \"plasma\") +  \n  labs(title = \"Distribution of Digestible Protien (DP) for Phenology 'C' by PVT\",\n       x = \"Plant Vegetation Type (PVT)\",\n       y = \"DP (kJ g^-1)\") +\n  theme_minimal() +\n  theme(legend.position = \"none\",\n        axis.text.x = element_text(angle = 45, hjust = 1)) +\n  geom_hline(yintercept = 7.5, linetype = \"dashed\", color = \"red\", size = 1) +\n  annotate(\"text\", x = Inf, y = 7.8, label = \"7.5\", color = \"black\", size = 4,\n           hjust = 1.1, vjust = -0.5)\n\n\n\n\n\n\n\n\n\n\n\nCode\nplot &lt;- read.csv(\"C:/Users/Alexis Means/Documents/Project/Nutrition Sampling/R code/Cleaning/processed.data/transect.csv\")\n\n# Define the path to the directory containing the file\nexcelpath &lt;- \"C:/Users/Alexis Means/Documents/Project/Nutrition Sampling/R code/FRESH/processed.data/\"\n\n# Define the specific file name\nfilename &lt;- \"2024.subset.results.xlsx\"\n\n# Construct the full file path\nexcel.file &lt;- file.path(excelpath, filename)\n\n# Load the workbook and read the data\n\nhabitat &lt;- loadWorkbook(excel.file)\nsuitable &lt;- data.frame(readWorkbook(excel.file, sheet = \"Plot-Level-Summary\", startRow = 1, colNames = TRUE))\n\n\nsuitable &lt;- suitable %&gt;% \n  rename(PlotID = TransectID) %&gt;% \n  left_join(y = plot,\n            by = \"PlotID\")\n\nsuitable &lt;- suitable %&gt;% \n  rename(Lat = BeginLat,\n         Long = BeginLong,\n         Easting = BeginUTM_Easting,\n         Northing = BeginUTM_Northing) %&gt;% \n  select(PlotID, TotalDE, TotalDP, SuitableBiomass, AveDE, AveDP, Julian_Day, Lat, Long, Easting, Northing)\n\n\n# Create an sf object with the Lat and Long columns\nsuitable_UTM &lt;- st_as_sf(suitable, coords = c(\"Long\", \"Lat\"), crs = 4326)  # EPSG:4326 is WGS84\n\n# Convert to UTM Zone 11N (EPSG:26911)\nsuitable_UTM &lt;- st_transform(suitable_UTM, crs = 32611)\n\n# Extract UTM coordinates (Easting and Northing)\nsuitable$Easting &lt;- st_coordinates(suitable_UTM)[, 1]\nsuitable$Northing &lt;- st_coordinates(suitable_UTM)[, 2]\n\n\n\n\nCode\nsuitable &lt;- suitable %&gt;%\n  mutate(PVT = str_sub(PlotID, start = 4, end = 6))\n\n# Step 1: Standardize the \"Suitable Biomass\" values\nsuitable_standardized &lt;- suitable %&gt;%\n  group_by(PVT) %&gt;%\n  mutate(Standardized_Biomass = scale(SuitableBiomass)) %&gt;%\n  ungroup()\n\n# Step 2: Create the plot\nggplot(suitable_standardized, aes(x = PVT, y = Standardized_Biomass, fill = PVT)) +\n  geom_boxplot(alpha = 0.7, outlier.shape = NA) +\n  geom_jitter(width = 0.2, alpha = 0.4, color = \"black\") +\n  scale_fill_viridis_d(option = \"plasma\") +\n  labs(title = \"Comparison of Standardized Suitable Biomass Across PVTs\",\n       x = \"Plant Vegetation Type (PVT)\",\n       y = \"Standardized Suitable Biomass\") +\n  theme_minimal() +\n  theme(legend.position = \"none\",\n        axis.text.x = element_text(angle = 45, hjust = 1)) \n\n\n\n\n\n\n\n\n\n\n\nCode\nggplot(suitable, aes(x = Julian_Day, y = SuitableBiomass)) +\n  geom_point(aes(color = PVT), alpha = 0.6) +\n  geom_smooth(method = \"loess\", se = TRUE, color = \"black\") +\n  scale_color_viridis_d() +\n  labs(title = \"Suitable Biomass Over Time\",\n       x = \"Julian Day\",\n       y = \"Suitable Biomass\",\n       color = \"PVT\") +\n  theme_minimal() +\n  theme(legend.position = \"right\",\n        axis.text.x = element_text(angle = 0, hjust = 0.5)) +\n  scale_x_continuous(breaks = seq(min(suitable$Julian_Day, na.rm = TRUE), \n                                  max(suitable$Julian_Day, na.rm = TRUE), \n                                  by = 30))\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\n\nCode\nggplot(suitable, aes(x = Julian_Day, y = AveDE)) +\n  geom_point(aes(color = PVT), alpha = 0.6) +\n  geom_smooth(method = \"loess\", se = TRUE, color = \"black\") +\n  scale_color_viridis_d() +\n  labs(title = \"Average DE Over Time\",\n       x = \"Julian Day\",\n       y = \"DE\",\n       color = \"PVT\") +\n  theme_minimal() +\n  theme(legend.position = \"right\",\n        axis.text.x = element_text(angle = 0, hjust = 0.5)) +\n  scale_x_continuous(breaks = seq(min(suitable$Julian_Day, na.rm = TRUE), \n                                  max(suitable$Julian_Day, na.rm = TRUE), \n                                  by = 30))\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning: Removed 17 rows containing non-finite outside the scale range\n(`stat_smooth()`).\n\n\nWarning: Removed 17 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\n\n\nCode\nggplot(suitable, aes(x = Julian_Day, y = AveDP)) +\n  geom_point(aes(color = PVT), alpha = 0.6) +\n  geom_smooth(method = \"loess\", se = TRUE, color = \"black\") +\n  scale_color_viridis_d() +\n  labs(title = \"Average DP Over Time\",\n       x = \"Julian Day\",\n       y = \"DP\",\n       color = \"PVT\") +\n  theme_minimal() +\n  theme(legend.position = \"right\",\n        axis.text.x = element_text(angle = 0, hjust = 0.5)) +\n  scale_x_continuous(breaks = seq(min(suitable$Julian_Day, na.rm = TRUE), \n                                  max(suitable$Julian_Day, na.rm = TRUE), \n                                  by = 30))\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning: Removed 17 rows containing non-finite outside the scale range\n(`stat_smooth()`).\n\n\nWarning: Removed 17 rows containing missing values or values outside the scale range\n(`geom_point()`)."
  },
  {
    "objectID": "posts/Midterm.html#biomass-trends",
    "href": "posts/Midterm.html#biomass-trends",
    "title": "BCB 520 - Final Project",
    "section": "",
    "text": "One of the key parts of my project is understanding the spread of invasive species throughout the canyon, specifically cheat grass. When observing the canyon it seems like cheat grass dominates the landscape which could effect the amount of nutrients available later in the summer after much of it has progressed through its flowering stage. To start I wanted to looks at the density of biomass for all native versus invasive species within the transects that I sampled in our study area. From this graph we can see that overall biomass of native and invasive species is relatively similar throughout the canyon. However, there is an overall greater density of native species.\n\n\nCode\nspp.map &lt;- data %&gt;% \n  select(TransectID, Code, Phenology, Part, Biomass, Duration, Status)\n\nplot &lt;- read.csv(\"C:/Users/Alexis Means/Documents/Project/Nutrition Sampling/R code/Cleaning/processed.data/transect.csv\")\n\nspp.map &lt;- spp.map %&gt;% \n  rename(PlotID = TransectID)\n\nspp.map &lt;- spp.map %&gt;% \n  left_join(y = plot,\n            by = \"PlotID\",\n            relationship = \"many-to-one\")\n\nspp.map &lt;- spp.map %&gt;% \n  rename(Lat = BeginLat,\n         Long = BeginLong,\n         Easting = BeginUTM_Easting,\n         Northing = BeginUTM_Northing) %&gt;% \n  select(PlotID, Code, Phenology, Part, Biomass, Duration, Status, Julian_Day, Lat, Long, Easting, Northing)\n\n\n# Create an sf object with the Lat and Long columns\nspp.map_UTM &lt;- st_as_sf(spp.map, coords = c(\"Long\", \"Lat\"), crs = 4326)  # EPSG:4326 is WGS84\n\n# Convert to UTM Zone 11N (EPSG:26911)\nspp.map_UTM &lt;- st_transform(spp.map_UTM, crs = 32611)\n\n# Extract UTM coordinates (Easting and Northing)\nspp.map$Easting &lt;- st_coordinates(spp.map_UTM)[, 1]\nspp.map$Northing &lt;- st_coordinates(spp.map_UTM)[, 2]\n\n\n\n\nCode\n# Load necessary libraries\nlibrary(tidyverse)\n\n# Summarize biomass weight by spatial location and species status\nspp.summary &lt;- spp.map %&gt;%\n   filter(!is.na(Biomass) & Biomass &gt; 0)  # Remove NAs\n  \nggplot(spp.summary, aes(x = Easting, y = Northing, weight = Biomass)) +\n  stat_density_2d(aes(fill = after_stat(density)), geom = \"raster\", contour = FALSE) +\n  facet_wrap(~ Status) +  # Separate maps for Native/Invasive\n  scale_fill_viridis_c(\n    name = \"Biomass Density\", \n    option = \"turbo\",\n    breaks = c(1e-09, 7e-09),  # Define specific density values\n    labels = c(\"Low\", \"High\")  # Replace numerical values with \"Low\" and \"High\"\n  ) +  \n  labs(title = \"Density of Biomass (Native vs Invasive Species)\",\n       x = \"Easting\", \n       y = \"Northing\") +\n  theme_minimal() +\n  theme(axis.text = element_blank(),  # Remove tick labels\n    axis.ticks = element_blank())  # Rotate x-axis labels\n\n\n\n\n\n\n\n\n\nI am still currently using only a subset of my quality data, so these results may be slightly skewed from the results of my complete data set.\nI would also like to see the differences in overall biomass for each month. I had a much larger sample size in April and May than I did in June and July, so I standardized my biomass values before plotting them.\n\n\nCode\nmonth.sum &lt;- spp.map %&gt;%\n  filter(!is.na(Biomass) & Biomass &gt; 0) %&gt;%  # Remove NAs\n  mutate(Month = case_when(\n    Julian_Day &gt;= 93 & Julian_Day &lt; 124 ~ \"April\",\n    Julian_Day &gt;= 124 & Julian_Day &lt; 155 ~ \"May\",\n    Julian_Day &gt;= 155 & Julian_Day &lt; 185 ~ \"June\",\n    Julian_Day &gt;= 185 & Julian_Day &lt;= 212 ~ \"July\",\n    TRUE ~ NA_character_\n  )) %&gt;%\n  filter(!is.na(Month)) %&gt;%\n  mutate(Month = factor(Month, levels = c(\"April\", \"May\", \"June\", \"July\")))\n\n# Normalize biomass within each month (to make sample sizes comparable)\nmonth.sum &lt;- month.sum %&gt;%\n  group_by(Month) %&gt;%\n  mutate(Total_Biomass = sum(Biomass),  # Calculate total biomass for each month\n         Normalized_Biomass = Biomass / Total_Biomass) %&gt;%  # Normalize biomass\n  ungroup()  # Remove grouping\n\n\n# Create density plot faceted by Month and Status\nggplot(month.sum, aes(x = Easting, y = Northing, weight = Normalized_Biomass)) +\n  stat_density_2d(aes(fill = after_stat(density)), geom = \"raster\", contour = FALSE) +\n  facet_grid(Month ~ Status) +  # Grid facet by Month (rows) and Status (columns)\n  scale_fill_viridis_c(\n    name = \"Biomass Density\", \n    option = \"turbo\",\n    breaks = c(2e-09, 18e-09),  # Define specific density values\n    labels = c(\"Low\", \"High\")  # Replace numerical values with \"Low\" and \"High\"\n  ) +  \n  labs(title = \"Normalized Density of Biomass (Native vs Invasive Species by Month)\",\n       x = \"Easting\", \n       y = \"Northing\") +\n  theme_minimal() +\n  theme(axis.text = element_blank(),  # Remove tick labels\n        axis.ticks = element_blank())\n\n\n\n\n\n\n\n\n\nSince cheatgrass is the main invasive species we’ve been tracking in the canyon, I’m especially interested in how its biomass changes from month to month. In this part of my dataset, I didn’t record any cheatgrass observations in June, so I’ll need to be cautious about interpreting the rest of the results until I can finish my biomass predictions. That said, the data I do have suggest that cheatgrass biomass peaked in the southern end of the canyon around June and began to decline after that.\n\n\nCode\n# Filter for observations with Species Code \"BRTE\"\ncheat.sum &lt;- spp.map %&gt;%\n  filter(!is.na(Biomass) & Biomass &gt; 0, Code == \"BRTE\") %&gt;%  # Remove NAs and filter for \"BRTE\"\n  mutate(Month = case_when(\n    Julian_Day &gt;= 93 & Julian_Day &lt; 124 ~ \"April\",\n    Julian_Day &gt;= 124 & Julian_Day &lt; 155 ~ \"May\",\n    Julian_Day &gt;= 155 & Julian_Day &lt; 185 ~ \"June\",\n    Julian_Day &gt;= 185 & Julian_Day &lt;= 212 ~ \"July\",\n    TRUE ~ NA_character_\n  )) %&gt;%\n  filter(!is.na(Month)) %&gt;%\n  mutate(Month = factor(Month, levels = c(\"April\", \"May\", \"June\", \"July\")))  # Set correct order\n\n# Normalize biomass within each month (to make sample sizes comparable)\ncheat.sum &lt;- cheat.sum %&gt;%\n  group_by(Month) %&gt;%\n  mutate(Total_Biomass = sum(Biomass),  # Calculate total biomass for each month\n         Normalized_Biomass = Biomass / Total_Biomass) %&gt;%  # Normalize biomass\n  ungroup()  # Remove grouping\n\n# Create density plot faceted by Month and Status for species \"BRTE\"\nggplot(cheat.sum, aes(x = Easting, y = Northing, weight = Normalized_Biomass)) +\n  stat_density_2d(aes(fill = after_stat(density)), geom = \"raster\", contour = FALSE) +\n  facet_grid(Month ~ Code) +  # Grid facet by Month (rows) and Status (columns)\n  scale_fill_viridis_c(\n    name = \"Biomass Density\", \n    option = \"turbo\",\n    breaks = c(2e-09, 14e-09),  # Define specific density values\n    labels = c(\"Low \", \"High \")  # Replace numerical values with \"Low\" and \"High\"\n  ) +  \n  labs(title = \"Normalized Density of Biomass for BRTE by month\",\n       x = \"Easting\", \n       y = \"Northing\") +\n  theme_minimal() +\n  theme(axis.text = element_blank(),  # Remove tick labels\n        axis.ticks = element_blank())\n\n\n\n\n\n\n\n\n\nThe metric of “suitable biomass” is a single value applied to my transect, so I have not figured out how to apply that value to specific species. I could however look at the overall DE and DP for native versus invasive species. (another graph to add to the to-do list)"
  },
  {
    "objectID": "posts/Midterm.html#gps-data",
    "href": "posts/Midterm.html#gps-data",
    "title": "BCB 520 - Final Project",
    "section": "",
    "text": "Lastly, I want to see how the sheep movements change each month with the overall biomass of both native and invasive species. I started out by creating a heat map of our overall sheep location use throughout the canyon.\n\n\nCode\ngps &lt;- read.csv(\"C:/Users/Alexis Means/Documents/Project/Demographics/Code/cleaned.data/sheep_clean_24.csv\")\n\ngps &lt;- gps %&gt;% \n  rename(Easting = x_,\n         Northing = y_)\n\n# Step 1: Kernel Density Estimation (KDE) for GPS data\ngps_kde &lt;- ggplot(gps, aes(x = Easting, y = Northing)) +\n  stat_density_2d(aes(fill = after_stat(density)), geom = \"raster\", contour = FALSE) +\n  scale_fill_viridis_c(option = \"inferno\",\n          name = \"GPS Use Density\",\n          breaks = c(2e-09, 10e-09),  # Define specific density values\n          labels = c(\"Low\", \"High\")  # Replace  values with \"Low\" and \"High\"\n  ) +\n  labs(title = \"Sheep Area Use\")+\n  theme_minimal()+\n  theme(axis.text = element_blank(),  # Remove tick labels\n        axis.ticks = element_blank()) \n  plot(gps_kde)\n\n\n\n\n\n\n\n\n\nIf the areas of high biomass density align with values of high nutrient quality in theory this means that the density of our sheep points should also follow the trends of high biomass density in the months of April and May. I wanted to see if I could overlay our sheep locations each month with the biomass density data each month to observe my hunch that sheep would follow this trend in these months. They do not appear to follow this trend, most likely due to other outside factors such as selection for escape terrain that outweigh the need to follow vegetation trends. It is also likely that areas of high biomass does not always mean areas of high nutritional quality.\n\n\nCode\nmonth.sum &lt;- spp.map %&gt;%\n  filter(!is.na(Biomass) & Biomass &gt; 0) %&gt;%  # Remove NAs\n  mutate(Month = case_when(\n    Julian_Day &gt;= 93 & Julian_Day &lt; 124 ~ \"April\",\n    Julian_Day &gt;= 124 & Julian_Day &lt; 155 ~ \"May\",\n    Julian_Day &gt;= 155 & Julian_Day &lt; 185 ~ \"June\",\n    Julian_Day &gt;= 185 & Julian_Day &lt;= 212 ~ \"July\",\n    TRUE ~ NA_character_\n  )) %&gt;%\n  filter(!is.na(Month)) %&gt;%\n  mutate(Month = factor(Month, levels = c(\"April\", \"May\", \"June\", \"July\")))\n\n\n# Normalize biomass within each month (to make sample sizes comparable)\nmonth.sum &lt;- month.sum %&gt;%\n  group_by(Month) %&gt;%\n  mutate(Total_Biomass = sum(Biomass),  # Calculate total biomass for each month\n         Normalized_Biomass = Biomass / Total_Biomass) %&gt;%  # Normalize biomass\n  ungroup()  # Remove grouping\n\n# Extract month from the GPS timestamp\ngps &lt;- gps %&gt;%\n  mutate(Month = case_when(\n    month(t_) == 4 ~ \"April\",\n    month(t_) == 5 ~ \"May\",\n    month(t_) == 6 ~ \"June\",\n    month(t_) == 7 ~ \"July\",\n    TRUE ~ NA_character_\n  )) %&gt;%\n  filter(!is.na(Month)) %&gt;% \n  mutate(Month = factor(Month, levels = c(\"April\", \"May\", \"June\", \"July\")))\n\nggplot() + # Biomass density heatmap using kernel density estimation\n  stat_density_2d(\n    data = month.sum,\n    aes(x = Easting, y = Northing, weight = Normalized_Biomass, fill = after_stat(density)),\n    geom = \"raster\",\n    contour = FALSE\n  ) +\n  facet_grid(Month ~ Status) +  # Grid facet by Month (rows) and Status (columns)\n  scale_fill_viridis_c(\n    name = \"Biomass Density\", \n    option = \"turbo\",\n    breaks = c(2e-09, 18e-09),  # Define specific density values\n    labels = c(\"Low\", \"High\")  # Replace numerical values with \"Low\" and \"High\"\n  ) +  \n  labs(title = \"Normalized Density of Biomass with GPS Locations (Native vs Invasive Species by Month)\",\n       x = \"Easting\", \n       y = \"Northing\") +\n  theme_minimal() +\n  theme(axis.text = element_blank(),  # Remove tick labels\n        axis.ticks = element_blank()) +\n  # Overlay GPS points, filtering by Month to match the facet\n  geom_point(\n    data = gps, \n    aes(x = Easting, y = Northing), \n    color = \"red\", alpha = 0.1, size = 0.4\n  )\n\n\n\n\n\n\n\n\n\n\n\nCode\n# Define the path to the directory containing the file\nexcelpath &lt;- \"C:/Users/Alexis Means/Documents/Project/Nutrition Sampling/R code/FRESH/processed.data/\"\n\n# Define the specific file name\nfilename &lt;- \"2024.subset.results.xlsx\"\n\n# Construct the full file path\nexcel.file &lt;- file.path(excelpath, filename)\n\n# Load the workbook and read the data\n\nhabitat &lt;- loadWorkbook(excel.file)\nsuitable &lt;- data.frame(readWorkbook(excel.file, sheet = \"Plot-Level-Summary\", startRow = 1, colNames = TRUE))\n\n\nsuitable.map &lt;- suitable %&gt;% \n  rename(PlotID = TransectID) %&gt;% \n  left_join(y = plot,\n            by = \"PlotID\")\n\nsuitable.map &lt;- suitable.map %&gt;% \n  rename(Lat = BeginLat,\n         Long = BeginLong,\n         Easting = BeginUTM_Easting,\n         Northing = BeginUTM_Northing) %&gt;% \n  select(PlotID, TotalDE, TotalDP, SuitableBiomass, AveDE, AveDP, Julian_Day, Lat, Long, Easting, Northing)\nView(suitable.map)\n\n# Create an sf object with the Lat and Long columns\nsuitable.map_UTM &lt;- st_as_sf(suitable.map, coords = c(\"Long\", \"Lat\"), crs = 4326)  # EPSG:4326 is WGS84\n\n# Convert to UTM Zone 11N (EPSG:26911)\nsuitable.map_UTM &lt;- st_transform(suitable.map_UTM, crs = 32611)\n\n# Extract UTM coordinates (Easting and Northing)\nsuitable.map$Easting &lt;- st_coordinates(suitable.map_UTM)[, 1]\nsuitable.map$Northing &lt;- st_coordinates(suitable.map_UTM)[, 2]"
  },
  {
    "objectID": "posts/Midterm.html#suitable-biomass",
    "href": "posts/Midterm.html#suitable-biomass",
    "title": "BCB 520 - Final Project",
    "section": "",
    "text": "After completing the FRESH model using a subset of my data, I was able to get estimates of suitable biomass available at each transect that I sampled. I replicated similar graphs to my biomass density for native vs invasive species and the results are fairly similar. Like the biomass plots, there is a higher density in the south end of our study area when looking at the suitable biomass overall for the study area.\n\n\nCode\nsuitable.summary &lt;- suitable.map %&gt;%\n   filter(!is.na(SuitableBiomass) & SuitableBiomass &gt; 0)  # Remove NAs\n  \nggplot(suitable.summary, aes(x = Easting, y = Northing, weight = SuitableBiomass)) +\n  stat_density_2d(aes(fill = after_stat(density)), geom = \"raster\", contour = FALSE) +\n  scale_fill_viridis_c(\n    name = \"Suitable Biomass Density\", \n    option = \"turbo\",\n    breaks = c(0.5e-09, 3.5e-09),  # Define specific density values\n    labels = c(\"Low\", \"High\")  # Replace numerical values with \"Low\" and \"High\"\n  ) +  \n  labs(title = \"Density of Suitable Biomass\",\n       x = \"Easting\", \n       y = \"Northing\") +\n  theme_minimal() +\n  theme(axis.text = element_blank(),  # Remove tick labels\n    axis.ticks = element_blank())  # Rotate x-axis labels\n\n\n\n\n\n\n\n\n\n\n\nCode\n#|warning: false\n#| message: false\nsuitablemonth.sum &lt;- suitable.map %&gt;%\n  filter(!is.na(SuitableBiomass) & SuitableBiomass &gt; 0) %&gt;%\n    mutate(Month = case_when(\n      Julian_Day &gt;= 93 & Julian_Day &lt; 124 ~ \"April\",\n      Julian_Day &gt;= 124 & Julian_Day &lt; 155 ~ \"May\",\n      Julian_Day &gt;= 155 & Julian_Day &lt; 185 ~ \"June\",\n      Julian_Day &gt;= 185 & Julian_Day &lt;= 212 ~ \"July\",\n      TRUE ~ NA_character_\n    )) %&gt;%\n  filter(!is.na(Month)) %&gt;%\n  mutate(Month = factor(Month, levels = c(\"April\", \"May\", \"June\", \"July\")))\n\n# Normalize biomass within each month (to make sample sizes comparable)\nsuitablemonth.sum &lt;- suitablemonth.sum %&gt;%\n  group_by(Month) %&gt;%\n  mutate(Total_SuitableBiomass = sum(SuitableBiomass),  # Calculate total biomass for each month\n         Normalized_SuitableBiomass = SuitableBiomass / Total_SuitableBiomass) %&gt;%  # Normalize biomass\n  ungroup()  # Remove grouping\n\n\n# Create density plot faceted by Month and Status\nggplot(suitablemonth.sum, aes(x = Easting, y = Northing, weight = Normalized_SuitableBiomass)) +\n  stat_density_2d(aes(fill = after_stat(density)), geom = \"raster\", contour = FALSE) +\n  facet_grid(\"Month\") +  # Grid facet by Month (rows) and Status (columns)\n  scale_fill_viridis_c(\n    name = \"Suitable Biomass Density\", \n    option = \"turbo\",\n    breaks = c(1e-09, 9e-09),  # Define specific density values\n    labels = c(\"Low \", \"High \")  # Replace numerical values with \"Low\" and \"High\"\n  ) +  \n  labs(title = \"Normalized Density of Suitable Biomass\",\n       x = \"Easting\", \n       y = \"Northing\") +\n  theme_minimal() +\n  theme(axis.text = element_blank(),  # Remove tick labels\n        axis.ticks = element_blank())\n\n\nWarning: The following aesthetics were dropped during statistical transformation:\nweight.\nℹ This can happen when ggplot fails to infer the correct grouping structure in\n  the data.\nℹ Did you forget to specify a `group` aesthetic or to convert a numerical\n  variable into a factor?\nThe following aesthetics were dropped during statistical transformation:\nweight.\nℹ This can happen when ggplot fails to infer the correct grouping structure in\n  the data.\nℹ Did you forget to specify a `group` aesthetic or to convert a numerical\n  variable into a factor?\nThe following aesthetics were dropped during statistical transformation:\nweight.\nℹ This can happen when ggplot fails to infer the correct grouping structure in\n  the data.\nℹ Did you forget to specify a `group` aesthetic or to convert a numerical\n  variable into a factor?\nThe following aesthetics were dropped during statistical transformation:\nweight.\nℹ This can happen when ggplot fails to infer the correct grouping structure in\n  the data.\nℹ Did you forget to specify a `group` aesthetic or to convert a numerical\n  variable into a factor?\n\n\n\n\n\n\n\n\n\nWhen looking at the density of suitable biomass month by month, May still has the highest density of suitable biomass. While this is most likely the month with the largest amount of species in their nutrient dense phase, it is also the month that we sampled the most. So I feel like the sampling efforts may be slightly skewing my data.\nIn order to truly see these values accurately represented across my study area, I will need to start creating my predictive GAM. This will allow me to project these values of suitable biomass to other 30x30m pixels with similar covariates and predict how vegetative quality changes throughout the canyon in different times of the year."
  },
  {
    "objectID": "posts/Midterm.html#exploring-quality-trends",
    "href": "posts/Midterm.html#exploring-quality-trends",
    "title": "BCB 520 - Final Project",
    "section": "",
    "text": "Using a subset of my quality data, I began by comparing measurements of digestible energy (DE) and digestible protein (DP) across plant species and phenological stages. My main goal was to explore whether there is a correlation between high DE and high DP. The scatter plot results showed a pattern consistent with my expectations: the highest values for both DE and DP occur during the newly emergent (N) and budding (B) stages. These values drop sharply by the flowering (FL) stage and remain relatively stable thereafter.\n\n\nCode\nlibrary(tidyverse)\n\ndata$Phenology &lt;- factor(data$Phenology, levels = c(\"N\", \"B\", \"FL\", \"FR\", \"M\", \"C\"))\n\nggplot(data, aes(x = DP, y = DE)) +\n  geom_point(color = \"blue\", alpha = 0.6) +\n  geom_smooth(method = \"lm\", se = TRUE, color = \"red\") + \n  labs(title = \"Relationship Between DE and DP by Phenology\",\n       x = \"Digestible Protein (DP)\",\n       y = \"Digestible Energy (DE)\") +\n  theme_minimal() +\n  facet_wrap(~ Phenology, scales = \"free\") +\n  scale_x_continuous(expand = c(0.05, 0)) +  \n  scale_y_continuous(expand = c(0.05, 0)) +\n  theme(strip.text = element_text(face = \"bold\"))  \n\n\n\n\n\n\n\n\n\nTo better visualize the trends in DP and DE across phenological stages, I isolated the DE and DP values for direct comparison. Both metrics follow the expected pattern, showing a general decline over progressing phenological stage. While many species meet the DE requirement of 11.5 kJ per gram of forage, very few meet the necessary DP threshold of 7.5 g per 100 g of forage beyond the newly emergent stage. These thresholds represent the minimum forage quality needed to meet the energetic and protein demands of a lactating female sheep.\n\n\nCode\n# Ensure Phenology is a factor with the correct order\ndata$Phenology &lt;- factor(data$Phenology, levels = c(\"N\", \"B\", \"FL\", \"FR\", \"M\", \"C\"))\n\nggplot(data, aes(x = Phenology, y = DE, fill = Phenology)) +\n  geom_boxplot(alpha = 0.7, outlier.shape = NA) +  \n  scale_fill_viridis_d(option = \"plasma\") +  \n  labs(title = \"Distribution of Digestible Energy (DE) by Phenology\",\n       x = \"Phenology\",\n       y = \"DE(kJ g^-1)\") +\n  theme_minimal() +\n  theme(legend.position = \"none\")+\n   geom_hline(yintercept = 11.5, linetype = \"dashed\", color = \"red\", size = 1)+\n  annotate(\"text\", x = 6.4, y = 11.8, label = \"11.5\", color = \"black\", size = 4, fontface = \"italic\")\n\n\n\n\n\n\n\n\n\n\n\nCode\nggplot(data, aes(x = Phenology, y = DP, fill = Phenology)) +\n  geom_boxplot(alpha = 0.7, outlier.shape = NA) +  \n  scale_fill_viridis_d(option = \"plasma\") +  \n  labs(title = \"Distribution of Digestible Protien (DP) by Phenology\",\n       x = \"Phenology\",\n       y = \"DP (g protien/100g forage)\") +\n  theme_minimal() +\n  theme(legend.position = \"none\")+\n   geom_hline(yintercept = 7.5, linetype = \"dashed\", color = \"red\", size = 1)+\n  annotate(\"text\", x = 6.5, y = 8, label = \"7.5\", color = \"black\", size = 4, fontface = \"italic\")+\n  coord_cartesian(ylim = c(-2, 12))\n\n\n\n\n\n\n\n\n\n\n\n\nI was curious whether this trend varied across different vegetation types, particularly in riparian areas, which retain the most moisture. However, I did not observe any clear pattern indicating that a specific vegetation type consistently supported significantly higher quality metrics than others.\n\n\nCode\ndata &lt;- data %&gt;%\n  mutate(PVT = str_sub(TransectID, start = 4, end = 6)) %&gt;% \n  group_by(PVT) %&gt;%\n  mutate(Stand_DE = scale(DE)) %&gt;%\n  mutate(Stand_DP = scale(DP)) %&gt;%\n  ungroup()\n\ndata &lt;- data %&gt;%\n  mutate(PVT = case_when(\n    PVT == \"672\" ~ \"Grassland\",\n    PVT == \"682\" ~ \"Riparian\",\n    PVT == \"674\" ~ \"Intermediate\",\n    PVT == \"668\" ~ \"Scabland\",\n    PVT == \"669\" ~ \"Shrubland\",\n    TRUE ~ as.character(PVT)  # This keeps any other values unchanged\n  ))\n\nggplot(data, aes(x = PVT, y = DE, fill = PVT)) +\n  geom_boxplot(alpha = 0.7, outlier.shape = NA) +  \n  scale_fill_viridis_d(option = \"plasma\") +  \n  labs(title = \"Distribution of Digestible Energy (DE) by Phenology and PVT\",\n       x = NULL,  # Remove x-axis label\n       y = \"DE (kJ g^-1)\",\n       fill = \"PVT\") +  # Label for the legend\n  theme_minimal() +\n  theme(\n    legend.position = \"right\",  # Show legend on the right\n    axis.text.x = element_blank(),  # Remove x-axis text\n    axis.ticks.x = element_blank()  # Remove x-axis ticks\n  ) +\n  geom_hline(yintercept = 11.5, linetype = \"dashed\", color = \"red\", size = 1) +\n  facet_wrap(~ Phenology, scales = \"free_x\", ncol = 3) +\n  coord_cartesian(ylim = c(8, 15))\n\n\n\n\n\n\n\n\n\nCode\nggplot(data, aes(x = PVT, y = DP, fill = PVT)) +\n  geom_boxplot(alpha = 0.7, outlier.shape = NA) +  \n  scale_fill_viridis_d(option = \"plasma\") +  \n  labs(title = \"Distribution of Digestible Protein (DP) by Phenology and PVT\",\n      x = NULL,  # Remove x-axis label\n       y = \"DP (g protein/100 g forage)\",\n       fill = \"PVT\") +  # Label for the legend\n  theme_minimal() +\n  theme(legend.position = \"right\",  # Show legend on the right\n    axis.text.x = element_blank(),  # Remove x-axis text\n    axis.ticks.x = element_blank(),\n    strip.text = element_text(face = \"bold\")# Remove x-axis ticks\n  ) +\n  geom_hline(yintercept = 7.5, linetype = \"dashed\", color = \"red\", size = 1) +\n  facet_wrap(~ Phenology, scales = \"free_x\", ncol = 3)+\n  coord_cartesian(ylim = c(-2, 12))\n\n\n\n\n\n\n\n\n\n\n\nCode\nplot &lt;- read.csv(\"C:/Users/Alexis Means/Documents/Project/Nutrition Sampling/R code/Cleaning/processed.data/transect.csv\")\n\n# Define the path to the directory containing the file\nexcelpath &lt;- \"C:/Users/Alexis Means/Documents/Project/Nutrition Sampling/R code/FRESH/processed.data/\"\n\n# Define the specific file name\nfilename &lt;- \"2024.subset.results.xlsx\"\n\n# Construct the full file path\nexcel.file &lt;- file.path(excelpath, filename)\n\n# Load the workbook and read the data\n\nhabitat &lt;- loadWorkbook(excel.file)\nsuitable &lt;- data.frame(readWorkbook(excel.file, sheet = \"Plot-Level-Summary\", startRow = 1, colNames = TRUE))\n\n\nsuitable &lt;- suitable %&gt;% \n  rename(PlotID = TransectID) %&gt;% \n  left_join(y = plot,\n            by = \"PlotID\")\n\nsuitable &lt;- suitable %&gt;% \n  rename(Lat = BeginLat,\n         Long = BeginLong,\n         Easting = BeginUTM_Easting,\n         Northing = BeginUTM_Northing) %&gt;% \n  select(PlotID, TotalDE, TotalDP, SuitableBiomass, AveDE, AveDP, Julian_Day, Lat, Long, Easting, Northing)\n\n\n# Create an sf object with the Lat and Long columns\nsuitable_UTM &lt;- st_as_sf(suitable, coords = c(\"Long\", \"Lat\"), crs = 4326)  # EPSG:4326 is WGS84\n\n# Convert to UTM Zone 11N (EPSG:26911)\nsuitable_UTM &lt;- st_transform(suitable_UTM, crs = 32611)\n\n# Extract UTM coordinates (Easting and Northing)\nsuitable$Easting &lt;- st_coordinates(suitable_UTM)[, 1]\nsuitable$Northing &lt;- st_coordinates(suitable_UTM)[, 2]\n\nsuitable &lt;- suitable %&gt;%  \nmutate(Month = case_when(\n    Julian_Day &gt;= 93 & Julian_Day &lt; 124 ~ \"April\",\n    Julian_Day &gt;= 124 & Julian_Day &lt; 155 ~ \"May\",\n    Julian_Day &gt;= 155 & Julian_Day &lt; 185 ~ \"June\",\n    Julian_Day &gt;= 185 & Julian_Day &lt;= 212 ~ \"July\",\n    TRUE ~ NA_character_\n  )) %&gt;%\n  filter(!is.na(Month)) %&gt;%\n  mutate(Month = factor(Month, levels = c(\"April\", \"May\", \"June\", \"July\")))\n\nsuitable &lt;- suitable %&gt;% \n  mutate(PVT = str_sub(PlotID, start = 4, end = 6)) %&gt;% \n  mutate(PVT = case_when(\n    PVT == \"672\" ~ \"Grassland\",\n    PVT == \"682\" ~ \"Riparian\",\n    PVT == \"674\" ~ \"Intermediate\",\n    PVT == \"668\" ~ \"Scabland\",\n    PVT == \"669\" ~ \"Shrubland\",\n    TRUE ~ as.character(PVT)  # This keeps any other values unchanged\n  ))\n\n\n\n\n\nUsing measurements of DE and DP, along with the biomass of forage collected at my transects, I applied the FRESH Model (Hanley et al. 2012) to evaluate how many of the sampled areas met the nutritional requirements of a lactating female sheep, based on the combined contribution of all observed species. This analysis produced my estimate of “suitable biomass.”\nWhile my initial hypothesis was that riparian areas would stand out for their nutrient quality, this was not supported by the DE and DP values alone. However, due to the higher plant density in these moisture-rich areas, riparian zones did yield a much greater total biomass, resulting in higher suitable biomass values overall compared to other vegetation types.\nOne vegetation community that caught my attention was the scabland community. Found mostly on exposed ridges, these areas are typically rocky, wind-swept, and sun-exposed—conditions not usually associated with high productivity. However, these ridges are often the most accessible points in the landscape and are frequently used by landowners for grazing cattle on BLM land. They also lie closer to potential sources of agricultural runoff and experience more frequent disturbance. I suspect that these human influences may be altering the natural composition and productivity of the scabland community. Therefore, I plan to include distance to private land as a variable in my GAM, as I believe it may be a key factor shaping this vegetation type.\n\n\nCode\nggplot(suitable, aes(x = PVT, y = SuitableBiomass, fill = PVT)) +\n  geom_boxplot(alpha = 0.7, outlier.shape = NA) +\n  scale_fill_viridis_d(option = \"plasma\") +\n  labs(title = \"Comparison of Suitable Biomass Across PVTs\",\n       x = \"Plant Vegetation Type (PVT)\",\n       y = \"Suitable Biomass\") +\n  theme_minimal() +\n  theme(legend.position = \"none\",\n        axis.text.x = element_text(angle = 45, hjust = 1))+\n  coord_cartesian(ylim = c(-2, 170))\n\n\n\n\n\n\n\n\n\n\n\n\nNext, I looked at how these forage quality metrics changed over time. It’s important to note that if a transect did not meet the nutritional requirements for a lactating female sheep, it was assigned a suitable biomass value of zero. Because of this, it may appear that my sampling ended in early July, even though I continued collecting data through August. This is likely because many transects no longer met the nutritional thresholds by mid-summer, resulting in more zeros for suitable biomass.\nThe trends in suitable biomass and digestible energy align with my expectations—they both decline over time. Digestible protein, however, remains relatively stable throughout the season.\nIt’s also reassuring to see that my assumption about the timing of the “green-up”—the period when forage is at its most nutritious—was accurate. The first graph shows a steady decline in suitable biomass until mid-May, after which values remain fairly constant with only a slight decrease through the rest of the summer.\n\n\nCode\n# Define the Julian days and corresponding month labels\ndate_breaks &lt;- c(92, 122, 155, 185)\ndate_labels &lt;- c(\"April\", \"May\", \"June\", \"July\")\n\n\nggplot(suitable, aes(x = Julian_Day, y = SuitableBiomass)) +\n  geom_point(aes(color = PVT), alpha = 0.6) +\n  geom_smooth(method = \"loess\", se = TRUE, color = \"black\") +\n  scale_color_viridis_d() +\n  labs(title = \"Suitable Biomass Over Time\",\n       x = \"Julian Day\",\n       y = \"Suitable Biomass\",\n       color = \"PVT\") +\n  theme_minimal() +\n  theme(legend.position = \"right\",\n        axis.text.x = element_text(angle = 0, hjust = 0.5)) +\n  scale_x_continuous(breaks = date_breaks,\n    labels = date_labels,\n    limits = c(min(date_breaks), max(date_breaks))\n  )\n\n\n\n\n\n\n\n\n\n\n\nCode\nggplot(suitable, aes(x = Julian_Day, y = AveDE)) +\n  geom_point(aes(color = PVT), alpha = 0.6) +\n  geom_smooth(method = \"loess\", se = TRUE, color = \"black\") +\n  scale_color_viridis_d() +\n  labs(title = \"Average DE Over Time\",\n       x = \"Julian Day\",\n       y = \"DE\",\n       color = \"PVT\") +\n  theme_minimal() +\n  theme(legend.position = \"right\",\n        axis.text.x = element_text(angle = 0, hjust = 0.5)) +\n  scale_x_continuous(breaks = date_breaks,\n    labels = date_labels,\n    limits = c(min(date_breaks), max(date_breaks))\n  )\n\n\n\n\n\n\n\n\n\n\n\nCode\nggplot(suitable, aes(x = Julian_Day, y = AveDP)) +\n  geom_point(aes(color = PVT), alpha = 0.6) +\n  geom_smooth(method = \"loess\", se = TRUE, color = \"black\") +\n  scale_color_viridis_d() +\n  labs(title = \"Average DP Over Time\",\n       x = \"Julian Day\",\n       y = \"DP\",\n       color = \"PVT\") +\n  theme_minimal() +\n  theme(legend.position = \"right\",\n        axis.text.x = element_text(angle = 0, hjust = 0.5)) +\n  scale_x_continuous(\n    breaks = date_breaks,\n    labels = date_labels,\n    limits = c(min(date_breaks), max(date_breaks))\n  )"
  },
  {
    "objectID": "posts/post-with-code/exploring.quality.measurements.html",
    "href": "posts/post-with-code/exploring.quality.measurements.html",
    "title": "Quality Measurement Exploration",
    "section": "",
    "text": "In my final project for BCB 520, I started to dive into the levels of DE and DP supplied by different phenological stages as well as different vegetation communities. Now I would like to make similar observations, but at a species level.\n\n\nThis chunk of code loads in my quality measurements for my species with observed biomass measurements.\n\n\nCode\nlibrary(lpSolve)\nlibrary(openxlsx)\nlibrary(tools)\nlibrary(dplyr)\nlibrary(sf)\nlibrary(tidyverse)\n\n# Define the path to the directory containing the file\nexcelpath &lt;- \"C:/Users/Alexis Means/Documents/Project/Nutrition Sampling/R code/FRESH/processed.data/\"\n\n# Define the specific file name\nfilename &lt;- \"FRESH.Subset.xlsx\"\n\n# Construct the full file path\nexcel.file &lt;- file.path(excelpath, filename)\n\n# Load the workbook and read the data\nlibrary(openxlsx)\nhabitat &lt;- loadWorkbook(excel.file)\ndata &lt;- data.frame(readWorkbook(excel.file, sheet = \"FRESH Data\", startRow = 1, colNames = TRUE))\n\n\nplant &lt;-read.csv(\"C:/Users/Alexis Means/Documents/Project/Nutrition Sampling/R code/Cleaning/processed.data/plant.csv\")\n\ndata &lt;- data %&gt;% \n  rename(Code = Plant.Code) %&gt;% \n  left_join(y = plant, \n            by = \"Code\",\n            relationship = \"many-to-one\")\n\n\n\n\n\nFirst I wanted to filter the dataset to contain only the top 20 species/ phenological stage pairs with the highest levels of DE and DP. I started by grouping my observatons by their species, phenological stage and part of the plant. If there was multiple measurements for those observations, I calculated the mean for that unique plant combination.\n\n\n\n\nCode\nlibrary(tidyverse)\n\n#make sure that the phenological stages are seen as categorical variables and in the correct order\ndata$Phenology &lt;- factor(data$Phenology, levels = c(\"N\", \"B\", \"FL\", \"FR\", \"M\", \"C\"))\n\nlibrary(dplyr)\nlibrary(stringr)\nlibrary(plotly)\n\n# Clean up any leading/trailing whitespace and convert to character\ndata_clean &lt;- data %&gt;%\n  mutate(\n    Code = str_trim(as.character(Code)),\n    Phenology = str_trim(as.character(Phenology)),\n    Part = str_trim(as.character(Part))\n  )\n\n# Step 1: Calculate means and filter top 20 combos\ntop_20_combos &lt;- data_clean %&gt;%\n  group_by(Code, Phenology, Part, Status) %&gt;%\n  summarise(\n    mean_DE = mean(DE, na.rm = TRUE),\n    mean_DP = mean(DP, na.rm = TRUE),\n    .groups = \"drop\"\n  ) %&gt;%\n  arrange(desc(mean_DE), desc(mean_DP)) %&gt;%  # Arrange by both\n  slice_head(n = 20) %&gt;%                     # Keep only top 20\n  mutate(combo_label = paste(Code, Phenology, Part, sep = \"_\"))\n\n# Step 2: Create interactive scatterplot\np1 &lt;- ggplot(top_20_combos, aes(\n  x = mean_DE,\n  y = mean_DP,\n  color = Status,\n  text = paste0(\n    \"Code: \", Code,\n    \"&lt;br&gt;Phenology: \", Phenology,\n    \"&lt;br&gt;Part: \", Part,\n    \"&lt;br&gt;Status: \", Status,\n    \"&lt;br&gt;Mean DE: \", round(mean_DE, 2),\n    \"&lt;br&gt;Mean DP: \", round(mean_DP, 2)\n  )\n)) +\n  geom_point(size = 4) +\n  labs(\n    title = \"Top 20 Species Combinations by Mean DE and DP\",\n    x = \"Mean DE\",\n    y = \"Mean DP\",\n    color = \"Status\"\n  ) +\n  theme_minimal(base_size = 12) +\n  xlim(13, 15) +   # You can adjust this as needed\n  ylim(6, NA)\n\nggplotly(p1, tooltip = \"text\")\n\n\n\n\n\n\n\n\n\n\n\nCode\n# Step 2: Filter the dataset to only include those top 20 combinations\nfiltered_DE &lt;- data_clean %&gt;%\n  semi_join(top_20_combos, by = c(\"Code\", \"Phenology\", \"Part\"))\n\n# Count number of observations per Code–Phenology–Part combo\ncombo_counts &lt;- filtered_DE %&gt;%\n  count(Code, Phenology, Part, name = \"obs_count\") %&gt;%\n  left_join(\n    data %&gt;%\n      select(Code, Phenology, Part, Status) %&gt;%\n      distinct(),\n    by = c(\"Code\", \"Phenology\", \"Part\")\n  ) %&gt;%\n  mutate(combo_label = paste(Code, Phenology, Part, sep = \"_\"),\n         combo_label = reorder(combo_label, obs_count))\n\np2 &lt;- ggplot(combo_counts, aes(\n  x = combo_label,\n  y = obs_count,\n  fill = Status,\n  text = paste0(\n    \"Code: \", Code,\n    \"&lt;br&gt;Phenology: \", Phenology,\n    \"&lt;br&gt;Part: \", Part,\n    \"&lt;br&gt;Status: \", Status,\n    \"&lt;br&gt;Observations: \", obs_count\n  )\n)) +\n  geom_col() +\n  coord_flip() +\n  labs(\n    title = \"Observation Frequency of Top 20 Species Combos\",\n    x = \"Code | Phenology | Part\",\n    y = \"Number of Observations\",\n    fill = \"Status\"\n  ) +\n  theme_minimal(base_size = 12)\n\nggplotly(p2, tooltip = \"text\")\n\n\n\n\n\n\nThe first graph shows that Sisymbrium altissimum (SIAL2) when in its newly emergent stage (N) has the highest observed levels of digestible energy at 14.54 (units?) followed by Amsinckia menziesii (AMME) in its newly emergent stage (N) at 14.47 (units) and Equisetum hyemale (EQHY) in its newly emergent stage (N) at 14.31 (units). Most of the species that were observed with the highest DE were in the newly emergent (N) or budding (B) stages which is as to be expected. There was only two flowering species that fell within the top 20 with the highest DE which were (ERCO12) at 13.47 and (LONU2) at 13.26, one fruiting species (TRDU) at 13.26 and two mature species (CREPIS) at 13.56 and (TACA8) at 13.2. I was surprised to see any mature species make it within the top 20 highest digestible energy values. There were only 3 invasive species that within this list as well, they were new Equisetum hyemale (EQHY), and both new and budding Bromus Tectorum (BRTE).\nHowever, the species that we observed with the highest digestible energy are not the ones that we observed most frequently or the species with the highest biomass. The second graph shows that of the top 20 species-phenology combinations, Bromus Tectorum (BRTE) in its newly emergent stage is the species that we observed the most which is a common invasive species which overruns much of the canyon.\n\n\nCode\n# Create a unified dataset with ordered phenological stages\nphenos &lt;- data %&gt;%\n  mutate(Stage = case_when(\n    str_detect(Phenology, \"N\")  ~ \"Newly Emergent\",\n    str_detect(Phenology, \"B\")  ~ \"Budding\",\n    str_detect(Phenology, \"FL\") ~ \"Flowering\",\n    str_detect(Phenology, \"M\")  ~ \"Mature\",\n    str_detect(Phenology, \"C\")  ~ \"Cured\",\n    TRUE ~ NA_character_\n  )) %&gt;%\n  filter(!is.na(Stage)) %&gt;%\n  mutate(Stage = factor(Stage, levels = c(\"Newly Emergent\", \"Budding\", \"Flowering\", \"Mature\", \"Cured\"))) %&gt;%\n  group_by(Stage, Code, Phenology, Part, Status) %&gt;%\n  summarise(\n    mean_DE = mean(DE, na.rm = TRUE),\n    mean_DP = mean(DP, na.rm = TRUE),\n    .groups = \"drop\"\n  ) %&gt;%\n  arrange(Stage, desc(mean_DE), desc(mean_DP)) %&gt;%\n  group_by(Stage) %&gt;%\n  slice_head(n = 20) %&gt;%\n  mutate(combo_label = paste(Code, Phenology, Part, sep = \"_\"))\n\npheno_plot &lt;- ggplot(phenos, aes(\n  x = mean_DE,\n  y = mean_DP,\n  color = Status,\n  text = paste0(\n    \"Stage: \", Stage,\n    \"&lt;br&gt;Code: \", Code,\n    \"&lt;br&gt;Phenology: \", Phenology,\n    \"&lt;br&gt;Part: \", Part,\n    \"&lt;br&gt;Status: \", Status,\n    \"&lt;br&gt;Mean DE: \", round(mean_DE, 2),\n    \"&lt;br&gt;Mean DP: \", round(mean_DP, 2)\n  )\n)) +\n  geom_point(size = 3) +\n  geom_vline(xintercept = 13.5, linetype = \"dashed\", color = \"red\") +\n  geom_hline(yintercept = 7.5, linetype = \"dashed\", color = \"red\") +\n  labs(\n    title = \"Comparing Species by Phenological Stage\",\n    x = \"Mean DE\",\n    y = \"Mean DP\",\n    color = \"Status\"\n  ) +\n  facet_wrap(~ Stage, scales = \"free\") +\n  scale_x_continuous(\n  breaks = function(x) floor(min(x)):ceiling(max(x)),\n  labels = scales::number_format(accuracy = 1)\n) +\nscale_y_continuous(\n  breaks = function(x) floor(min(x)):ceiling(max(x)),\n  labels = scales::number_format(accuracy = 1)\n) +\n  theme_minimal(base_size = 12)\n\nggplotly(pheno_plot, tooltip = \"text\")\n\n\n\n\n\n\n\n\nCode\nbiomass_DE &lt;- data %&gt;% \n  group_by(Code, Phenology, Part) %&gt;% \n  left_join(\n    data %&gt;%\n      select(Code, Phenology, Part, Status, Biomass) %&gt;%\n      distinct(), \n    by = c(\"Code\", \"Phenology\", \"Part\")\n  ) %&gt;%\n  mutate(combo_label = paste(Code, Phenology, Part, sep = \"_\"))\n\n\nWarning in left_join(., data %&gt;% select(Code, Phenology, Part, Status, Biomass) %&gt;% : Detected an unexpected many-to-many relationship between `x` and `y`.\nℹ Row 1 of `x` matches multiple rows in `y`.\nℹ Row 1 of `y` matches multiple rows in `x`.\nℹ If a many-to-many relationship is expected, set `relationship =\n  \"many-to-many\"` to silence this warning.\n\n\n\n\n\n\n\n\n\n\nCode\ngrass &lt;- data %&gt;%\n  filter(Family == \"POACEAE\") %&gt;% \n  group_by(Code, Phenology, Part, Status) %&gt;%\n   summarise(\n    mean_DE = mean(DE, na.rm = TRUE),\n    mean_DP = mean(DP, na.rm = TRUE),\n    .groups = \"drop\"\n  ) %&gt;%\n  arrange(desc(mean_DE), desc(mean_DP)) %&gt;%  # Arrange by both\n  slice_head(n = 20) %&gt;% \n  mutate(combo_label = paste(Code, Phenology, Part, sep = \"_\"))\n\n\n##creating interavtive scatterplot\np5 &lt;- ggplot(grass, aes(\n  x = mean_DE,\n  y = mean_DP,\n  color = Status,\n  text = paste0(\n    \"Code: \", Code,\n    \"&lt;br&gt;Phenology: \", Phenology,\n    \"&lt;br&gt;Part: \", Part,\n    \"&lt;br&gt;Status: \", Status,\n    \"&lt;br&gt;Mean DE: \", round(mean_DE, 2),\n    \"&lt;br&gt;Mean DP: \", round(mean_DP, 2)\n  )\n)) +\n  geom_point(size = 4) +\n  geom_vline(xintercept = 13.5, linetype = \"dashed\", color = \"red\") +\n  geom_hline(yintercept = 7.5, linetype = \"dashed\", color = \"red\") +\n  labs(\n    title = \"Top 20 Grass Species by Mean DE and DP\",\n    x = \"Mean DE\",\n    y = \"Mean DP\",\n    color = \"Status\"\n  ) +\n  theme_minimal(base_size = 12) +\n  xlim(12, 14) +\n  ylim(0, NA)\n\nggplotly(p5, tooltip = \"text\")\n\n\n\n\n\n\n\n\n\n\n\nCode\nfiltered_grass.DE &lt;- data %&gt;%\n  semi_join(grass, by = c(\"Code\", \"Phenology\", \"Part\"))\n\n# Count number of observations per Code–Phenology–Part combo\ngrass.DE_counts &lt;- filtered_grass.DE %&gt;%\n  count(Code, Phenology, Part, name = \"obs_count\") %&gt;%\n  left_join(\n    data %&gt;%\n      select(Code, Phenology, Part, Status) %&gt;%\n      distinct(),\n    by = c(\"Code\", \"Phenology\", \"Part\")\n  ) %&gt;%\n  mutate(combo_label = paste(Code, Phenology, Part, sep = \"_\"),\n         combo_label = reorder(combo_label, obs_count))\n\np6 &lt;- ggplot(grass.DE_counts, aes(\n  x = combo_label,\n  y = obs_count,\n  fill = Status,\n  text = paste0(\n    \"Code: \", Code,\n    \"&lt;br&gt;Phenology: \", Phenology,\n    \"&lt;br&gt;Part: \", Part,\n    \"&lt;br&gt;Status: \", Status,\n    \"&lt;br&gt;Observations: \", obs_count\n  )\n)) +\n  geom_col() +\n  coord_flip() +\n  labs(\n    title = \"Observation Frequency of Top 20 Grass Species by DE\",\n    x = \"Code | Phenology | Part\",\n    y = \"Number of Observations\",\n    fill = \"Status\"\n  ) +\n  theme_minimal(base_size = 12)\n\nggplotly(p6, tooltip = \"text\")\n\n\n\n\n\n\n\n\n\n\n\nCode\n# Create a unified dataset with ordered phenological stages\ngrass_combined &lt;- data %&gt;%\n  filter(Family == \"POACEAE\") %&gt;%\n  mutate(Stage = case_when(\n    str_detect(Phenology, \"N\")  ~ \"Newly Emergent\",\n    str_detect(Phenology, \"B\")  ~ \"Budding\",\n    str_detect(Phenology, \"FL\") ~ \"Flowering\",\n    str_detect(Phenology, \"M\")  ~ \"Mature\",\n    str_detect(Phenology, \"C\")  ~ \"Cured\",\n    TRUE ~ NA_character_\n  )) %&gt;%\n  filter(!is.na(Stage)) %&gt;%\n  mutate(Stage = factor(Stage, levels = c(\"Newly Emergent\", \"Budding\", \"Flowering\", \"Mature\", \"Cured\"))) %&gt;%\n  group_by(Stage, Code, Phenology, Part, Status) %&gt;%\n  summarise(\n    mean_DE = mean(DE, na.rm = TRUE),\n    mean_DP = mean(DP, na.rm = TRUE),\n    .groups = \"drop\"\n  ) %&gt;%\n  arrange(Stage, desc(mean_DE), desc(mean_DP)) %&gt;%\n  group_by(Stage) %&gt;%\n  slice_head(n = 20) %&gt;%\n  mutate(combo_label = paste(Code, Phenology, Part, sep = \"_\"))\n\np_combined &lt;- ggplot(grass_combined, aes(\n  x = mean_DE,\n  y = mean_DP,\n  color = Status,\n  text = paste0(\n    \"Stage: \", Stage,\n    \"&lt;br&gt;Code: \", Code,\n    \"&lt;br&gt;Phenology: \", Phenology,\n    \"&lt;br&gt;Part: \", Part,\n    \"&lt;br&gt;Status: \", Status,\n    \"&lt;br&gt;Mean DE: \", round(mean_DE, 2),\n    \"&lt;br&gt;Mean DP: \", round(mean_DP, 2)\n  )\n)) +\n  geom_point(size = 3) +\n  geom_vline(xintercept = 13.5, linetype = \"dashed\", color = \"red\") +\n  geom_hline(yintercept = 7.5, linetype = \"dashed\", color = \"red\") +\n  labs(\n    title = \"Comparing Grass Species by Phenological Stage\",\n    x = \"Mean DE\",\n    y = \"Mean DP\",\n    color = \"Status\"\n  ) +\n  facet_wrap(~ Stage, scales = \"free\") +\n  scale_x_continuous(\n  breaks = function(x) floor(min(x)):ceiling(max(x)),\n  labels = scales::number_format(accuracy = 1)\n) +\nscale_y_continuous(\n  breaks = function(x) floor(min(x)):ceiling(max(x)),\n  labels = scales::number_format(accuracy = 1)\n) +\n  theme_minimal(base_size = 12)\n\nggplotly(p_combined, tooltip = \"text\")"
  },
  {
    "objectID": "posts/post-with-code/exploring.quality.measurements.html#data-wrangling",
    "href": "posts/post-with-code/exploring.quality.measurements.html#data-wrangling",
    "title": "Quality Measurement Exploration",
    "section": "",
    "text": "This chunk of code loads in my quality measurements for my species with observed biomass measurements.\n\n\nCode\nlibrary(lpSolve)\nlibrary(openxlsx)\nlibrary(tools)\nlibrary(dplyr)\nlibrary(sf)\nlibrary(tidyverse)\n\n# Define the path to the directory containing the file\nexcelpath &lt;- \"C:/Users/Alexis Means/Documents/Project/Nutrition Sampling/R code/FRESH/processed.data/\"\n\n# Define the specific file name\nfilename &lt;- \"FRESH.Subset.xlsx\"\n\n# Construct the full file path\nexcel.file &lt;- file.path(excelpath, filename)\n\n# Load the workbook and read the data\nlibrary(openxlsx)\nhabitat &lt;- loadWorkbook(excel.file)\ndata &lt;- data.frame(readWorkbook(excel.file, sheet = \"FRESH Data\", startRow = 1, colNames = TRUE))\n\n\nplant &lt;-read.csv(\"C:/Users/Alexis Means/Documents/Project/Nutrition Sampling/R code/Cleaning/processed.data/plant.csv\")\n\ndata &lt;- data %&gt;% \n  rename(Code = Plant.Code) %&gt;% \n  left_join(y = plant, \n            by = \"Code\",\n            relationship = \"many-to-one\")"
  },
  {
    "objectID": "posts/post-with-code/exploring.quality.measurements.html#highest-de-and-dp",
    "href": "posts/post-with-code/exploring.quality.measurements.html#highest-de-and-dp",
    "title": "Quality Measurement Exploration",
    "section": "",
    "text": "First I wanted to filter the dataset to contain only the top 20 species/ phenological stage pairs with the highest levels of DE and DP. I started by grouping my observatons by their species, phenological stage and part of the plant. If there was multiple measurements for those observations, I calculated the mean for that unique plant combination.\n\n\n\n\nCode\nlibrary(tidyverse)\n\n#make sure that the phenological stages are seen as categorical variables and in the correct order\ndata$Phenology &lt;- factor(data$Phenology, levels = c(\"N\", \"B\", \"FL\", \"FR\", \"M\", \"C\"))\n\nlibrary(dplyr)\nlibrary(stringr)\nlibrary(plotly)\n\n# Clean up any leading/trailing whitespace and convert to character\ndata_clean &lt;- data %&gt;%\n  mutate(\n    Code = str_trim(as.character(Code)),\n    Phenology = str_trim(as.character(Phenology)),\n    Part = str_trim(as.character(Part))\n  )\n\n# Step 1: Calculate means and filter top 20 combos\ntop_20_combos &lt;- data_clean %&gt;%\n  group_by(Code, Phenology, Part, Status) %&gt;%\n  summarise(\n    mean_DE = mean(DE, na.rm = TRUE),\n    mean_DP = mean(DP, na.rm = TRUE),\n    .groups = \"drop\"\n  ) %&gt;%\n  arrange(desc(mean_DE), desc(mean_DP)) %&gt;%  # Arrange by both\n  slice_head(n = 20) %&gt;%                     # Keep only top 20\n  mutate(combo_label = paste(Code, Phenology, Part, sep = \"_\"))\n\n# Step 2: Create interactive scatterplot\np1 &lt;- ggplot(top_20_combos, aes(\n  x = mean_DE,\n  y = mean_DP,\n  color = Status,\n  text = paste0(\n    \"Code: \", Code,\n    \"&lt;br&gt;Phenology: \", Phenology,\n    \"&lt;br&gt;Part: \", Part,\n    \"&lt;br&gt;Status: \", Status,\n    \"&lt;br&gt;Mean DE: \", round(mean_DE, 2),\n    \"&lt;br&gt;Mean DP: \", round(mean_DP, 2)\n  )\n)) +\n  geom_point(size = 4) +\n  labs(\n    title = \"Top 20 Species Combinations by Mean DE and DP\",\n    x = \"Mean DE\",\n    y = \"Mean DP\",\n    color = \"Status\"\n  ) +\n  theme_minimal(base_size = 12) +\n  xlim(13, 15) +   # You can adjust this as needed\n  ylim(6, NA)\n\nggplotly(p1, tooltip = \"text\")\n\n\n\n\n\n\n\n\n\n\n\nCode\n# Step 2: Filter the dataset to only include those top 20 combinations\nfiltered_DE &lt;- data_clean %&gt;%\n  semi_join(top_20_combos, by = c(\"Code\", \"Phenology\", \"Part\"))\n\n# Count number of observations per Code–Phenology–Part combo\ncombo_counts &lt;- filtered_DE %&gt;%\n  count(Code, Phenology, Part, name = \"obs_count\") %&gt;%\n  left_join(\n    data %&gt;%\n      select(Code, Phenology, Part, Status) %&gt;%\n      distinct(),\n    by = c(\"Code\", \"Phenology\", \"Part\")\n  ) %&gt;%\n  mutate(combo_label = paste(Code, Phenology, Part, sep = \"_\"),\n         combo_label = reorder(combo_label, obs_count))\n\np2 &lt;- ggplot(combo_counts, aes(\n  x = combo_label,\n  y = obs_count,\n  fill = Status,\n  text = paste0(\n    \"Code: \", Code,\n    \"&lt;br&gt;Phenology: \", Phenology,\n    \"&lt;br&gt;Part: \", Part,\n    \"&lt;br&gt;Status: \", Status,\n    \"&lt;br&gt;Observations: \", obs_count\n  )\n)) +\n  geom_col() +\n  coord_flip() +\n  labs(\n    title = \"Observation Frequency of Top 20 Species Combos\",\n    x = \"Code | Phenology | Part\",\n    y = \"Number of Observations\",\n    fill = \"Status\"\n  ) +\n  theme_minimal(base_size = 12)\n\nggplotly(p2, tooltip = \"text\")\n\n\n\n\n\n\nThe first graph shows that Sisymbrium altissimum (SIAL2) when in its newly emergent stage (N) has the highest observed levels of digestible energy at 14.54 (units?) followed by Amsinckia menziesii (AMME) in its newly emergent stage (N) at 14.47 (units) and Equisetum hyemale (EQHY) in its newly emergent stage (N) at 14.31 (units). Most of the species that were observed with the highest DE were in the newly emergent (N) or budding (B) stages which is as to be expected. There was only two flowering species that fell within the top 20 with the highest DE which were (ERCO12) at 13.47 and (LONU2) at 13.26, one fruiting species (TRDU) at 13.26 and two mature species (CREPIS) at 13.56 and (TACA8) at 13.2. I was surprised to see any mature species make it within the top 20 highest digestible energy values. There were only 3 invasive species that within this list as well, they were new Equisetum hyemale (EQHY), and both new and budding Bromus Tectorum (BRTE).\nHowever, the species that we observed with the highest digestible energy are not the ones that we observed most frequently or the species with the highest biomass. The second graph shows that of the top 20 species-phenology combinations, Bromus Tectorum (BRTE) in its newly emergent stage is the species that we observed the most which is a common invasive species which overruns much of the canyon.\n\n\nCode\n# Create a unified dataset with ordered phenological stages\nphenos &lt;- data %&gt;%\n  mutate(Stage = case_when(\n    str_detect(Phenology, \"N\")  ~ \"Newly Emergent\",\n    str_detect(Phenology, \"B\")  ~ \"Budding\",\n    str_detect(Phenology, \"FL\") ~ \"Flowering\",\n    str_detect(Phenology, \"M\")  ~ \"Mature\",\n    str_detect(Phenology, \"C\")  ~ \"Cured\",\n    TRUE ~ NA_character_\n  )) %&gt;%\n  filter(!is.na(Stage)) %&gt;%\n  mutate(Stage = factor(Stage, levels = c(\"Newly Emergent\", \"Budding\", \"Flowering\", \"Mature\", \"Cured\"))) %&gt;%\n  group_by(Stage, Code, Phenology, Part, Status) %&gt;%\n  summarise(\n    mean_DE = mean(DE, na.rm = TRUE),\n    mean_DP = mean(DP, na.rm = TRUE),\n    .groups = \"drop\"\n  ) %&gt;%\n  arrange(Stage, desc(mean_DE), desc(mean_DP)) %&gt;%\n  group_by(Stage) %&gt;%\n  slice_head(n = 20) %&gt;%\n  mutate(combo_label = paste(Code, Phenology, Part, sep = \"_\"))\n\npheno_plot &lt;- ggplot(phenos, aes(\n  x = mean_DE,\n  y = mean_DP,\n  color = Status,\n  text = paste0(\n    \"Stage: \", Stage,\n    \"&lt;br&gt;Code: \", Code,\n    \"&lt;br&gt;Phenology: \", Phenology,\n    \"&lt;br&gt;Part: \", Part,\n    \"&lt;br&gt;Status: \", Status,\n    \"&lt;br&gt;Mean DE: \", round(mean_DE, 2),\n    \"&lt;br&gt;Mean DP: \", round(mean_DP, 2)\n  )\n)) +\n  geom_point(size = 3) +\n  geom_vline(xintercept = 13.5, linetype = \"dashed\", color = \"red\") +\n  geom_hline(yintercept = 7.5, linetype = \"dashed\", color = \"red\") +\n  labs(\n    title = \"Comparing Species by Phenological Stage\",\n    x = \"Mean DE\",\n    y = \"Mean DP\",\n    color = \"Status\"\n  ) +\n  facet_wrap(~ Stage, scales = \"free\") +\n  scale_x_continuous(\n  breaks = function(x) floor(min(x)):ceiling(max(x)),\n  labels = scales::number_format(accuracy = 1)\n) +\nscale_y_continuous(\n  breaks = function(x) floor(min(x)):ceiling(max(x)),\n  labels = scales::number_format(accuracy = 1)\n) +\n  theme_minimal(base_size = 12)\n\nggplotly(pheno_plot, tooltip = \"text\")\n\n\n\n\n\n\n\n\nCode\nbiomass_DE &lt;- data %&gt;% \n  group_by(Code, Phenology, Part) %&gt;% \n  left_join(\n    data %&gt;%\n      select(Code, Phenology, Part, Status, Biomass) %&gt;%\n      distinct(), \n    by = c(\"Code\", \"Phenology\", \"Part\")\n  ) %&gt;%\n  mutate(combo_label = paste(Code, Phenology, Part, sep = \"_\"))\n\n\nWarning in left_join(., data %&gt;% select(Code, Phenology, Part, Status, Biomass) %&gt;% : Detected an unexpected many-to-many relationship between `x` and `y`.\nℹ Row 1 of `x` matches multiple rows in `y`.\nℹ Row 1 of `y` matches multiple rows in `x`.\nℹ If a many-to-many relationship is expected, set `relationship =\n  \"many-to-many\"` to silence this warning."
  },
  {
    "objectID": "posts/post-with-code/exploring.quality.measurements.html#grass-species",
    "href": "posts/post-with-code/exploring.quality.measurements.html#grass-species",
    "title": "Quality Measurement Exploration",
    "section": "",
    "text": "Code\ngrass &lt;- data %&gt;%\n  filter(Family == \"POACEAE\") %&gt;% \n  group_by(Code, Phenology, Part, Status) %&gt;%\n   summarise(\n    mean_DE = mean(DE, na.rm = TRUE),\n    mean_DP = mean(DP, na.rm = TRUE),\n    .groups = \"drop\"\n  ) %&gt;%\n  arrange(desc(mean_DE), desc(mean_DP)) %&gt;%  # Arrange by both\n  slice_head(n = 20) %&gt;% \n  mutate(combo_label = paste(Code, Phenology, Part, sep = \"_\"))\n\n\n##creating interavtive scatterplot\np5 &lt;- ggplot(grass, aes(\n  x = mean_DE,\n  y = mean_DP,\n  color = Status,\n  text = paste0(\n    \"Code: \", Code,\n    \"&lt;br&gt;Phenology: \", Phenology,\n    \"&lt;br&gt;Part: \", Part,\n    \"&lt;br&gt;Status: \", Status,\n    \"&lt;br&gt;Mean DE: \", round(mean_DE, 2),\n    \"&lt;br&gt;Mean DP: \", round(mean_DP, 2)\n  )\n)) +\n  geom_point(size = 4) +\n  geom_vline(xintercept = 13.5, linetype = \"dashed\", color = \"red\") +\n  geom_hline(yintercept = 7.5, linetype = \"dashed\", color = \"red\") +\n  labs(\n    title = \"Top 20 Grass Species by Mean DE and DP\",\n    x = \"Mean DE\",\n    y = \"Mean DP\",\n    color = \"Status\"\n  ) +\n  theme_minimal(base_size = 12) +\n  xlim(12, 14) +\n  ylim(0, NA)\n\nggplotly(p5, tooltip = \"text\")\n\n\n\n\n\n\n\n\n\n\n\nCode\nfiltered_grass.DE &lt;- data %&gt;%\n  semi_join(grass, by = c(\"Code\", \"Phenology\", \"Part\"))\n\n# Count number of observations per Code–Phenology–Part combo\ngrass.DE_counts &lt;- filtered_grass.DE %&gt;%\n  count(Code, Phenology, Part, name = \"obs_count\") %&gt;%\n  left_join(\n    data %&gt;%\n      select(Code, Phenology, Part, Status) %&gt;%\n      distinct(),\n    by = c(\"Code\", \"Phenology\", \"Part\")\n  ) %&gt;%\n  mutate(combo_label = paste(Code, Phenology, Part, sep = \"_\"),\n         combo_label = reorder(combo_label, obs_count))\n\np6 &lt;- ggplot(grass.DE_counts, aes(\n  x = combo_label,\n  y = obs_count,\n  fill = Status,\n  text = paste0(\n    \"Code: \", Code,\n    \"&lt;br&gt;Phenology: \", Phenology,\n    \"&lt;br&gt;Part: \", Part,\n    \"&lt;br&gt;Status: \", Status,\n    \"&lt;br&gt;Observations: \", obs_count\n  )\n)) +\n  geom_col() +\n  coord_flip() +\n  labs(\n    title = \"Observation Frequency of Top 20 Grass Species by DE\",\n    x = \"Code | Phenology | Part\",\n    y = \"Number of Observations\",\n    fill = \"Status\"\n  ) +\n  theme_minimal(base_size = 12)\n\nggplotly(p6, tooltip = \"text\")\n\n\n\n\n\n\n\n\n\n\n\nCode\n# Create a unified dataset with ordered phenological stages\ngrass_combined &lt;- data %&gt;%\n  filter(Family == \"POACEAE\") %&gt;%\n  mutate(Stage = case_when(\n    str_detect(Phenology, \"N\")  ~ \"Newly Emergent\",\n    str_detect(Phenology, \"B\")  ~ \"Budding\",\n    str_detect(Phenology, \"FL\") ~ \"Flowering\",\n    str_detect(Phenology, \"M\")  ~ \"Mature\",\n    str_detect(Phenology, \"C\")  ~ \"Cured\",\n    TRUE ~ NA_character_\n  )) %&gt;%\n  filter(!is.na(Stage)) %&gt;%\n  mutate(Stage = factor(Stage, levels = c(\"Newly Emergent\", \"Budding\", \"Flowering\", \"Mature\", \"Cured\"))) %&gt;%\n  group_by(Stage, Code, Phenology, Part, Status) %&gt;%\n  summarise(\n    mean_DE = mean(DE, na.rm = TRUE),\n    mean_DP = mean(DP, na.rm = TRUE),\n    .groups = \"drop\"\n  ) %&gt;%\n  arrange(Stage, desc(mean_DE), desc(mean_DP)) %&gt;%\n  group_by(Stage) %&gt;%\n  slice_head(n = 20) %&gt;%\n  mutate(combo_label = paste(Code, Phenology, Part, sep = \"_\"))\n\np_combined &lt;- ggplot(grass_combined, aes(\n  x = mean_DE,\n  y = mean_DP,\n  color = Status,\n  text = paste0(\n    \"Stage: \", Stage,\n    \"&lt;br&gt;Code: \", Code,\n    \"&lt;br&gt;Phenology: \", Phenology,\n    \"&lt;br&gt;Part: \", Part,\n    \"&lt;br&gt;Status: \", Status,\n    \"&lt;br&gt;Mean DE: \", round(mean_DE, 2),\n    \"&lt;br&gt;Mean DP: \", round(mean_DP, 2)\n  )\n)) +\n  geom_point(size = 3) +\n  geom_vline(xintercept = 13.5, linetype = \"dashed\", color = \"red\") +\n  geom_hline(yintercept = 7.5, linetype = \"dashed\", color = \"red\") +\n  labs(\n    title = \"Comparing Grass Species by Phenological Stage\",\n    x = \"Mean DE\",\n    y = \"Mean DP\",\n    color = \"Status\"\n  ) +\n  facet_wrap(~ Stage, scales = \"free\") +\n  scale_x_continuous(\n  breaks = function(x) floor(min(x)):ceiling(max(x)),\n  labels = scales::number_format(accuracy = 1)\n) +\nscale_y_continuous(\n  breaks = function(x) floor(min(x)):ceiling(max(x)),\n  labels = scales::number_format(accuracy = 1)\n) +\n  theme_minimal(base_size = 12)\n\nggplotly(p_combined, tooltip = \"text\")"
  },
  {
    "objectID": "posts/post-with-code/suitable.biomass.html",
    "href": "posts/post-with-code/suitable.biomass.html",
    "title": "Suitable Biomass Subset",
    "section": "",
    "text": "Using the subset of my data that I have created, I want to set up some visualizations that I know will be useful once I have the completed version of my data set. All of the values provided in my data set are actual measurements of samples. However I have not completed my linear regression equation that allows me to predict biomass for my unclipped plots. So for now this data represents just my clipped quadrats\n\n\n\n\nCode\nlibrary(tidyverse) \n\n\nWarning: package 'ggplot2' was built under R version 4.3.3\n\n\nWarning: package 'readr' was built under R version 4.3.3\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.3     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nCode\nlibrary(lubridate) \nlibrary(sf)\n\n\nLinking to GEOS 3.11.2, GDAL 3.7.2, PROJ 9.3.0; sf_use_s2() is TRUE\n\n\nCode\nsetwd(\"C:/Users/Alexis Means/Documents/Project/Nutrition Sampling/R code/FRESH/processed.data/\") \ntotals &lt;- read.csv(\"test.totals.csv\")\nfdata &lt;- read.csv(\"test.fdata.csv\") \ntransect &lt;- read.csv(\"../raw.data/transect.csv\") #formatting plot database \n\nplot &lt;- transect %&gt;% rename(TransectID = PlotID, Lat = BeginLat, Long = BeginLong) %&gt;% select(Dates, TransectID, PVT, Lat, Long)\n\nplot &lt;- plot %&gt;% \n  mutate(Dates = mdy(Dates), JulianDay = yday(Dates)) %&gt;%\n  st_as_sf(coords = c(\"Long\", \"Lat\"), crs = 4326) %&gt;% \n  st_transform(crs = 32611) %&gt;% \n  mutate(Easting = st_coordinates(.)[,1], Northing = st_coordinates(.)[,2]) %&gt;% select(JulianDay, TransectID, PVT, Easting, Northing) %&gt;% st_drop_geometry()\n\n#formatting fdata \nfdata &lt;- fdata %&gt;% select(-Max, -Pct_Used, -SuitableBiomass)\n\n#combine all the databases \ndata &lt;- plot %&gt;% \n  left_join(y = totals, by = \"TransectID\") %&gt;% \n  left_join(y = fdata, by = \"TransectID\", relationship = \"one-to-many\") \n\n#I hate the way it is arranged, so I am going to rearrange it \ndata &lt;- data %&gt;% \n  select(JulianDay, PVT, TransectID, Plant.Code, Phenology, Part, Biomass, Biomass_Used, Pct_Suitable_Biomass, SuitableBiomass, DE, TotalDE, AveDE, DP, TotalDP, AveDP, Easting, Northing) \n\n#recategorize PVT\ndata &lt;- data %&gt;%\n  mutate(PVT = recode(PVT, `672` = \"Grassland\", `668` = \"Scabland\", `669` = \"Sagebrush Shrubland\", `674` = \"Sagebrush Steppe\", `682` = \"Riparian\"))\n\nrm(fdata, plot, totals, transect)\n\n\n\n\n\n\n\nCode\n# Calculate the percent of biomass relative to each PVT's total biomass percent\npercentdata &lt;- data %&gt;% group_by(PVT) %&gt;%\n  mutate( total_biomass = sum(SuitableBiomass, na.rm = TRUE),  # Total biomass in each PVT \n          percent_biomass = SuitableBiomass / total_biomass * 100 # Percent biomass relative to total biomass in PVT\n          ) %&gt;% ungroup() \n\n# Boxplot for percent biomass \nggplot(percentdata, aes(x = PVT, y = percent_biomass, fill = PVT)) +\n  geom_boxplot() + \n  labs(title = \"% Suitable Biomass Relative to Total Suitable Biomass by PVT\", x = \"PVT\", y = \"Percent Suitable Biomass\") + \n  theme_minimal() + theme(legend.position = \"none\")\n\n\n\n\n\n\n\n\n\nDE Visualizations\nDP Visualizations\n\n\nCode\n# Create the boxplot\nggplot(data, aes(x = PVT, y = SuitableBiomass, fill = PVT)) + \n  geom_boxplot() + \n  labs(title = \"% Suitable Biomass Relative to Total Suitable Biomass by PVT\", x = \"PVT\", y = \"Suitable Biomass per PVT\") +\n  theme_minimal() + \n  theme(legend.position = \"none\")"
  },
  {
    "objectID": "posts/post-with-code/suitable.biomass.html#data-wrangling",
    "href": "posts/post-with-code/suitable.biomass.html#data-wrangling",
    "title": "Suitable Biomass Subset",
    "section": "",
    "text": "Code\nlibrary(tidyverse) \n\n\nWarning: package 'ggplot2' was built under R version 4.3.3\n\n\nWarning: package 'readr' was built under R version 4.3.3\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.3     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nCode\nlibrary(lubridate) \nlibrary(sf)\n\n\nLinking to GEOS 3.11.2, GDAL 3.7.2, PROJ 9.3.0; sf_use_s2() is TRUE\n\n\nCode\nsetwd(\"C:/Users/Alexis Means/Documents/Project/Nutrition Sampling/R code/FRESH/processed.data/\") \ntotals &lt;- read.csv(\"test.totals.csv\")\nfdata &lt;- read.csv(\"test.fdata.csv\") \ntransect &lt;- read.csv(\"../raw.data/transect.csv\") #formatting plot database \n\nplot &lt;- transect %&gt;% rename(TransectID = PlotID, Lat = BeginLat, Long = BeginLong) %&gt;% select(Dates, TransectID, PVT, Lat, Long)\n\nplot &lt;- plot %&gt;% \n  mutate(Dates = mdy(Dates), JulianDay = yday(Dates)) %&gt;%\n  st_as_sf(coords = c(\"Long\", \"Lat\"), crs = 4326) %&gt;% \n  st_transform(crs = 32611) %&gt;% \n  mutate(Easting = st_coordinates(.)[,1], Northing = st_coordinates(.)[,2]) %&gt;% select(JulianDay, TransectID, PVT, Easting, Northing) %&gt;% st_drop_geometry()\n\n#formatting fdata \nfdata &lt;- fdata %&gt;% select(-Max, -Pct_Used, -SuitableBiomass)\n\n#combine all the databases \ndata &lt;- plot %&gt;% \n  left_join(y = totals, by = \"TransectID\") %&gt;% \n  left_join(y = fdata, by = \"TransectID\", relationship = \"one-to-many\") \n\n#I hate the way it is arranged, so I am going to rearrange it \ndata &lt;- data %&gt;% \n  select(JulianDay, PVT, TransectID, Plant.Code, Phenology, Part, Biomass, Biomass_Used, Pct_Suitable_Biomass, SuitableBiomass, DE, TotalDE, AveDE, DP, TotalDP, AveDP, Easting, Northing) \n\n#recategorize PVT\ndata &lt;- data %&gt;%\n  mutate(PVT = recode(PVT, `672` = \"Grassland\", `668` = \"Scabland\", `669` = \"Sagebrush Shrubland\", `674` = \"Sagebrush Steppe\", `682` = \"Riparian\"))\n\nrm(fdata, plot, totals, transect)"
  },
  {
    "objectID": "posts/post-with-code/suitable.biomass.html#suitable-biomass-visualizations",
    "href": "posts/post-with-code/suitable.biomass.html#suitable-biomass-visualizations",
    "title": "Suitable Biomass Subset",
    "section": "",
    "text": "Code\n# Calculate the percent of biomass relative to each PVT's total biomass percent\npercentdata &lt;- data %&gt;% group_by(PVT) %&gt;%\n  mutate( total_biomass = sum(SuitableBiomass, na.rm = TRUE),  # Total biomass in each PVT \n          percent_biomass = SuitableBiomass / total_biomass * 100 # Percent biomass relative to total biomass in PVT\n          ) %&gt;% ungroup() \n\n# Boxplot for percent biomass \nggplot(percentdata, aes(x = PVT, y = percent_biomass, fill = PVT)) +\n  geom_boxplot() + \n  labs(title = \"% Suitable Biomass Relative to Total Suitable Biomass by PVT\", x = \"PVT\", y = \"Percent Suitable Biomass\") + \n  theme_minimal() + theme(legend.position = \"none\")\n\n\n\n\n\n\n\n\n\nDE Visualizations\nDP Visualizations\n\n\nCode\n# Create the boxplot\nggplot(data, aes(x = PVT, y = SuitableBiomass, fill = PVT)) + \n  geom_boxplot() + \n  labs(title = \"% Suitable Biomass Relative to Total Suitable Biomass by PVT\", x = \"PVT\", y = \"Suitable Biomass per PVT\") +\n  theme_minimal() + \n  theme(legend.position = \"none\")"
  },
  {
    "objectID": "posts/post-with-code/quality.metrics.within.species.html",
    "href": "posts/post-with-code/quality.metrics.within.species.html",
    "title": "Comparing Quality between PVTs",
    "section": "",
    "text": "Code\nlibrary(tidyverse)\n\nquality &lt;- read.csv(\"C:/Users/Alexis Means/Documents/Project/Nutrition Sampling/R code/FRESH/processed.data/4.24.25_cleaned_quality.csv\")\n\ntotalquality &lt;- read.csv(\"C:/Users/Alexis Means/Documents/Project/Nutrition Sampling/R code/FRESH/raw.data/totalquality.csv\")\n\nplant &lt;- read.csv(\"C:/Users/Alexis Means/Documents/Project/Nutrition Sampling/R code/Cleaning/processed.data/plant.csv\")\n\nplant &lt;- plant %&gt;% \n  select(-Spp, -CommonName, -Duration) %&gt;% \n  rename(Spp = Code) %&gt;% \n  select(Spp, Family, Genus, FG_New, Status)\n\ntotalquality &lt;- totalquality %&gt;% \n  rename(UniqueID = ID) %&gt;% \n  select(Date, Transect, UniqueID)\n\nd &lt;- quality %&gt;% \n  left_join(y = totalquality,\n          by = \"UniqueID\") %&gt;% \n  select(Date, Transect, Sample_ID, PVT, Spp, Pheno, Part, Description, DP, DE) %&gt;%\n  distinct(Sample_ID, .keep_all = TRUE) %&gt;% \n  left_join(y = plant, \n            by = \"Spp\") %&gt;% \n  mutate(Date = mdy(Date)) %&gt;% \n  mutate(Season = if_else(Date &lt; ymd(\"2024-06-01\"), \"SP\", \"SU\")) %&gt;% \n  select(-Date) %&gt;% \n  mutate(Description = paste0(Description, \"_\", Season)) \n\nd &lt;- d %&gt;%\nfilter(DE != \"#VALUE!\", DP != \"#VALUE!\")\n\nd &lt;- d %&gt;% \n  mutate(\n    DE = as.numeric(DE),\n    DP = as.numeric(DP),\n    PVT = as.factor(PVT),\n    Season = as.factor(Season),\n    Spp = as.factor(Spp),\n    Pheno = as.factor(Pheno),\n    Part = as.factor(Part)\n  ) \n\nd &lt;- d %&gt;%\n  mutate(\n    Pheno = factor(Pheno, levels = c(\"N\", \"B\", \"FL\", \"FR\", \"M\", \"C\"))\n  )\n\n\n\n\nCode\nsummary_df &lt;- d %&gt;%\n  group_by(PVT, Spp, Pheno, Part, Season) %&gt;%\n  summarise(\n    DE_mean = mean(DE, na.rm = TRUE),\n    DP_mean = mean(DP, na.rm = TRUE),\n    n = n(),\n    .groups = \"drop\"\n  )\n\nView(summary_df)\n\n\n\n\nCode\nseason_comp &lt;- summary_df %&gt;%\n  pivot_wider(\n    names_from = Season,\n    values_from = c(DE_mean, DP_mean)\n  ) %&gt;%\n  mutate(\n    DE_diff = DE_mean_SU - DE_mean_SP,\n    DP_diff = DP_mean_SU - DP_mean_SP\n  )\n\nView(season_comp)\n\n#write.csv(season_comp, \"C:/Users/Alexis Means/Documents/Project/Nutrition Sampling/R code/quality/processed.data/season_comparison.csv\")\n\n\n\n\nCode\npvt_comp &lt;- summary_df %&gt;%\n  pivot_wider(\n    names_from = PVT,\n    values_from = c(DE_mean, DP_mean)\n  )\n\nView(pvt_comp)\n\n#write.csv(pvt_comp, \"C:/Users/Alexis Means/Documents/Project/Nutrition Sampling/R code/quality/processed.data/pvt_comparison.csv\")\n\n\n\n\nCode\nbrte_fl &lt;- d %&gt;%\n  filter(Spp == \"BRTE\", Pheno == \"FL\") %&gt;%\n  mutate(\n    Season = factor(Season, levels = c(\"SP\", \"SU\")),\n    PVT = as.factor(PVT)\n  )\n\n# Pivot DE and DP into long format\nbrte_long &lt;- brte_fl %&gt;%\n  pivot_longer(\n    cols = c(DE, DP),\n    names_to = \"Metric\",\n    values_to = \"Value\"\n  )\n\n# Plot with facets\nggplot(brte_long, aes(x = PVT, y = Value, color = Season)) +\n  geom_jitter(width = 0.2, height = 0, size = 2, alpha = 0.7) +\n  facet_wrap(~ Metric, scales = \"free_y\") +    # separate panels for DE and DP\n  labs(title = \"BRTE DE and DP by PVT and Season (FL)\",\n       y = \"Value\", x = \"PVT\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\n\nCode\nbrte_m &lt;- d %&gt;%\n  filter(Spp == \"BRTE\", Pheno == \"M\") %&gt;%\n  mutate(\n    Season = factor(Season, levels = c(\"SP\", \"SU\")),\n    PVT = as.factor(PVT)\n  )\n\n# Pivot DE and DP into long format\nbrte_m &lt;- brte_m %&gt;%\n  pivot_longer(\n    cols = c(DE, DP),\n    names_to = \"Metric\",\n    values_to = \"Value\"\n  )\n\n# Plot with facets\nggplot(brte_m, aes(x = PVT, y = Value, color = Season)) +\n  geom_jitter(width = 0.2, height = 0, size = 2, alpha = 0.7) +\n  facet_wrap(~ Metric, scales = \"free_y\") +    # separate panels for DE and DP\n  labs(title = \"BRTE DE and DP by PVT and Season (M)\",\n       y = \"Value\", x = \"PVT\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\n\nCode\nbrte_c &lt;- d %&gt;%\n  filter(Spp == \"BRTE\", Pheno == \"C\") %&gt;%\n  mutate(\n    Season = factor(Season, levels = c(\"SP\", \"SU\")),\n    PVT = as.factor(PVT)\n  )\n\n# Pivot DE and DP into long format\nbrte_c &lt;- brte_c %&gt;%\n  pivot_longer(\n    cols = c(DE, DP),\n    names_to = \"Metric\",\n    values_to = \"Value\"\n  )\n\n# Plot with facets\nggplot(brte_c, aes(x = PVT, y = Value, color = Season)) +\n  geom_jitter(width = 0.2, height = 0, size = 2, alpha = 0.7) +\n  facet_wrap(~ Metric, scales = \"free_y\") +    # separate panels for DE and DP\n  labs(title = \"BRTE DE and DP by PVT and Season (C)\",\n       y = \"Value\", x = \"PVT\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\n\nCode\npssp6_n &lt;- d %&gt;%\n  filter(Spp == \"PSSP6\", Pheno == \"N\") %&gt;%\n  mutate(\n    Season = factor(Season, levels = c(\"SP\", \"SU\")),\n    PVT = as.factor(PVT)\n  )\n\n# Pivot DE and DP into long format\npssp6_n &lt;- pssp6_n %&gt;%\n  pivot_longer(\n    cols = c(DE, DP),\n    names_to = \"Metric\",\n    values_to = \"Value\"\n  )\n\n# Plot with facets\nggplot(pssp6_n, aes(x = PVT, y = Value, color = Season)) +\n  geom_jitter(width = 0.2, height = 0, size = 2, alpha = 0.7) +\n  facet_wrap(~ Metric, scales = \"free_y\") +    # separate panels for DE and DP\n  labs(title = \"PSSP6 DE and DP by PVT and Season (N)\",\n       y = \"Value\", x = \"PVT\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\n\nCode\npssp6_fl &lt;- d %&gt;%\n  filter(Spp == \"PSSP6\", Pheno == \"FL\") %&gt;%\n  mutate(\n    Season = factor(Season, levels = c(\"SP\", \"SU\")),\n    PVT = as.factor(PVT)\n  )\n\n# Pivot DE and DP into long format\npssp6_fl &lt;- pssp6_fl %&gt;%\n  pivot_longer(\n    cols = c(DE, DP),\n    names_to = \"Metric\",\n    values_to = \"Value\"\n  )\n\n# Plot with facets\nggplot(pssp6_fl, aes(x = PVT, y = Value, color = Season)) +\n  geom_jitter(width = 0.2, height = 0, size = 2, alpha = 0.7) +\n  facet_wrap(~ Metric, scales = \"free_y\") +    # separate panels for DE and DP\n  labs(title = \"PSSP6 DE and DP by PVT and Season (FL)\",\n       y = \"Value\", x = \"PVT\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\n\nCode\npssp6_m &lt;- d %&gt;%\n  filter(Spp == \"PSSP6\", Pheno == \"M\") %&gt;%\n  mutate(\n    Season = factor(Season, levels = c(\"SP\", \"SU\")),\n    PVT = as.factor(PVT)\n  )\n\n# Pivot DE and DP into long format\npssp6_m &lt;- pssp6_m %&gt;%\n  pivot_longer(\n    cols = c(DE, DP),\n    names_to = \"Metric\",\n    values_to = \"Value\"\n  )\n\n# Plot with facets\nggplot(pssp6_m, aes(x = PVT, y = Value, color = Season)) +\n  geom_jitter(width = 0.2, height = 0, size = 2, alpha = 0.7) +\n  facet_wrap(~ Metric, scales = \"free_y\") +    # separate panels for DE and DP\n  labs(title = \"PSSP6 DE and DP by PVT and Season (M)\",\n       y = \"Value\", x = \"PVT\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\n\nCode\namme_b &lt;- d %&gt;%\n  filter(Spp == \"AMME\", Pheno == \"B\") %&gt;%\n  mutate(\n    Season = factor(Season, levels = c(\"SP\", \"SU\")),\n    PVT = as.factor(PVT)\n  )\n\n# Pivot DE and DP into long format\namme_b &lt;- amme_b %&gt;%\n  pivot_longer(\n    cols = c(DE, DP),\n    names_to = \"Metric\",\n    values_to = \"Value\"\n  )\n\n# Plot with facets\nggplot(amme_b, aes(x = PVT, y = Value, color = Season)) +\n  geom_jitter(width = 0.2, height = 0, size = 2, alpha = 0.7) +\n  facet_wrap(~ Metric, scales = \"free_y\") +    # separate panels for DE and DP\n  labs(title = \"AMME DE and DP by PVT and Season (B)\",\n       y = \"Value\", x = \"PVT\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\n\nCode\nacth7_fl&lt;- d %&gt;%\n  filter(Spp == \"ACTH7\", Pheno == \"FL\") %&gt;%\n  mutate(\n    Season = factor(Season, levels = c(\"SP\", \"SU\")),\n    PVT = as.factor(PVT)\n  )\n\n# Pivot DE and DP into long format\nacth7_fl &lt;- acth7_fl %&gt;%\n  pivot_longer(\n    cols = c(DE, DP),\n    names_to = \"Metric\",\n    values_to = \"Value\"\n  )\n\n# Plot with facets\nggplot(acth7_fl, aes(x = PVT, y = Value, color = Season)) +\n  geom_jitter(width = 0.2, height = 0, size = 2, alpha = 0.7) +\n  facet_wrap(~ Metric, scales = \"free_y\") +    # separate panels for DE and DP\n  labs(title = \"ACTH7 DE and DP by PVT and Season (FL)\",\n       y = \"Value\", x = \"PVT\") +\n  theme_minimal()"
  },
  {
    "objectID": "posts/post-with-code/Veg.Overview.html",
    "href": "posts/post-with-code/Veg.Overview.html",
    "title": "John Day Vegetation Recap",
    "section": "",
    "text": "Code\nlibrary(readr)\nlibrary(readxl)\nlibrary(tidyverse)\nlibrary(sf)\n\ndb &lt;- \"C:/Users/Alexis Means/Documents/Project/Nutrition Sampling/VegDatabases/Working.composition.data.xlsx\"\n\ntransect &lt;- read_excel(db, \"Transect\")\n\ntransect &lt;- transect %&gt;% \n  select(-Personnel, -PVTDescrip, -`Temp (F)`, -Moved, -Notes, -MidLat, -MidLong, -EndLat, -EndLong) %&gt;% \n  mutate(Date = ymd(Date)) %&gt;% \n  rename(lat = BeginLat,\n         long = BeginLong)\n  \n  \nsf &lt;- st_as_sf(transect, coords = c(\"long\", \"lat\"), crs = 4326, remove = FALSE)\nutm &lt;- st_transform(sf, crs = 32610)\n\ntransect$easting &lt;- st_coordinates(utm)[,1]\ntransect$northing&lt;- st_coordinates(utm)[,2]\n\ntransect &lt;- transect %&gt;% \n  mutate(PVT = dplyr::recode(PVT,\n                      `672` = \"Grassland\",\n                      `682` = \"Riparian\",\n                      `668` = \"Scabland\",\n                      `669` = \"Shrubland\",\n                      `674` = \"Intermediate\",\n                      `660` = \"Sparse\"))\n\n\n\n\nBetween 2024 and 2025, we sampled 109 transects across six different vegetation communities in the canyon. Most of these were in Grassland (58 transects), with fewer in Intermediate (13), Riparian (12), Scabland (11), Shrubland (11), and Sparse (4). The number of transects in each community reflected how much of the study area that community covered, based on Landfire data. Since Grassland makes up more than 85% of the site, it naturally had the most sampling, while the other communities only covered about 1–5% each. As you all know, there are plenty of rocky(sparse) areas that sheep often use, but because they were tough to get to and didn’t usually have much plant diversity, we ended up sampling fewer transects within these communities. Still, I think the sampling we did was enough to capture what’s going on in that community.\n\n\nCode\nlibrary(ggplot2)\n\nggplot(transect, aes (x = PVT))+\n  geom_bar(fill = \"darkblue\")+\n  labs(title = \"Number of Transects Sampled\",\n       x = \"PVT Type\",\n       y = \"Count\") +\n  theme_grey()\n\n\n\n\n\n\n\n\n\n\n\n\nIn our first year, we focused heavily on the grassland community and sampled transects more strictly in proportion to the area each vegetation community covered. Grassland was sampled two to three times a week, with fewer visits to the other communities, which didn’t give us much coverage outside grassland. In the second year, we shifted more effort toward the other vegetation communities to better capture their phenology timing.\nThe first graph shows the timing of transects were sampled in both 2024 and 2025, and the second gives a better picture of how the sampling timing overlapped for each vegetation community in both years. Overall, I think we did a good job filling gaps in the smaller (but equally important) vegetation communities, giving us a clearer picture of how phenology timing varies across them.\n\n\nCode\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(lubridate)\n\ntransect &lt;- transect %&gt;% \n  mutate (Year = year(Date))\n\nggplot(transect, aes(x = Date, y = PVT)) +\n         geom_point(color = \"blue\")+\n         scale_x_date(date_labels = \"%b\")+\n         labs(title = \"Sampling Dates\",\n              x = \"Month\",\n              y = \"PVT Category\") +\n         facet_wrap(~ Year, scales = \"free_x\") +\n         theme_bw()\n\n\n\n\n\n\n\n\n\n\n\nCode\ntransect &lt;- transect %&gt;% \n mutate(DOY = yday(Date),\n        Year = factor(year(Date)))\n\nggplot(transect, aes(x = DOY, y = PVT, color = Year)) +\n         geom_point()+\n         scale_x_continuous(breaks = c( 75, 105, 136, 166, 197, 228),\n                      labels = c(\"March\", \"Apr\", \"May\", \"June\", \"July\", \"Aug\"))+\n         labs(title = \"Sampling Dates\",\n              x = \"Month\",\n              y = \"PVT Category\",\n              color = \"Year\") +\n         theme_bw()\n\n\n\n\n\n\n\n\n\n\n\n\nI also wanted to share a visual of where our transects were distributed. In the first year, since we didn’t yet have collar data on summer movements, we focused on a boundary within two miles of the river, prioritizing points closer to the river over those further away on top of the canyon.\nIn the second year, we refined the boundary using GPS data from the previous summer. The shape stayed similar but narrowed further into the canyon. The extra floats were a big help for reaching those tougher spots at the bottom of the canyon (thanks again to everyone who helped with those!). Overall, I’m really happy with how the distribution turned out. The only areas with lighter sampling were on the West side where access was limited, but the floats went a long way toward filling in those gaps.\n\n\nCode\nlibrary(ggmap)\n\n#plot without map in background\nggplot(transect, aes(x = easting, y = northing, color = PVT))+\n  geom_point(size = 2, alpha = 0.8)+\n  scale_color_manual (values = c(\n    \"Grassland\" = \"green\",\n    \"Riparian\" = \"blue\",\n    \"Sparse\" = \"brown\",\n    \"Intermediate\" = \"yellow\",\n    \"Scabland\" = \"purple\",\n    \"Shrubland\" = \"red\"\n  ))+\n  labs(title = \"Sample locations within the John Day\",\n       x = \"Easting\",\n       y = \"Northing\",\n       color = \"Vegetation Type\")+\n  theme_minimal()+\n  theme(legend.position = \"right\")"
  },
  {
    "objectID": "posts/post-with-code/Veg.Overview.html#sampled-transects",
    "href": "posts/post-with-code/Veg.Overview.html#sampled-transects",
    "title": "Project Recap",
    "section": "",
    "text": "number of each PVT sampled\ntiming of sampling\nmap of sampled transects\n\n\nCode\nlibrary(readr)\nlibrary(readxl)\nlibrary(tidyverse)\nlibrary(sf)\n\ndb &lt;- \"C:/Users/Alexis Means/Documents/Project/Nutrition Sampling/VegDatabases/Working.composition.data.xlsx\"\n\ntransect &lt;- read_excel(db, \"Transect\")\n\ntransect &lt;- transect %&gt;% \n  select(-Personnel, -PVTDescrip, -`Temp (F)`, -Moved, -Notes, -MidLat, -MidLong, -EndLat, -EndLong) %&gt;% \n  mutate(Date = ymd(Date)) %&gt;% \n  rename(lat = BeginLat,\n         long = BeginLong)\n  \n  \nsf &lt;- st_as_sf(transect, coords = c(\"long\", \"lat\"), crs = 4326, remove = FALSE)\nutm &lt;- st_transform(sf, crs = 32610)\n\ntransect$easting &lt;- st_coordinates(utm)[,1]\ntransect$northing&lt;- st_coordinates(utm)[,2]\n\ntransect &lt;- transect %&gt;% \n  mutate(PVT = recode(PVT,\n                      '672' = \"Grassland\",\n                      '682' = \"Riparian\",\n                      '668' = \"Scabland\",\n                      '669' = \"Shrubland\",\n                      '674' = \"Intermediate\",\n                      '660' = \"Sparse\"))\n\n\n\n\nCode\nlibrary(ggplot2)\n\nggplot(transect, aes (x = PVT))+\n  geom_bar(fill = \"blue\")+\n  labs(title = \"Number of Transects Sampled\",\n       x = \"PVT Type\",\n       y = \"Count\") +\n  theme_grey()\n\n\n\n\n\n\n\n\n\n\n\nCode\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(lubridate)\n\ntransect &lt;- transect %&gt;% \n  mutate (Year = year(Date))\n\nggplot(transect, aes(x = Date, y = PVT)) +\n         geom_point(color = \"blue\")+\n         scale_x_date(date_labels = \"%b\")+\n         labs(title = \"Sampling Dates\",\n              x = \"Month\",\n              y = \"PVT Category\") +\n         facet_wrap(~ Year, scales = \"free_x\") +\n         theme_bw()\n\n\n\n\n\n\n\n\n\n\n\nCode\ntransect &lt;- transect %&gt;% \n mutate(DOY = yday(Date),\n        Year = factor(year(Date)))\n\nggplot(transect, aes(x = DOY, y = PVT, color = Year)) +\n         geom_point()+\n         scale_x_continuous(breaks = c( 75, 105, 136, 166, 197, 228),\n                      labels = c(\"March\", \"Apr\", \"May\", \"June\", \"July\", \"Aug\"))+\n         labs(title = \"Sampling Dates\",\n              x = \"Month\",\n              y = \"PVT Category\",\n              color = \"Year\") +\n         theme_bw()\n\n\n\n\n\n\n\n\n\n\n\nCode\nlibrary(ggmap)\n\n#plot without map in background\nggplot(transect, aes(x = easting, y = northing, color = PVT))+\n  geom_point(size = 2, alpha = 0.8)+\n  scale_color_manual (values = c(\n    \"Grassland\" = \"green\",\n    \"Riparian\" = \"blue\",\n    \"Sparse\" = \"brown\",\n    \"Intermediate\" = \"yellow\",\n    \"Scabland\" = \"purple\",\n    \"Shrubland\" = \"red\"\n  ))+\n  labs(title = \"Sample locations within the John Day\",\n       x = \"Easting\",\n       y = \"Northing\",\n       color = \"Vegetation Type\")+\n  theme_minimal()+\n  theme(legend.position = \"right\")"
  },
  {
    "objectID": "posts/post-with-code/Veg.Overview.html#green-up-timing",
    "href": "posts/post-with-code/Veg.Overview.html#green-up-timing",
    "title": "Project Recap",
    "section": "",
    "text": "Code\ncomp &lt;- read_excel(db, \"Composition\")\n\ncomp &lt;- comp %&gt;%\n  mutate(Date = ymd(Date)) %&gt;% \n   mutate(DOY = yday(Date),\n        Month = month(Date, label = TRUE),\n        Year = factor(year(Date))) %&gt;% \n    filter(!Spp %in% c(\"LITTER\", \"LICHEN\", \"ROCKS\", \"WATER\", \"EARTH\", \"DEADFALL\", \"NA\")) %&gt;% \n  mutate(PVT = substr(PlotID, 4, 6)) %&gt;% \n  mutate(Pheno = na_if(Pheno, \"NA\")) %&gt;% \n  filter(!is.na(Pheno))\n\n\ncomp &lt;- comp %&gt;% \n  mutate(\n    Pheno = case_when(\n      Pheno == \"N\" ~ \"New\",\n      Pheno == \"B\" ~ \"Budding\",\n      Pheno == \"FL\" ~ \"Flowering\",\n      Pheno == \"FR\" ~ \"Fruiting\",\n      Pheno == \"M\" ~ \"Mature\",\n      Pheno == \"C\" ~ \"Cured\",\n      TRUE ~ Pheno\n    ),\n    PVT = case_when(\n      PVT == \"672\" ~ \"Grassland\",\n      PVT == \"682\" ~ \"Riparian\",\n      PVT == \"660\" ~ \"Sparse\",\n      PVT == \"668\" ~ \"Scabland\",\n      PVT == \"669\" ~ \"Shrubland\",\n      PVT == \"674\" ~ \"Intermediate\",\n      \n    )\n  ) \n\ncomp$Pheno &lt;- factor(comp$Pheno, \n                       levels = c(\"New\", \"Budding\", \"Flowering\", \"Fruiting\", \"Mature\", \"Cured\"),\n                       ordered = TRUE)\n\ncomp %&gt;% \n  count(Month, Pheno) %&gt;%\n  group_by(Month) %&gt;%\n  mutate(prop = n / sum(n)) %&gt;%\n  ggplot(aes(x = Month, y = prop, fill = Pheno)) +\n  geom_col() +\n  scale_y_continuous(labels = scales::percent) +\n  labs(y = \"Proportion\", x = \"Month\", fill = \"Phenology stage\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\n\nCode\ncomp %&gt;%\n  count(PVT, Month, Pheno) %&gt;%\n  group_by(PVT, Month) %&gt;%\n  mutate(prop = n / sum(n)) %&gt;%\n  ggplot(aes(x = Month, y = prop, fill = Pheno)) +\n  geom_col() +\n  scale_y_continuous(labels = scales::percent) +\n  labs(y = \"Proportion\", x = \"Month\", color = \"Phenology stage\") +\n  facet_wrap(~PVT, ncol = 2) +   # adjust ncol to control layout\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\n\nCode\ncomp %&gt;%\n  count(Month, Pheno) %&gt;%\n  group_by(Month) %&gt;%\n  mutate(prop = n / sum(n)) %&gt;%\n  ggplot(aes(x = Month, y = prop, color = Pheno, group = Pheno)) +\n  geom_smooth(se = FALSE, method = \"loess\", span = 0.8, size = 1.2) +\n  geom_point(size = 2) +\n  scale_y_continuous(labels = scales::percent) +\n  labs(y = \"Proportion\", x = \"Month\", color = \"Phenology stage\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\n\nCode\ncomp &lt;- comp %&gt;%\n  mutate(PVT = substr(PlotID, 4, 6))\n\ncomp %&gt;%\n  count(PVT, Month, Pheno) %&gt;%\n  group_by(PVT, Month) %&gt;%\n  mutate(prop = n / sum(n)) %&gt;%\n  ggplot(aes(x = Month, y = prop, color = Pheno, group = Pheno)) +\n  geom_smooth(se = FALSE, method = \"loess\", span = 0.8, size = 1.2) +\n  geom_point(size = 2) +\n  scale_y_continuous(labels = scales::percent) +\n  labs(y = \"Proportion\", x = \"Month\", color = \"Phenology stage\") +\n  facet_wrap(~PVT, ncol = 2) +   # adjust ncol to control layout\n  theme_minimal()\n\n\n\n\n\n\n\n\n\ntiming vs number of species observed in each phenological stage\ntotal biomass overtime\nhow this aligns with lambing pulse (April - Mid May)"
  },
  {
    "objectID": "posts/post-with-code/Veg.Overview.html#quality-metrics",
    "href": "posts/post-with-code/Veg.Overview.html#quality-metrics",
    "title": "Veg Overview",
    "section": "",
    "text": "This section looks at the quality metrics from the 2024 season. The DE and DP values here are still rough estimates for each sample. I used general values to get a preliminary sense of these metrics while waiting on additional nutrient information needed for a correction factor. That said, these estimates are mostly in line with what I expect the final values to be. The biggest shifts will occur in species with high tannin contents such as sagebrush.\nAll results here are based on the 2024 samples. The 2025 quality data are still being processed, and once complete, we’ll have much more information—especially for the riparian areas.\n\n\nThese first graphs shows the overall trend in quality metrics for different functional groups we observed. The dashed lines represent the energetic demand thresholds for a lactating female sheep. In theory, any species falling in the upper-right quadrant meets these energetic demands in a gram of forage. That said, these metrics don’t account for biomass, so take them with a grain of salt—some species may still make a substantial contribution to the total suitable biomass when available in larger quantities.\nI’m still working on biomass predictions, which will help determine how much suitable forage exists within the areas we sampled before scaling up to the landscape level. I hope to have those results soon.\n(this one is interactive too)\n\n\nCode\ndb &lt;- \"C:/Users/Alexis Means/Documents/Project/Nutrition Sampling/VegDatabases/Working.composition.data.xlsx\"\nq &lt;- \"C:/Users/Alexis Means/Documents/Project/Nutrition Sampling/R code/quality/processed.data/24_quality_results.xlsx\"\n\nquality &lt;- read_excel(q, \"24_quality_results\")\nplant &lt;- read_excel(db, \"PlantList\")\n\nplant &lt;- plant %&gt;% \n  select(Spp, Family, Genus, Species, FunctionalGroup, FG_New, Status)\n\nquality &lt;- quality %&gt;% \n  select(Sample_ID, PVT, Spp, Pheno, Part, DP, DE) %&gt;% \n  left_join(plant, by = \"Spp\")\n\ngrass &lt;- quality %&gt;% \n  filter(str_detect(FunctionalGroup, \"G\")) %&gt;% \n  filter(Spp != \"UNK GRASS\")\n\n\n# Create ggplot with dashed reference lines\np &lt;- ggplot(grass, aes(\n  x = DE,\n  y = DP,\n  color = Status,\n  text = paste0( \n    \"Spp: \", Spp, \n    \"&lt;br&gt;Pheno: \", Pheno, \n    \"&lt;br&gt;Part: \", Part,\n    \"&lt;br&gt;Status: \", Status,\n    \"&lt;br&gt;DE: \", round(DE, 2),\n    \"&lt;br&gt;DP: \", round(DP, 2)\n  )\n)) +\n  geom_point(size = 4) +\n  geom_vline(xintercept = 11.5, linetype = \"dashed\", color = \"gray50\") +\n  geom_hline(yintercept = 7.5, linetype = \"dashed\", color = \"gray50\") +\n  labs(\n    title = \"Overall Quality Metrics of Observed Grasses\",\n    x = \"DE\",\n    y = \"DP\",\n    color = \"Status\"\n  ) +\n  theme_minimal(base_size = 12)\n\n# Convert to interactive Plotly plot\np_plotly &lt;- ggplotly(p, tooltip = \"text\") %&gt;%\n  layout(\n    showlegend = TRUE,\n    legend = list(\n      title = list(text = \"\"),\n      orientation = \"h\",   # horizontal\n      x = 0.5,             # center horizontally\n      y = -0.2,            # below the x-axis\n      xanchor = \"center\",\n      yanchor = \"top\"\n    )\n  )\n\np_plotly\n\n\n\n\n\n\nThis graph is a zoomed-in look at the previous one, focusing only on the species that landed in the upper right quadrant. I think the “VUMIM_C” and “AGCR_FL” values might be outliers—at least for “VUMIM_C”, I have other quality metrics that fall below both the DE and DP thresholds, which is more in line with what I’d expect.\nAs expected, cheatgrass and ripgut brome came out on top for grass species with the highest quality metrics, with bluebunch wheatgrass and basin wildrye not far behind. It’s worth noting that all of these measurements were taken when the species were still in their newly emergent stage.\n(this one is not sorry)\n\n\nCode\nlibrary(ggrepel)  # optional, for non-overlapping labels\n\n# Create plot\nggplot(grass, aes(x = DE, y = DP)) +\n  geom_point(aes(color = Status), size = 3) +  # points colored by Status\n  # Label each point\n  geom_text_repel(aes(label = paste(Spp, Pheno, sep = \"_\")), size = 3) +  # uses ggrepel to avoid overlap\n  # Set axis starting points\n  xlim(11, max(grass$DE) + 0.5) +\n  ylim(7, max(grass$DP) + 0.5) +\n  labs(\n    title = \"Top Grass Species\",\n    x = \"DE\",\n    y = \"DP\",\n    color = \"Status\"\n  ) +\n  theme_minimal(base_size = 12)\n\n\n\n\n\n\n\n\n\n\n\n\nLooking at the forbs is a little more chaotic. There are more species that meet both the DE and DP thresholds, but there are still a substantial number that fall below those thresholds.\n\n\nCode\nforb &lt;- quality %&gt;% \n  filter(str_detect(FunctionalGroup, \"F\"))\n\n\np2 &lt;- ggplot(forb, aes(\n  x = DE,\n  y = DP,\n  color = Status,\n  text = paste0( \n    \"Spp: \", Spp, \n    \"&lt;br&gt;Pheno: \", Pheno, \n    \"&lt;br&gt;Part: \", Part,\n    \"&lt;br&gt;Status: \", Status,\n    \"&lt;br&gt;DE: \", round(DE, 2),\n    \"&lt;br&gt;DP: \", round(DP, 2)\n  )\n)) +\n  geom_point(size = 3) +\n  geom_vline(xintercept = 11.5, linetype = \"dashed\", color = \"gray50\") +\n  geom_hline(yintercept = 7.5, linetype = \"dashed\", color = \"gray50\") +\n  labs(\n    title = \"Overall Quality Metrics of Observed Forbs\",\n    x = \"DE\",\n    y = \"DP\",\n    color = \"Status\"\n  ) +\n  theme_minimal(base_size = 12) \n\n# Convert to interactive Plotly plot\n\np2_plotly &lt;- ggplotly(p2, tooltip = \"text\") %&gt;%\n  layout(\n    legend = list(\n      title = list(text = \"\"),\n      orientation = \"h\",   # horizontal\n      x = 0.5,             # center horizontally\n      y = -0.2,            # below the x-axis\n      xanchor = \"center\",\n      yanchor = \"top\"\n    )\n  )\n\np2_plotly\n\n\n\n\n\n\nInstead of making everyone test their knowledge of plant codes, I put together a quick cheat sheet for the species included in this figure.\nIt is interesting to see that most of the species that fall above both the DE and DP thresholds are various Lomatiums and Balsamroots which are everywhere in the spring and typically what we observed the sheep snacking on the most during our hours of observation. There also is several phenologies of the Lupine species—but obviously those aren’t edible for the sheep.\n\n\nCode\n# Create plot\nggplot(forb, aes(x = DE, y = DP)) +\n  geom_point(aes(color = Status), size = 3) +  # points colored by Status\n  # Label each point\n  geom_text_repel(aes(label = paste(Spp, Pheno, sep = \"_\")), size = 3) +  # uses ggrepel to avoid overlap\n  # Set axis starting points\n  xlim(11, max(grass$DE) + 0.5) +\n  ylim(7, 18) +\n  labs(\n    title = \"Top Forb Species\",\n    x = \"DE\",\n    y = \"DP\",\n    color = \"Status\"\n  ) +\n  theme_minimal(base_size = 12)\n\n\n\n\n\n\n\n\n\n\n\n\nLastly I lumped all of the Tree/Vine/Shrubs into one group. Again there are consistent low metrics for most of the species.\n\n\nCode\nshrub &lt;- quality %&gt;% \n filter(FunctionalGroup %in% c(\"ES\", \"S\", \"T\", \"V\"))\n\n\np3 &lt;- ggplot(shrub, aes(\n  x = DE,\n  y = DP,\n  color = Status,   # still mapped for tooltip/legend\n  text = paste0( \n    \"Spp: \", Spp, \n    \"&lt;br&gt;Pheno: \", Pheno, \n    \"&lt;br&gt;Part: \", Part,\n    \"&lt;br&gt;Status: \", Status,\n    \"&lt;br&gt;DE: \", round(DE, 2),\n    \"&lt;br&gt;DP: \", round(DP, 2)\n  )\n)) +\n  geom_point(size = 4, color = \"#12bec7\") +\n  geom_vline(xintercept = 11.5, linetype = \"dashed\", color = \"gray50\") +\n  geom_hline(yintercept = 7.5, linetype = \"dashed\", color = \"gray50\") +\n  labs(\n    title = \"Overall Quality Metrics of Observed Shrubs/Trees\",\n    x = \"DE\",\n    y = \"DP\",\n    color = \"Status\"\n  ) +\n  theme_minimal(base_size = 12)\n\np3_plotly &lt;- ggplotly(p3, tooltip = \"text\") %&gt;%\n  layout(\n    legend = list(\n      title = list(text = \"\"),\n      orientation = \"h\",   # horizontal\n      x = 0.5,             # center horizontally\n      y = -0.2,            # below the x-axis\n      xanchor = \"center\",\n      yanchor = \"top\"\n    )\n  )\n\np3_plotly\n\n\n\n\n\n\n\n\nCode\n# Create plot\nggplot(shrub, aes(x = DE, y = DP)) +\n  geom_point(aes(color = Status), size = 3) +  # points colored by Status\n  # Label each point\n  geom_text_repel(aes(label = paste(Spp, Pheno, sep = \"_\")), size = 3) +  # uses ggrepel to avoid overlap\n  # Set axis starting points\n  xlim(11, max(grass$DE) + 0.5) +\n  ylim(7, max(grass$DP) + 0.5) +\n  labs(\n    title = \"Top Shrub or Tree Species\",\n    x = \"DE\",\n    y = \"DP\",\n    color = \"Status\"\n  ) +\n  theme_minimal(base_size = 12)\n\n\n\n\n\n\n\n\n\nIt was interesting to notice that digestible protein values stayed pretty low across most species, no matter the functional group or phenology stage. This matches up with what Katey was seeing in Asotin Creek. I’m hoping the suitable biomass measurements will give us a better idea of how this population does so well even when many of the plants don’t seem all that nutrient-rich. My guess is that the sheer volume they’re able to consume of some of the species has a lot to do with it."
  },
  {
    "objectID": "posts/post-with-code/Veg.Overview.html#invasive-vs-native-species",
    "href": "posts/post-with-code/Veg.Overview.html#invasive-vs-native-species",
    "title": "Veg Overview",
    "section": "",
    "text": "In this section I wanted to compare the quality metrics of the native and non-native (invasive) species that we observed within our transects, specifically the grasses. This first graph is similar to the sections above but splits apart the native and non-native grass species in all phenological stages. This graph has the same outliers as the previous graph so the “AGCR” and “VUMIM” measurements within the top right quadrants should be ignored.\nAlthough more non-native grass species meet the energetic thresholds than native species (two versus one lol) , the quality metrics of native species appear to decline less sharply.\n\n\nCode\n# ggplot with facets\ninvasive &lt;- ggplot(grass, aes(\n  x = DE,\n  y = DP,\n  color = Status,\n  text = paste0(\n    \"Spp: \", Spp,\n    \"&lt;br&gt;Pheno: \", Pheno,\n    \"&lt;br&gt;Part: \", Part,\n    \"&lt;br&gt;Status: \", Status,\n    \"&lt;br&gt;DE: \", round(DE, 2),\n    \"&lt;br&gt;DP: \", round(DP, 2)\n  )\n)) +\n  geom_point(size = 3) +\n  facet_wrap(~Status, scales = \"fixed\") +   # same x and y for both facets\n  geom_vline(xintercept = 11.5, linetype = \"dashed\", color = \"gray50\") +\n  geom_hline(yintercept = 7.5, linetype = \"dashed\", color = \"gray50\") +\n  labs(\n    title = \"Grass Quality Metrics by Status\",\n    x = \"DE\",\n    y = \"DP\"\n  ) +\n  coord_cartesian(xlim = c(9, 14), ylim = c(-2, 20)) +  # set same x and y limits\n  theme_minimal(base_size = 12)\n\n# Convert to interactive plotly\nggplotly(invasive, tooltip = \"text\")\n\n\n\n\n\n\nI also looked at whether the percentage of invasive species observed at our transects increased at any point during the season. Overall, the number of non-native species remained fairly consistent throughout the year, with a small spike in the spring. However, because fewer transects were sampled in April, it is unclear whether this pattern accurately reflects conditions on the landscape at that time.\n\n\nCode\nstatus &lt;- plant %&gt;% \n  select(Spp, Status, FunctionalGroup, FG_New)\n\ndf &lt;- comp %&gt;% \n  left_join(status, by = \"Spp\")\n\ndf &lt;- df %&gt;% \n    mutate(Pheno = na_if(Status, \"NA\")) %&gt;% \n  filter(!is.na(Status))\n\ndf %&gt;%\n  count(Month, Status) %&gt;%\n  group_by(Month) %&gt;%\n  mutate(prop = n / sum(n)) %&gt;%\n  ggplot(aes(x = Month, y = prop, fill = Status)) +\n  geom_col(position = \"stack\") +\n  scale_y_continuous(labels = scales::percent) +\n  labs(\n    x = \"Month\",\n    y = \"Proportion\",\n    fill = \"Status\"\n  ) +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\nI also examined how native and non-native species compared across different vegetation communities. The patterns were fairly consistent across communities, although I did observe a slightly higher abundance of non-native species in riparian areas, likely due to increased disturbance from animal traffic and run-off.\n\n\nCode\ndf %&gt;%\n  count(PVT, Status) %&gt;%\n  group_by(PVT) %&gt;%\n  mutate(prop = n / sum(n)) %&gt;%\n  ggplot(aes(x = PVT, y = prop, fill = Status)) +\n  geom_col(position = \"stack\") +\n  scale_y_continuous(labels = scales::percent) +\n  labs(\n    x = \"PVT\",\n    y = \"Proportion\",\n    fill = \"Status\"\n  ) +\n  theme_minimal()"
  },
  {
    "objectID": "posts/post-with-code/Veg.Overview.html#next-steps",
    "href": "posts/post-with-code/Veg.Overview.html#next-steps",
    "title": "Veg Overview",
    "section": "",
    "text": "Complete biomass predictions so I can determine suitable biomass using the FRESH model\nFinish extracting covariates to include within my GAM (the nutritional landscape map)\nBegin building HSF and iSSA"
  },
  {
    "objectID": "posts/post-with-code/Veg.Overview.html#sample-timing",
    "href": "posts/post-with-code/Veg.Overview.html#sample-timing",
    "title": "Veg Overview",
    "section": "",
    "text": "Code\nlibrary(readr)\nlibrary(readxl)\nlibrary(tidyverse)\nlibrary(sf)\n\ndb &lt;- \"C:/Users/Alexis Means/Documents/Project/Nutrition Sampling/VegDatabases/Working.composition.data.xlsx\"\n\ntransect &lt;- read_excel(db, \"Transect\")\n\ntransect &lt;- transect %&gt;% \n  select(-Personnel, -PVTDescrip, -`Temp (F)`, -Moved, -Notes, -MidLat, -MidLong, -EndLat, -EndLong) %&gt;% \n  mutate(Date = ymd(Date)) %&gt;% \n  rename(lat = BeginLat,\n         long = BeginLong)\n  \n  \nsf &lt;- st_as_sf(transect, coords = c(\"long\", \"lat\"), crs = 4326, remove = FALSE)\nutm &lt;- st_transform(sf, crs = 32610)\n\ntransect$easting &lt;- st_coordinates(utm)[,1]\ntransect$northing&lt;- st_coordinates(utm)[,2]\n\ntransect &lt;- transect %&gt;% \n  mutate(PVT = dplyr::recode(PVT,\n                      `672` = \"Grassland\",\n                      `682` = \"Riparian\",\n                      `668` = \"Scabland\",\n                      `669` = \"Shrubland\",\n                      `674` = \"Intermediate\",\n                      `660` = \"Sparse\"))\n\n\n\n\nBetween 2024 and 2025, we sampled 109 transects across six different vegetation communities in the canyon. Most of these were in Grassland (58 transects), with fewer in Intermediate (13), Riparian (12), Scabland (11), Shrubland (11), and Sparse (4). The number of transects in each community reflected how much of the study area that community covered, based on Landfire data. Since Grassland makes up more than 85% of the site, it naturally had the most sampling, while the other communities only covered about 1–5% each. As you all know, there are plenty of rocky(sparse) areas that sheep often use, but because they were tough to get to and didn’t usually have much plant diversity, we ended up sampling fewer transects within these communities. Still, I think the sampling we did was enough to capture what’s going on in that community.\n\n\nCode\nlibrary(ggplot2)\n\nggplot(transect, aes (x = PVT))+\n  geom_bar(fill = \"darkblue\")+\n  labs(title = \"Number of Transects Sampled\",\n       x = \"PVT Type\",\n       y = \"Count\") +\n  theme_grey()\n\n\n\n\n\n\n\n\n\n\n\n\nIn our first year, we focused heavily on the grassland community and sampled transects more strictly in proportion to the area each vegetation community covered. Grassland was sampled two to three times a week, with fewer visits to the other communities, which didn’t give us much coverage outside grassland. In the second year, we shifted more effort toward the other vegetation communities to better capture their phenology timing.\nThe first graph shows the timing of transects were sampled in both 2024 and 2025, and the second gives a better picture of how the sampling timing overlapped for each vegetation community in both years. Overall, I think we did a good job filling gaps in the smaller (but equally important) vegetation communities, giving us a clearer picture of how phenology timing varies across them.\n\n\nCode\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(lubridate)\n\ntransect &lt;- transect %&gt;% \n  mutate (Year = year(Date))\n\nggplot(transect, aes(x = Date, y = PVT)) +\n         geom_point(color = \"blue\")+\n         scale_x_date(date_labels = \"%b\")+\n         labs(title = \"Sampling Dates\",\n              x = \"Month\",\n              y = \"PVT Category\") +\n         facet_wrap(~ Year, scales = \"free_x\") +\n         theme_bw()\n\n\n\n\n\n\n\n\n\n\n\nCode\ntransect &lt;- transect %&gt;% \n mutate(DOY = yday(Date),\n        Year = factor(year(Date)))\n\nggplot(transect, aes(x = DOY, y = PVT, color = Year)) +\n         geom_point()+\n         scale_x_continuous(breaks = c( 75, 105, 136, 166, 197, 228),\n                      labels = c(\"March\", \"Apr\", \"May\", \"June\", \"July\", \"Aug\"))+\n         labs(title = \"Sampling Dates\",\n              x = \"Month\",\n              y = \"PVT Category\",\n              color = \"Year\") +\n         theme_bw()\n\n\n\n\n\n\n\n\n\n\n\n\nI also wanted to share a visual of where our transects were distributed. In the first year, since we didn’t yet have collar data on summer movements, we focused on a boundary within two miles of the river, prioritizing points closer to the river over those further away on top of the canyon.\nIn the second year, we refined the boundary using GPS data from the previous summer. The shape stayed similar but narrowed further into the canyon. The extra floats were a big help for reaching those tougher spots at the bottom of the canyon (thanks again to everyone who helped with those!). Overall, I’m really happy with how the distribution turned out. The only areas with lighter sampling were on the West side where access was limited, but the floats went a long way toward filling in those gaps.\n\n\nCode\nlibrary(ggmap)\n\n#plot without map in background\nggplot(transect, aes(x = easting, y = northing, color = PVT))+\n  geom_point(size = 2, alpha = 0.8)+\n  scale_color_manual (values = c(\n    \"Grassland\" = \"green\",\n    \"Riparian\" = \"blue\",\n    \"Sparse\" = \"brown\",\n    \"Intermediate\" = \"yellow\",\n    \"Scabland\" = \"purple\",\n    \"Shrubland\" = \"red\"\n  ))+\n  labs(title = \"Sample locations within the John Day\",\n       x = \"Easting\",\n       y = \"Northing\",\n       color = \"Vegetation Type\")+\n  theme_minimal()+\n  theme(legend.position = \"right\")"
  },
  {
    "objectID": "posts/post-with-code/Veg.Overview.html#timing-of-green-up",
    "href": "posts/post-with-code/Veg.Overview.html#timing-of-green-up",
    "title": "Veg Overview",
    "section": "",
    "text": "Next, I wanted to look at the overall timing of green-up in the canyon. The first graph combines results from both summers. As expected, the peak of “New” growth is around March–April, while the biggest transition to “Cured” plants occurs around May–June. It’s neat to see this line up with what Emily found regarding the birth pulse, with the most new (and highly nutritious) forage coinciding with peak lambing.\nI also compared the timing between years. Overall, the trends look fairly similar. Anecdotally, I thought green-up in 2025 might have moved faster due to lower rainfall, but that doesn’t seem to be reflected in the month-to-month observations.\n(P.S. The graphs for this section are interactive! If you are interested, you can hover over each box to see the actual percentages of each group and compare them across months.)\n\n\nCode\nlibrary(plotly)\ncomp &lt;- read_excel(db, \"Composition\")\n\ncomp &lt;- comp %&gt;%\n  mutate(Date = ymd(Date)) %&gt;% \n   mutate(DOY = yday(Date),\n        Month = month(Date, label = TRUE),\n        Year = factor(year(Date))) %&gt;% \n    filter(!Spp %in% c(\"LITTER\", \"LICHEN\", \"ROCKS\", \"WATER\", \"EARTH\", \"DEADFALL\", \"NA\")) %&gt;% \n  mutate(PVT = substr(PlotID, 4, 6)) %&gt;% \n  mutate(Pheno = na_if(Pheno, \"NA\")) %&gt;% \n  filter(!is.na(Pheno))\n\n\ncomp &lt;- comp %&gt;% \n  mutate(\n    Pheno = case_when(\n      Pheno == \"N\" ~ \"New\",\n      Pheno == \"B\" ~ \"Budding\",\n      Pheno == \"FL\" ~ \"Flowering\",\n      Pheno == \"FR\" ~ \"Fruiting\",\n      Pheno == \"M\" ~ \"Mature\",\n      Pheno == \"C\" ~ \"Cured\",\n      TRUE ~ Pheno\n    ),\n    PVT = case_when(\n      PVT == \"672\" ~ \"Grassland\",\n      PVT == \"682\" ~ \"Riparian\",\n      PVT == \"660\" ~ \"Sparse\",\n      PVT == \"668\" ~ \"Scabland\",\n      PVT == \"669\" ~ \"Shrubland\",\n      PVT == \"674\" ~ \"Intermediate\",\n      \n    )\n  ) \n\ncomp$Pheno &lt;- factor(comp$Pheno, \n                       levels = c(\"New\", \"Budding\", \"Flowering\", \"Fruiting\", \"Mature\", \"Cured\"),\n                       ordered = TRUE)\n\ncomp_plot &lt;- comp %&gt;%\n  count(Month, Pheno) %&gt;%\n  group_by(Month) %&gt;%\n  mutate(prop = n / sum(n)) %&gt;%\n  ungroup()\n\n\np1 &lt;-  ggplot(comp_plot, aes(x = Month, y = prop, fill = Pheno,\n                           text = paste(\"Phenology:\", Pheno,\n                                        \"&lt;br&gt;Month:\", Month,\n                                        \"&lt;br&gt;Proportion:\", scales::percent(prop)))) +\n  geom_col() +\n  scale_y_continuous(labels = scales::percent) +\n  labs(y = \"Proportion\", x = \"Month\", fill = \"Phenology stage\") +\n  theme_minimal()\n\n# Convert to interactive Plotly plot\nggplotly(p1, tooltip = \"text\")\n\n\n\n\n\n\n\n\nCode\n# Prepare the data\ndf_plot &lt;- comp %&gt;%\n  count(Year, Month, Pheno) %&gt;%\n  group_by(Year, Month) %&gt;%\n  mutate(prop = n / sum(n))\n\n# Base ggplot\np &lt;- ggplot(df_plot, aes(x = Month, y = prop, fill = Pheno,\n                         text = paste(\"Phenology:\", Pheno,\n                                      \"&lt;br&gt;Month:\", Month,\n                                      \"&lt;br&gt;Year:\", Year,\n                                      \"&lt;br&gt;Proportion:\", scales::percent(prop)))) +\n  geom_col() +\n  scale_y_continuous(labels = scales::percent) +\n  labs(y = \"Proportion\", x = \"Month\", fill = \"Phenology stage\") +\n  facet_wrap(~Year, ncol = 1) +\n  theme_minimal()\n\n# Convert to interactive plotly plot\nggplotly(p, tooltip = \"text\")\n\n\n\n\n\n\n\n\n\nI was also curious to see how green-up timing varied across the different vegetation communities, especially in the riparian areas. The timing in Grassland, Intermediate, and Shrubland communities was fairly similar, while Scabland and Sparse areas progressed the fastest. As expected, the Riparian areas showed a slower progression through green-up compared to the other communities, likely providing more nutritious forage into late June or early July—just as lactation is hopefully slowing for many of the ewes.\n\n\nCode\npvt_comp &lt;- comp %&gt;%\n  count(PVT, Month, Pheno) %&gt;%\n  group_by(PVT, Month) %&gt;%\n  mutate(prop = n / sum(n)) %&gt;%\n  ungroup()\n\n\np2 &lt;- ggplot(pvt_comp, aes(x = Month, y = prop, fill = Pheno,\n                          text = paste(\"Vegetation community:\", PVT,\n                                       \"&lt;br&gt;Phenology:\", Pheno,\n                                       \"&lt;br&gt;Month:\", Month,\n                                       \"&lt;br&gt;Proportion:\", scales::percent(prop)))) +\n  geom_col() +\n  scale_y_continuous(labels = scales::percent) +\n  labs(y = \"Proportion\", x = \"Month\", fill = \"Phenology stage\") +\n  facet_wrap(~PVT, ncol = 2) +\n  theme_minimal()\n\n\nggplotly(p2, tooltip = \"text\")\n\n\n\n\n\n\n\n\nCode\ncomp %&gt;%\n  count(Month, Pheno) %&gt;%\n  group_by(Month) %&gt;%\n  mutate(prop = n / sum(n)) %&gt;%\n  ggplot(aes(x = Month, y = prop, color = Pheno, group = Pheno)) +\n  geom_smooth(se = FALSE, method = \"loess\", span = 0.8, size = 1.2) +\n  geom_point(size = 2) +\n  scale_y_continuous(labels = scales::percent) +\n  labs(y = \"Proportion\", x = \"Month\", color = \"Phenology stage\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\n\nCode\ncomp &lt;- comp %&gt;%\n  mutate(PVT = substr(PlotID, 4, 6))\n\ncomp %&gt;%\n  count(PVT, Month, Pheno) %&gt;%\n  group_by(PVT, Month) %&gt;%\n  mutate(prop = n / sum(n)) %&gt;%\n  ggplot(aes(x = Month, y = prop, color = Pheno, group = Pheno)) +\n  geom_smooth(se = FALSE, method = \"loess\", span = 0.8, size = 1.2) +\n  geom_point(size = 2) +\n  scale_y_continuous(labels = scales::percent) +\n  labs(y = \"Proportion\", x = \"Month\", color = \"Phenology stage\") +\n  facet_wrap(~PVT, ncol = 2) +   # adjust ncol to control layout\n  theme_minimal()\n\n\n\n\n\n\n\n\n\nbiomass overtime?"
  },
  {
    "objectID": "posts/post-with-code/Veg.Overview.html#fecal-collections",
    "href": "posts/post-with-code/Veg.Overview.html#fecal-collections",
    "title": "Veg Overview",
    "section": "",
    "text": "This section shows a timeline of when our fecal samples were collected across both seasons. To simplify the visualization, I condensed multiple observations from the same date into a single point to highlight the overall timing of sampling. On most sampling days, at least two to three samples were collected from a group when available, and on some days we encountered multiple groups in different areas of the canyon. These instances are still represented by a single datapoint on the graph.\nI think we did a fairly good job of collecting fecal samples throughout the summer. There is, however, a gap in the first two weeks of the season in both years, which makes sense since this period coincides with our priority of monitoring lambs during the beginning of the birth pulse. Because we have a substantial number of samples on either side of this gap, I am not overly concerned; the surrounding samples should still provide a solid understanding of the sheep’s feeding habits during that time frame.\n\n\nCode\nf &lt;- \"C:/Users/Alexis Means/Documents/Project/Nutrition Sampling/VegDatabases/Fecal.xlsx\"\n\nfecal &lt;- read_excel(f, \"Sheet1\")\n\n\nfecal &lt;- fecal %&gt;% \n  filter(!ID %in% c(\"25_045\", \"25_061\")) %&gt;% \n  mutate(\n    DATE = as.Date(\n      suppressWarnings(as.numeric(DATE)),  # convert Excel numbers to Date\n      origin = \"1899-12-30\"                # Excel date origin\n    )\n  ) %&gt;%  \n  filter(!is.na(DATE)) %&gt;%        # remove rows where DATE is NA\n  distinct(DATE, .keep_all = TRUE) %&gt;%  # keep only one row per DATE\n  mutate(\n    DOY  = yday(DATE),\n    Year = factor(year(DATE))\n  )\n  \n\nggplot(fecal, aes(x = DOY, y = Year, color = Year)) +\n  geom_jitter(height = 0.2, size = 3) +   # jitter vertically within each Year\n  scale_x_continuous(\n    breaks = c(75, 105, 136, 166, 197, 228),\n    labels = c(\"March\", \"Apr\", \"May\", \"June\", \"July\", \"Aug\")\n  ) +\n  labs(\n    title = \"Sampling Dates by Year\",\n    x = \"Month\",\n    y = \"Year\",\n    color = \"Year\"\n  ) +\n  theme_bw()"
  },
  {
    "objectID": "posts/post-with-code/testing_predict_assumptons.html",
    "href": "posts/post-with-code/testing_predict_assumptons.html",
    "title": "Checking Bio Predict Assumptions",
    "section": "",
    "text": "Code\nspp_model &lt;- readRDS(\"C:/Users/Alexis Means/Documents/Project/Nutrition Sampling/R code/biomass/regression_equations/24and25-Biomass-Regression-Species-Top-Model-List.rds\")\n\nfam_model &lt;- readRDS(\"C:/Users/Alexis Means/Documents/Project/Nutrition Sampling/R code/biomass/regression_equations/24and25-Biomass-Regression-Family-Top-Model-List.rds\")\n\ngenus_model &lt;- readRDS(\"C:/Users/Alexis Means/Documents/Project/Nutrition Sampling/R code/biomass/regression_equations/24and25-Biomass-Regression-Genus-Top-Model-List.rds\")\n\nfg_model &lt;- readRDS(\"C:/Users/Alexis Means/Documents/Project/Nutrition Sampling/R code/biomass/regression_equations/24and25-Biomass-Regression-Functional-Group-Top-Model-List.rds\")\n\nall_models &lt;- list(\n  spp   = spp_model,\n  fam   = fam_model,\n  genus = genus_model,\n  fg    = fg_model\n)"
  },
  {
    "objectID": "posts/post-with-code/testing_predict_assumptons.html#predicted-biomass-values",
    "href": "posts/post-with-code/testing_predict_assumptons.html#predicted-biomass-values",
    "title": "Checking Bio Predict Assumptions",
    "section": "Predicted Biomass Values",
    "text": "Predicted Biomass Values\nHere are my current predicted biomass values based on the linear equations at the bottom of the page. I didn’t include the code I used to generate them in this document, but I can send it over if you’d like to take a look. Right now, all the biomass values are in grams rather than kilograms. I’m not sure if that affects the predictions, but my plan was to scale them up to kilograms before rerunning the FRESH model.\nIGNORE THIS FOR NOW\n\n\nCode\nlibrary(readr)\nlibrary(readxl)\nlibrary(DT)\n\ndf &lt;- \"C:/Users/Alexis Means/Documents/Project/Nutrition Sampling/R code/biomass/24and25predictions.xlsx\"\n\npredictions &lt;- read_excel(df, \"Sheet1\")\n\ndatatable(predictions, options = list(pageLength = 10))"
  },
  {
    "objectID": "posts/post-with-code/testing_predict_assumptons.html#assumption-test-p-values",
    "href": "posts/post-with-code/testing_predict_assumptons.html#assumption-test-p-values",
    "title": "Checking Bio Predict Assumptions",
    "section": "Assumption Test P-values",
    "text": "Assumption Test P-values\n\nBreusch–Pagan test (bptest) for homoscedasticity\nShapiro–Wilk test for normality of residuals\nDurbin–Watson test (dwtest) for autocorrelation\nCook’s distance for influential observations\n\nI’m not sure if there are other tests that would be better to run instead. I could also use some guidance on which p-values should be considered “red flags” that suggest I need to use a different equation. I rounded everything to four decimal places to make the results easier to read, so any zeros you see are just very small values above zero\n\n\nCode\nlibrary(tidyverse)\nlibrary(lmtest)\nlibrary(purrr)\nlibrary(DT)\n\ncheck_lm_assumptions &lt;- function(model) {\n  if (!inherits(model, \"lm\")) return(NULL)\n  \n  res &lt;- residuals(model)\n  \n  list(\n    r_squared = tryCatch(round(summary(model)$r.squared, 4), error = function(e) NA),\n    shapiro_p = tryCatch(round(shapiro.test(res)$p.value, 4), error = function(e) NA),\n    bp_test   = tryCatch(round(lmtest::bptest(model)$p.value, 4), error = function(e) NA),\n    dw_test   = tryCatch(round(lmtest::dwtest(model)$p.value, 4), error = function(e) NA),\n    cook_max  = tryCatch(round(max(cooks.distance(model), na.rm = TRUE), 4), error = function(e) NA)\n  )\n}\n\ndiagnostics &lt;- imap_dfr(all_models, function(model_list, group_name) {\n  map_dfr(model_list, check_lm_assumptions, .id = \"model_name\") %&gt;%\n    mutate(group = group_name, .before = 1)\n})\n\n#--------------------------------------------------------------\n# 3️⃣ Extract model base name (everything before trailing number)\n#     Example: \"BRTE_GREEN1\" → \"BRTE_GREEN\"\n#--------------------------------------------------------------\ndiagnostics &lt;- diagnostics %&gt;%\n  mutate(model_base = str_trim(str_extract(model_name, \".*(?=\\\\d+$)\")))\n\n#--------------------------------------------------------------\n# 4️⃣ Identify and remove model families with any R² &gt; 0.4\n#--------------------------------------------------------------\nhigh_r2_bases &lt;- diagnostics %&gt;%\n  group_by(model_base) %&gt;%\n  summarize(any_high_r2 = any(r_squared &gt; 0.4, na.rm = TRUE)) %&gt;%\n  filter(any_high_r2) %&gt;%\n  pull(model_base)\n\ndiagnostics_low_r2 &lt;- diagnostics %&gt;%\n  filter(!model_base %in% high_r2_bases)\n\n\ndatatable(diagnostics_low_r2, options = list(pageLength = 10))"
  },
  {
    "objectID": "posts/post-with-code/testing_predict_assumptons.html#diagnostic-plots-and-equations",
    "href": "posts/post-with-code/testing_predict_assumptons.html#diagnostic-plots-and-equations",
    "title": "Checking Bio Predict Assumptions",
    "section": "Diagnostic Plots and Equations",
    "text": "Diagnostic Plots and Equations\nHere are the diagnostic plots for each of the linear models: Breusch–Pagan test (top left), Shapiro–Wilk test (top right), Durbin–Watson test (bottom left), and Cook’s distance (bottom right). Below the plots, I’ve also included each of the linear equations I’m using to predict biomass.\n\n\nCode\nlibrary(ggfortify)\nlibrary(gridExtra)\n\nplot_diagnostics &lt;- function(model, model_name, group_name) {\n  \n  p1 &lt;- autoplot(model, which = 1)[[1]] + \n    ggtitle(paste(\"Residuals vs Fitted for\", model_name, \"in\", group_name))\n  \n  p2 &lt;- autoplot(model, which = 2)[[1]] + \n    ggtitle(paste(\"Normal Q-Q for\", model_name, \"in\", group_name))\n  \n  p3 &lt;- autoplot(model, which = 3)[[1]] + \n    ggtitle(paste(\"Scale-Location for\", model_name, \"in\", group_name))\n  \n  p4 &lt;- autoplot(model, which = 5)[[1]] + \n    ggtitle(paste(\"Residuals vs Leverage for\", model_name, \"in\", group_name))\n  \n  gridExtra::grid.arrange(p1, p2, p3, p4, ncol = 2)\n}\n\nimap(all_models, function(model_list, group_name) {\n  \n  # Filter only models from this group that passed the R² criteria\n  keep_models &lt;- diagnostics_low_r2 %&gt;%\n    filter(group == group_name) %&gt;%\n    pull(model_name)\n  \n  # Subset model list to those models\n  model_list_filtered &lt;- model_list[names(model_list) %in% keep_models]\n  \n  # Plot only the retained models\n  walk2(model_list_filtered, names(model_list_filtered), ~ {\n    plot_diagnostics(.x, .y, group_name)\n  })\n})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n$spp\n$spp$ELEL5_GREEN1\n\nCall:\nlm(formula = y ~ 0 + Abiotic.cover_sin, data = z, na.action = na.fail)\n\nCoefficients:\nAbiotic.cover_sin  \n            2.758  \n\n\n$spp$ELEL5_GREEN2\n\nCall:\nlm(formula = y ~ 0 + julian_identity, data = z, na.action = na.fail)\n\nCoefficients:\njulian_identity  \n          3.276  \n\n\n$spp$ELEL5_GREEN3\n\nCall:\nlm(formula = y ~ 0 + Abiotic.cover_identity, data = z, na.action = na.fail)\n\nCoefficients:\nAbiotic.cover_identity  \n                -2.712  \n\n\n$spp$POSE_BROWN1\n\nCall:\nlm(formula = y ~ 0 + elev_sqrt + julian_cos + Percent_cubic, \n    data = z, na.action = na.fail)\n\nCoefficients:\n    elev_sqrt     julian_cos  Percent_cubic  \n        2.487         -1.730        -11.852  \n\n\n$spp$POSE_BROWN2\n\nCall:\nlm(formula = y ~ 0 + elev_sqrt + julian_cos + Percent_cubic + \n    Percent_sin, data = z, na.action = na.fail)\n\nCoefficients:\n    elev_sqrt     julian_cos  Percent_cubic    Percent_sin  \n       2.2715        -1.6034       -10.9962        -0.9478  \n\n\n$spp$POSE_BROWN3\n\nCall:\nlm(formula = y ~ 0 + elev_cos + elev_sqrt + julian_cos + Percent_cubic, \n    data = z, na.action = na.fail)\n\nCoefficients:\n     elev_cos      elev_sqrt     julian_cos  Percent_cubic  \n      -0.8525         2.6713        -1.8427       -11.4857  \n\n\n$spp$TACA8_GREEN1\n\nCall:\nlm(formula = y ~ 0 + elev_sin + Percent_sin, data = z, na.action = na.fail)\n\nCoefficients:\n   elev_sin  Percent_sin  \n     -4.237       -3.660  \n\n\n$spp$TACA8_GREEN2\n\nCall:\nlm(formula = y ~ 0 + Abiotic.cover_sin + elev_sqrt, data = z, \n    na.action = na.fail)\n\nCoefficients:\nAbiotic.cover_sin          elev_sqrt  \n            3.404              2.180  \n\n\n$spp$TACA8_GREEN3\n\nCall:\nlm(formula = y ~ 0 + Abiotic.cover_sin, data = z, na.action = na.fail)\n\nCoefficients:\nAbiotic.cover_sin  \n            3.379  \n\n\n\n$fam\n$fam$POACEAE1\n\nCall:\nlm(formula = y ~ 0 + asp_cos + elev_sin + julian_quadratic + \n    Percent_cubic + Percent_log + Percent_sin, data = z, na.action = na.fail)\n\nCoefficients:\n         asp_cos          elev_sin  julian_quadratic     Percent_cubic  \n          0.8994           -1.8047            0.8842            1.7495  \n     Percent_log       Percent_sin  \n          8.6610            1.7472  \n\n\n$fam$POACEAE2\n\nCall:\nlm(formula = y ~ 0 + elev_sin + julian_quadratic + Percent_cubic + \n    Percent_log + Percent_sin, data = z, na.action = na.fail)\n\nCoefficients:\n        elev_sin  julian_quadratic     Percent_cubic       Percent_log  \n         -1.7301            0.6619            1.7303            8.6194  \n     Percent_sin  \n          1.7355  \n\n\n$fam$POACEAE3\n\nCall:\nlm(formula = y ~ 0 + asp_cos + elev_sin + Percent_cubic + Percent_log + \n    Percent_sin, data = z, na.action = na.fail)\n\nCoefficients:\n      asp_cos       elev_sin  Percent_cubic    Percent_log    Percent_sin  \n       0.6712        -1.8542         1.8303         8.5696         1.7916  \n\n\n$fam$APIACEAE1\n\nCall:\nlm(formula = y ~ 0 + Abiotic.cover_log + Percent_log, data = z, \n    na.action = na.fail)\n\nCoefficients:\nAbiotic.cover_log        Percent_log  \n           -2.338              6.181  \n\n\n$fam$APIACEAE2\n\nCall:\nlm(formula = y ~ 0 + Percent_log, data = z, na.action = na.fail)\n\nCoefficients:\nPercent_log  \n      6.177  \n\n\n$fam$APIACEAE3\n\nCall:\nlm(formula = y ~ 0 + Abiotic.cover_log + Abiotic.cover_sin + \n    Percent_log, data = z, na.action = na.fail)\n\nCoefficients:\nAbiotic.cover_log  Abiotic.cover_sin        Percent_log  \n           -2.266              1.283              6.262  \n\n\n\n$genus\n$genus$LOMATIUM1\n\nCall:\nlm(formula = y ~ 0 + asp_sin + julian_sin + julian_sqrt + Percent_log, \n    data = z, na.action = na.fail)\n\nCoefficients:\n    asp_sin   julian_sin  julian_sqrt  Percent_log  \n     -2.913        1.789       -2.026        3.583  \n\n\n$genus$LOMATIUM2\n\nCall:\nlm(formula = y ~ 0 + asp_sin + julian_cos + julian_sin + julian_sqrt + \n    Percent_log, data = z, na.action = na.fail)\n\nCoefficients:\n    asp_sin   julian_cos   julian_sin  julian_sqrt  Percent_log  \n     -2.464        1.587        1.753       -2.302        3.665  \n\n\n$genus$LOMATIUM3\n\nCall:\nlm(formula = y ~ 0 + asp_sin + julian_sin + Percent_log, data = z, \n    na.action = na.fail)\n\nCoefficients:\n    asp_sin   julian_sin  Percent_log  \n     -2.286        1.827        3.929  \n\n\n$genus$PSEUDOROEGNERIA1\n\nCall:\nlm(formula = y ~ 0 + Abiotic.cover_quadratic + Percent_cos + \n    Percent_cubic, data = z, na.action = na.fail)\n\nCoefficients:\nAbiotic.cover_quadratic              Percent_cos            Percent_cubic  \n                 -2.093                   -5.282                  -40.407  \n\n\n$genus$PSEUDOROEGNERIA2\n\nCall:\nlm(formula = y ~ 0 + Abiotic.cover_quadratic + elev_sqrt + Percent_cos + \n    Percent_cubic, data = z, na.action = na.fail)\n\nCoefficients:\nAbiotic.cover_quadratic                elev_sqrt              Percent_cos  \n                 -2.198                    1.698                   -5.251  \n          Percent_cubic  \n                -40.222  \n\n\n$genus$PSEUDOROEGNERIA3\n\nCall:\nlm(formula = y ~ 0 + Abiotic.cover_quadratic + elev_sin + Percent_cos + \n    Percent_cubic, data = z, na.action = na.fail)\n\nCoefficients:\nAbiotic.cover_quadratic                 elev_sin              Percent_cos  \n                 -1.909                   -1.246                   -5.401  \n          Percent_cubic  \n                -40.570  \n\n\n$genus$POA1\n\nCall:\nlm(formula = y ~ 0 + elev_cubic + julian_cos + julian_log + Percent_cos + \n    Percent_sin, data = z, na.action = na.fail)\n\nCoefficients:\n elev_cubic   julian_cos   julian_log  Percent_cos  Percent_sin  \n     1.6742      -1.1443      -0.8561      -1.9497      -1.3449  \n\n\n$genus$POA2\n\nCall:\nlm(formula = y ~ 0 + Abiotic.cover_cos + elev_cubic + julian_cos + \n    julian_log + Percent_cos + Percent_sin, data = z, na.action = na.fail)\n\nCoefficients:\nAbiotic.cover_cos         elev_cubic         julian_cos         julian_log  \n          -0.7336             1.7124            -1.1339            -0.8708  \n      Percent_cos        Percent_sin  \n          -1.8615            -1.3250  \n\n\n$genus$POA3\n\nCall:\nlm(formula = y ~ 0 + elev_cubic + julian_cos + Percent_cos + \n    Percent_sin, data = z, na.action = na.fail)\n\nCoefficients:\n elev_cubic   julian_cos  Percent_cos  Percent_sin  \n      1.601       -1.115       -2.102       -1.289  \n\n\n$genus$FESTUCA1\n\nCall:\nlm(formula = y ~ 0 + asp_sin + Percent_quadratic + Percent_sin, \n    data = z, na.action = na.fail)\n\nCoefficients:\n          asp_sin  Percent_quadratic        Percent_sin  \n            1.753              7.016             -2.898  \n\n\n$genus$FESTUCA2\n\nCall:\nlm(formula = y ~ 0 + Percent_quadratic + Percent_sin, data = z, \n    na.action = na.fail)\n\nCoefficients:\nPercent_quadratic        Percent_sin  \n            7.165             -3.172  \n\n\n$genus$FESTUCA3\n\nCall:\nlm(formula = y ~ 0 + asp_sin + elev_sin + Percent_quadratic + \n    Percent_sin, data = z, na.action = na.fail)\n\nCoefficients:\n          asp_sin           elev_sin  Percent_quadratic        Percent_sin  \n            1.750             -1.328              7.047             -2.933  \n\n\n\n$fg\n$fg$AG1\n\nCall:\nlm(formula = y ~ 0 + asp_cos + elev_sin + Percent_cos + Percent_quadratic, \n    data = z, na.action = na.fail)\n\nCoefficients:\n          asp_cos           elev_sin        Percent_cos  Percent_quadratic  \n            1.860             -2.901             -2.740              6.885  \n\n\n$fg$AG2\n\nCall:\nlm(formula = y ~ 0 + asp_cos + elev_sin + Percent_cos + Percent_quadratic + \n    Percent_sin, data = z, na.action = na.fail)\n\nCoefficients:\n          asp_cos           elev_sin        Percent_cos  Percent_quadratic  \n            1.798             -2.915             -2.413              6.955  \n      Percent_sin  \n           -1.014  \n\n\n$fg$AG3\n\nCall:\nlm(formula = y ~ 0 + asp_cos + elev_log + elev_sin + Percent_cos + \n    Percent_quadratic, data = z, na.action = na.fail)\n\nCoefficients:\n          asp_cos           elev_log           elev_sin        Percent_cos  \n           1.9704            -0.7723            -2.9152            -2.7284  \nPercent_quadratic  \n           6.8513  \n\n\n$fg$PF1\n\nCall:\nlm(formula = y ~ 0 + Abiotic.cover_cos + elev_cos + Percent_cos + \n    Percent_cubic + Percent_sin, data = z, na.action = na.fail)\n\nCoefficients:\nAbiotic.cover_cos           elev_cos        Percent_cos      Percent_cubic  \n            2.600             -1.436             -2.134              8.177  \n      Percent_sin  \n           -1.962  \n\n\n$fg$PF2\n\nCall:\nlm(formula = y ~ 0 + Abiotic.cover_cos + Percent_cos + Percent_cubic + \n    Percent_sin, data = z, na.action = na.fail)\n\nCoefficients:\nAbiotic.cover_cos        Percent_cos      Percent_cubic        Percent_sin  \n            2.388             -2.132              7.975             -2.060  \n\n\n$fg$PF3\n\nCall:\nlm(formula = y ~ 0 + Abiotic.cover_cos + asp_sin + elev_cos + \n    Percent_cos + Percent_cubic + Percent_sin, data = z, na.action = na.fail)\n\nCoefficients:\nAbiotic.cover_cos            asp_sin           elev_cos        Percent_cos  \n            2.568              1.350             -1.483             -2.342  \n    Percent_cubic        Percent_sin  \n            7.747             -1.941  \n\n\n$fg$AF1\n\nCall:\nlm(formula = y ~ 0 + Abiotic.cover_cubic + elev_cos + julian_cubic + \n    Percent_cubic, data = z, na.action = na.fail)\n\nCoefficients:\nAbiotic.cover_cubic             elev_cos         julian_cubic  \n             -1.261                1.242               -1.257  \n      Percent_cubic  \n              7.812  \n\n\n$fg$AF2\n\nCall:\nlm(formula = y ~ 0 + Abiotic.cover_cubic + elev_cos + julian_cubic + \n    Percent_log, data = z, na.action = na.fail)\n\nCoefficients:\nAbiotic.cover_cubic             elev_cos         julian_cubic  \n             -1.152                1.210               -1.190  \n        Percent_log  \n              1.342  \n\n\n$fg$AF3\n\nCall:\nlm(formula = y ~ 0 + Abiotic.cover_cubic + elev_cos + Percent_cubic, \n    data = z, na.action = na.fail)\n\nCoefficients:\nAbiotic.cover_cubic             elev_cos        Percent_cubic  \n             -1.394                1.157                6.609"
  },
  {
    "objectID": "posts/post-with-code/testing_predict_assumptons.html#questions",
    "href": "posts/post-with-code/testing_predict_assumptons.html#questions",
    "title": "Checking Bio Predict Assumptions",
    "section": "Questions",
    "text": "Questions\n\nI’m having a hard time figuring out which plots are bad enough that they justify trying a different linear model. Did any of them stick out to you?\nAre there any assumption tests that I should be taking with a grain of salt? Ryan mentioned that one of them might not matter as much since our main goal with the linear models is prediction.\nCurrently, I only have the top regression equation saved for each species, genus, etc. Before I go back and rerun the model dredging process to generate more equations, I wanted to check if you had any other suggestions on how I could improve the predictions."
  },
  {
    "objectID": "posts/post-with-code/implement.bio.pred.html",
    "href": "posts/post-with-code/implement.bio.pred.html",
    "title": "Implementing Biomass Predictions",
    "section": "",
    "text": "Code\nlibrary(tidyverse)\nlibrary(MuMIn)\nlibrary(terra)\nlibrary(broom)\nlibrary(readr)\nlibrary(readxl)\nlibrary(sf)\n\nsetwd(\"C:/Users/Alexis Means/Documents/Project/Nutrition Sampling/R code/biomass\")\n\n# Load the global models\nspp_models &lt;- readRDS('regression_equations/24and25-Biomass-Regression-Species-Top-Model-List.rds')\ngenus_models &lt;- readRDS('regression_equations/24and25-Biomass-Regression-Genus-Top-Model-List.rds')\nfamily_models &lt;- readRDS('regression_equations/24and25-Biomass-Regression-Family-Top-Model-List.rds')\nfunctionalgroup_models &lt;- readRDS('regression_equations/24and25-Biomass-Regression-Functional-Group-Top-Model-List.rds')\n\n\n#2024 and 2025 observations \ndb &lt;- \"C:/Users/Alexis Means/Documents/Project/Nutrition Sampling/VegDatabases/Working.composition.data.xlsx\"\nbiomass &lt;- read_excel(db, \"Biomass\")\ncomp &lt;- read_excel(db, \"Composition\")\ntransect &lt;- read_excel(db, \"Transect\")\nplant &lt;- read_excel(db, \"PlantList\")\n\n#Organizing and joining databases####\ncomp &lt;- comp %&gt;% \n  mutate( Date = ymd(Date),          \n          julian = yday(Date)         \n  ) %&gt;% \n  select(julian, PlotID, Quadrat, Spp, Percent, Pheno, Part)\n\n\nbiomass &lt;- biomass %&gt;% \n  rename(DryWeight = `DryWeight(g)`) %&gt;% \n  select(PlotID, Quadrat, Spp, Pheno, Part, DryWeight)\n\n\n\ntransect_sf &lt;- st_as_sf(transect,\n                        coords = c(\"BeginLong\", \"BeginLat\"), \n                        crs = 4326)   # WGS84 (lat/long)\ntransect_utm &lt;- st_transform(transect_sf, crs = 32610)\ncoords &lt;- st_coordinates(transect_utm)\n\ntransect &lt;- transect %&gt;%\n  mutate(BeginUTM_Easting = coords[,1],\n         BeginUTM_Northing = coords[,2]) %&gt;% \n  select(PVT, PlotID, BeginUTM_Northing, BeginUTM_Easting)\n\n\n\nplant &lt;- plant %&gt;% \n  select(Spp, Family, Genus, Species, FG_New) %&gt;% \n  rename(FunctionalGroup = FG_New)\n\n\n\n#create object for inorganic matter \nabiotic &lt;- c(\"LITTER\",\"EARTH\", \"LICHEN\", \"WATER\", \"ROCKS\")\n\n\n#combining and creating an overall %cover for inorganic matter in each quadrat\ncomp &lt;- comp %&gt;% \n  group_by(PlotID, Quadrat) %&gt;% \n  mutate(Abiotic.cover = sum(Percent[(Spp %in% abiotic)])) %&gt;% \n  ungroup()\n\n\n#Left join biomass and comp by quadrat and plot_ID\ncomp &lt;- comp %&gt;% \n  left_join(y = biomass,\n            by = c(\"PlotID\", \"Quadrat\", \"Spp\", \"Pheno\", \"Part\")) \n\n\n#filtering out all quadrats where no biomass is recorded for the quadrat\n#filter out all of the abiotic observations\ncomp &lt;- comp %&gt;% \n  filter(!(Spp %in% abiotic)) \n\n\n## left join columns from plant list, comp, biomass and transect to keep the necessary columns \ncomp &lt;- comp %&gt;% \n  left_join(y = plant,\n            by = \"Spp\") %&gt;%  \n  left_join(y=transect,\n            by = \"PlotID\", \n            relationship = \"many-to-one\") #since there is multiple plotID duplicates this is necessary to join the transect database\n\n\ncomp &lt;- comp %&gt;% \n  select(julian, PVT, PlotID, Quadrat, Spp, Pheno, Part, Abiotic.cover,\n         DryWeight, Percent, Family, Genus, Species, FunctionalGroup, BeginUTM_Easting,\n         BeginUTM_Northing)\n\n\n# Ensure there's an id column\nif (!\"ID\" %in% colnames(comp)) {\n  comp$ID &lt;- 1:nrow(comp)\n}\n\n# Create empty list to load the covariates into\ncovariates &lt;- vector(mode = 'list')\n\n# List all the covariates that you want to use\ncovariates$asp &lt;- rast(\"C:/Users/Alexis Means/OneDrive/OneDrive - University of Idaho/DocuMents/Project/Nutrition Sampling/Rasters/LF_Asp/LC20_Asp_220.tif\")\ncovariates$elev &lt;- rast(\"C:/Users/Alexis Means/OneDrive/OneDrive - University of Idaho/DocuMents/Project/Nutrition Sampling/Rasters/LF_Elev/LC20_Elev_220.tif\")\n\n# Make a shape object out of the coordinates that exist in comp\ncoords &lt;- vect(comp,\n               geom = c(\"BeginUTM_Easting\",\"BeginUTM_Northing\"),\n               crs = \"EPSG:32610\")\n\nfor (i in 1:length(covariates)){\n  proj.coords = project(x = coords,\n                        y = covariates[[i]])\n  out = extract(x = covariates[[i]],\n                y = proj.coords)\n  comp[,names(covariates[i])] = out [,2]\n}\n\n#make sure everything is being read the way we want it to \ncomp$elev = as.numeric(comp$elev)\ncomp$Family = as.factor(comp$Family)\ncomp$Genus= as.factor(comp$Genus)\ncomp$asp = as.numeric(comp$asp)\ncomp$Spp= as.factor(comp$Spp)\ncomp$DryWeight= as.numeric(comp$DryWeight)\n\n\n#restructure df \ncomp &lt;- comp %&gt;% \n  select(ID, PlotID, Spp, Family, Genus, DryWeight, Percent, julian, PVT, Abiotic.cover, elev, asp, FunctionalGroup)\n\nmodel.y &lt;- comp %&gt;% \n  select(ID, PlotID, Spp, Family, Genus, DryWeight, PVT, FunctionalGroup)\nmodel.x &lt;- comp %&gt;% \n  select(Percent, julian, Abiotic.cover, elev, asp)"
  },
  {
    "objectID": "posts/post-with-code/implement.bio.pred.html#data-wrangling",
    "href": "posts/post-with-code/implement.bio.pred.html#data-wrangling",
    "title": "Implementing Biomass Predictions",
    "section": "",
    "text": "Code\nlibrary(tidyverse)\nlibrary(MuMIn)\nlibrary(terra)\nlibrary(broom)\nlibrary(readr)\nlibrary(readxl)\nlibrary(sf)\n\nsetwd(\"C:/Users/Alexis Means/Documents/Project/Nutrition Sampling/R code/biomass\")\n\n# Load the global models\nspp_models &lt;- readRDS('regression_equations/24and25-Biomass-Regression-Species-Top-Model-List.rds')\ngenus_models &lt;- readRDS('regression_equations/24and25-Biomass-Regression-Genus-Top-Model-List.rds')\nfamily_models &lt;- readRDS('regression_equations/24and25-Biomass-Regression-Family-Top-Model-List.rds')\nfunctionalgroup_models &lt;- readRDS('regression_equations/24and25-Biomass-Regression-Functional-Group-Top-Model-List.rds')\n\n\n#2024 and 2025 observations \ndb &lt;- \"C:/Users/Alexis Means/Documents/Project/Nutrition Sampling/VegDatabases/Working.composition.data.xlsx\"\nbiomass &lt;- read_excel(db, \"Biomass\")\ncomp &lt;- read_excel(db, \"Composition\")\ntransect &lt;- read_excel(db, \"Transect\")\nplant &lt;- read_excel(db, \"PlantList\")\n\n#Organizing and joining databases####\ncomp &lt;- comp %&gt;% \n  mutate( Date = ymd(Date),          \n          julian = yday(Date)         \n  ) %&gt;% \n  select(julian, PlotID, Quadrat, Spp, Percent, Pheno, Part)\n\n\nbiomass &lt;- biomass %&gt;% \n  rename(DryWeight = `DryWeight(g)`) %&gt;% \n  select(PlotID, Quadrat, Spp, Pheno, Part, DryWeight)\n\n\n\ntransect_sf &lt;- st_as_sf(transect,\n                        coords = c(\"BeginLong\", \"BeginLat\"), \n                        crs = 4326)   # WGS84 (lat/long)\ntransect_utm &lt;- st_transform(transect_sf, crs = 32610)\ncoords &lt;- st_coordinates(transect_utm)\n\ntransect &lt;- transect %&gt;%\n  mutate(BeginUTM_Easting = coords[,1],\n         BeginUTM_Northing = coords[,2]) %&gt;% \n  select(PVT, PlotID, BeginUTM_Northing, BeginUTM_Easting)\n\n\n\nplant &lt;- plant %&gt;% \n  select(Spp, Family, Genus, Species, FG_New) %&gt;% \n  rename(FunctionalGroup = FG_New)\n\n\n\n#create object for inorganic matter \nabiotic &lt;- c(\"LITTER\",\"EARTH\", \"LICHEN\", \"WATER\", \"ROCKS\")\n\n\n#combining and creating an overall %cover for inorganic matter in each quadrat\ncomp &lt;- comp %&gt;% \n  group_by(PlotID, Quadrat) %&gt;% \n  mutate(Abiotic.cover = sum(Percent[(Spp %in% abiotic)])) %&gt;% \n  ungroup()\n\n\n#Left join biomass and comp by quadrat and plot_ID\ncomp &lt;- comp %&gt;% \n  left_join(y = biomass,\n            by = c(\"PlotID\", \"Quadrat\", \"Spp\", \"Pheno\", \"Part\")) \n\n\n#filtering out all quadrats where no biomass is recorded for the quadrat\n#filter out all of the abiotic observations\ncomp &lt;- comp %&gt;% \n  filter(!(Spp %in% abiotic)) \n\n\n## left join columns from plant list, comp, biomass and transect to keep the necessary columns \ncomp &lt;- comp %&gt;% \n  left_join(y = plant,\n            by = \"Spp\") %&gt;%  \n  left_join(y=transect,\n            by = \"PlotID\", \n            relationship = \"many-to-one\") #since there is multiple plotID duplicates this is necessary to join the transect database\n\n\ncomp &lt;- comp %&gt;% \n  select(julian, PVT, PlotID, Quadrat, Spp, Pheno, Part, Abiotic.cover,\n         DryWeight, Percent, Family, Genus, Species, FunctionalGroup, BeginUTM_Easting,\n         BeginUTM_Northing)\n\n\n# Ensure there's an id column\nif (!\"ID\" %in% colnames(comp)) {\n  comp$ID &lt;- 1:nrow(comp)\n}\n\n# Create empty list to load the covariates into\ncovariates &lt;- vector(mode = 'list')\n\n# List all the covariates that you want to use\ncovariates$asp &lt;- rast(\"C:/Users/Alexis Means/OneDrive/OneDrive - University of Idaho/DocuMents/Project/Nutrition Sampling/Rasters/LF_Asp/LC20_Asp_220.tif\")\ncovariates$elev &lt;- rast(\"C:/Users/Alexis Means/OneDrive/OneDrive - University of Idaho/DocuMents/Project/Nutrition Sampling/Rasters/LF_Elev/LC20_Elev_220.tif\")\n\n# Make a shape object out of the coordinates that exist in comp\ncoords &lt;- vect(comp,\n               geom = c(\"BeginUTM_Easting\",\"BeginUTM_Northing\"),\n               crs = \"EPSG:32610\")\n\nfor (i in 1:length(covariates)){\n  proj.coords = project(x = coords,\n                        y = covariates[[i]])\n  out = extract(x = covariates[[i]],\n                y = proj.coords)\n  comp[,names(covariates[i])] = out [,2]\n}\n\n#make sure everything is being read the way we want it to \ncomp$elev = as.numeric(comp$elev)\ncomp$Family = as.factor(comp$Family)\ncomp$Genus= as.factor(comp$Genus)\ncomp$asp = as.numeric(comp$asp)\ncomp$Spp= as.factor(comp$Spp)\ncomp$DryWeight= as.numeric(comp$DryWeight)\n\n\n#restructure df \ncomp &lt;- comp %&gt;% \n  select(ID, PlotID, Spp, Family, Genus, DryWeight, Percent, julian, PVT, Abiotic.cover, elev, asp, FunctionalGroup)\n\nmodel.y &lt;- comp %&gt;% \n  select(ID, PlotID, Spp, Family, Genus, DryWeight, PVT, FunctionalGroup)\nmodel.x &lt;- comp %&gt;% \n  select(Percent, julian, Abiotic.cover, elev, asp)"
  },
  {
    "objectID": "posts/post-with-code/implement.bio.pred.html#transform-covariates",
    "href": "posts/post-with-code/implement.bio.pred.html#transform-covariates",
    "title": "Implementing Biomass Predictions",
    "section": "Transform Covariates",
    "text": "Transform Covariates\n\n\nCode\n# Define covariate transformations\ntransformations &lt;- function(x) {\n  data.frame(\n    identity = x,\n    sin = sin(x),\n    cos = cos(x),\n    quadratic = x^2,\n    cubic = x^3,\n    log = ifelse(x &gt; 0, log(x), NA),\n    sqrt = ifelse(x &gt; 0, sqrt(x), NA)\n  )\n}\n\n\n#calculate transformed covariates\ntransform.covars = lapply(X = model.x,\n                          FUN = transformations)\ntransform.covars = do.call(cbind, transform.covars)\n\n\n#rename columns\ncolnames(transform.covars) = unlist(lapply(X = c(\"Percent\", \"julian\", \"Abiotic.cover\", \"elev\", \"asp\"),\n                                           FUN = function(var) {\n                                             paste0(var, '_', c('identity', 'sin', 'cos', 'quadratic', 'cubic', 'log', 'sqrt'))\n                                           }))\n\n\n\n#scale and center predictor variables\nmodel.x = transform.covars %&gt;% \n  mutate(across(everything(), ~ (.-mean(.))/sd(.))) %&gt;% \n  select_if(~ !any(is.na(.)))\n\ndata &lt;- cbind(model.y, model.x)\n\n\ndata$Family = as.character(data$Family)\ndata$Genus= as.character(data$Genus)\ndata$Spp= as.character(data$Spp)\ndata$DryWeight= as.numeric(data$DryWeight)"
  },
  {
    "objectID": "posts/post-with-code/implement.bio.pred.html#biomass-predict-function",
    "href": "posts/post-with-code/implement.bio.pred.html#biomass-predict-function",
    "title": "Implementing Biomass Predictions",
    "section": "Biomass Predict Function",
    "text": "Biomass Predict Function\n\n\nCode\nfill_dryweight &lt;- function(data, spp_models, genus_models, family_models, functionalgroup_models) {\n  # initialize column with observed values\n  data$DryWeight_pred &lt;- data$DryWeight\n  \n  # loop over rows with missing DryWeight\n  for (i in which(is.na(data$DryWeight))) {\n    row &lt;- data[i, , drop = FALSE]  # keep it as a dataframe\n    pred &lt;- NA\n    \n    # try species model\n    if (\"Spp\" %in% names(row) && !is.na(row$Spp) && row$Spp %in% names(spp_models)) {\n      mod &lt;- spp_models[[row$Spp]]\n      pred &lt;- predict(mod, newdata = row)\n    }\n    \n    # fallback: genus model\n    if (is.na(pred) && \"Genus\" %in% names(row) && !is.na(row$Genus) && row$Genus %in% names(genus_models)) {\n      mod &lt;- genus_models[[row$Genus]]\n      pred &lt;- predict(mod, newdata = row)\n    }\n    \n    # fallback: family model\n    if (is.na(pred) && \"Family\" %in% names(row) && !is.na(row$Family) && row$Family %in% names(family_models)) {\n      mod &lt;- family_models[[row$Family]]\n      pred &lt;- predict(mod, newdata = row)\n    }\n    \n    # fallback: functional group model\n    if (is.na(pred) && \"FunctionalGroup\" %in% names(row) && !is.na(row$FunctionalGroup) && row$FunctionalGroup %in% names(functionalgroup_models)) {\n      mod &lt;- functionalgroup_models[[row$FunctionalGroup]]\n      pred &lt;- predict(mod, newdata = row)\n    }\n    \n    # save prediction if found, rounded to 2 decimals\n    if (!is.na(pred)) {\n      data$DryWeight_pred[i] &lt;- round(pred, 2)\n    }\n  }\n  \n  return(data)\n}\n\ndf &lt;- fill_dryweight(\n  data, \n  spp_models, \n  genus_models, \n  family_models, \n  functionalgroup_models\n)\n\npredictions &lt;- df %&gt;% \n  select(ID, PlotID, Spp, DryWeight, DryWeight_pred)\n\n\npercent &lt;- comp %&gt;% \n  select(ID, Percent)\n\npredictions &lt;- predictions %&gt;% \n  left_join(percent, by = \"ID\")\n\nView(predictions)\n#library(writexl)\n\n# save dataframe to Excel\n#write_xlsx(predictions, \"C:/Users/Alexis Means/Documents/Project/Nutrition Sampling/R code/biomass/24and25predictions.xlsx\")"
  },
  {
    "objectID": "posts/post-with-code/creating.biomass.regressions.html",
    "href": "posts/post-with-code/creating.biomass.regressions.html",
    "title": "Creating Regression Equations",
    "section": "",
    "text": "Code\nlibrary(tidyverse)\nlibrary(terra)\nlibrary(readxl)\nlibrary(readr)\nlibrary(sf)\n\n#model dredging packages\nlibrary(caret)\nlibrary(recipes)\n\nsetwd(\"C:/Users/Alexis Means/Documents/Project/Nutrition Sampling/R code\")\n\n\n#2024 and 2025 observations\ndb &lt;- \"C:/Users/Alexis Means/Documents/Project/Nutrition Sampling/VegDatabases/Working.composition.data.xlsx\"\nbiomass &lt;- read_excel(db, \"Biomass\")\ncomp &lt;- read_excel(db, \"Composition\")\ntransect &lt;- read_excel(db, \"Transect\")\nplant &lt;- read_excel(db, \"PlantList\")\n\n\n#Organizing and joining databases####\ncomp &lt;- comp %&gt;%\nmutate( Date = ymd(Date),\n        julian = yday(Date)\n) %&gt;%\n  select(julian, PlotID, Quadrat, Spp, Percent, Pheno, Part)\n\n\nbiomass &lt;- biomass %&gt;%\n  rename(DryWeight = `DryWeight(g)`) %&gt;%\n  select(PlotID, Quadrat, Spp, Pheno, Part, DryWeight)\n\n\n\ntransect_sf &lt;- st_as_sf(transect,\n                        coords = c(\"BeginLong\", \"BeginLat\"),\n                        crs = 4326)   # WGS84 (lat/long)\ntransect_utm &lt;- st_transform(transect_sf, crs = 32610)\ncoords &lt;- st_coordinates(transect_utm)\n\ntransect &lt;- transect %&gt;%\n  mutate(BeginUTM_Easting = coords[,1],\n         BeginUTM_Northing = coords[,2]) %&gt;%\n  select(PVT, PlotID, BeginUTM_Northing, BeginUTM_Easting)\n\n\n\nplant &lt;- plant %&gt;%\n  select(Spp, Family, Genus, Species, FG_New) %&gt;%\n  rename(FunctionalGroup = FG_New)\n\n\n\n#create object for inorganic matter\nabiotic &lt;- c(\"LITTER\",\"EARTH\", \"LICHEN\", \"WATER\", \"ROCKS\", \"DEADFALL\")\n\n\n#combining and creating an overall %cover for inorganic matter in each quadrat\ncomp &lt;- comp %&gt;%\n  group_by(PlotID, Quadrat) %&gt;%\n  mutate(Abiotic.cover = sum(Percent[(Spp %in% abiotic)])) %&gt;%\n  ungroup()\n\n\n#Left join biomass and comp by quadrat and plot_ID\ncomp &lt;- comp %&gt;%\n  left_join(y = biomass,\n            by = c(\"PlotID\", \"Quadrat\", \"Spp\", \"Pheno\", \"Part\"))\n\n\n#filtering out all quadrats where no biomass is recorded for the quadrat\n#filter out all of the abiotic observations\ncomp &lt;- comp %&gt;%\n  filter(!(Spp %in% abiotic)) %&gt;%\n  filter(!is.na(DryWeight))\n\n\n## left join columns from plant list, comp, biomass and transect to keep the necessary columns\ncomp &lt;- comp %&gt;%\n  left_join(y = plant,\n            by = \"Spp\") %&gt;%\n  left_join(y=transect,\n            by = \"PlotID\",\n            relationship = \"many-to-one\") #since there is multiple plotID duplicates this is necessary to join the transect database\n\n\ncomp &lt;- comp %&gt;%\n  select(julian, PVT, PlotID, Quadrat, Spp, Pheno, Part, Abiotic.cover,\n         DryWeight, Percent, Family, Genus, Species, FunctionalGroup, BeginUTM_Easting,\n         BeginUTM_Northing)\nView(comp)\n\n\n\n\n#Loading Covariates####\n#create empty list to load the covariates into\ncovariates &lt;-  vector(mode = 'list')\n\n#List all the covariates that you want to use\ncovariates$asp &lt;- rast(\"C:/Users/Alexis Means/OneDrive/OneDrive - University of Idaho/DocuMents/Project/Nutrition Sampling/Rasters/LF_Asp/LC20_Asp_220.tif\")\ncovariates$elev &lt;- rast(\"C:/Users/Alexis Means/OneDrive/OneDrive - University of Idaho/DocuMents/Project/Nutrition Sampling/Rasters/LF_Elev/LC20_Elev_220.tif\")\n\n#can add more covariates here without updating for loop\n\n\n#make a shape object out of the coordinates that exist in comp\ncoords &lt;- vect(comp,\n               geom = c(\"BeginUTM_Easting\",\"BeginUTM_Northing\"),\n               crs = \"EPSG:32610\")\n\n\n\n\n#create a for loop####\n#goes over each covariate raster that we have and\n#reprojecting the UTM points into the the same ESPG of the imported rasters\n\nfor (i in 1:length(covariates)){\n  proj.coords = project(x = coords,\n                        y = covariates[[i]])\n  out = extract(x = covariates[[i]],\n                y = proj.coords)\n  comp[,names(covariates[i])] = out [,2]\n}\n\n## THIS IS A CHECK IF YOU NEED IT\n# helps plot points to troubleshoot\ni = 1\nproj.coords &lt;- project(x = coords,\n                       y = covariates[[i]])\n\nplot(covariates[[1]])\npoints(proj.coords, col = \"red\", pch = 16)\n\n\n#restructure df\ncomp &lt;- comp %&gt;%\n  select(PlotID, Spp, Family, Genus, DryWeight, Percent, julian, PVT, Abiotic.cover, elev, asp, FunctionalGroup)\n\n#If there are any 0 values it corrects them to 0.01\ncomp$DryWeight = ifelse(comp$DryWeight == 0, .01, comp$DryWeight)\n\n\n#make sure everything is being read the way we want it to\ncomp$elev = as.numeric(comp$elev)\ncomp$Family = as.factor(comp$Family)\ncomp$Genus= as.factor(comp$Genus)\ncomp$FunctionalGroup= as.factor(comp$FunctionalGroup)\ncomp$Spp= as.factor(comp$Spp)\ncomp$DryWeight= as.numeric(comp$DryWeight)\n\n\n#remove unnecessary objects from environment\nrm(i, transect, plant, biomass)\n\n#calculate sample size for each hierarchical group####\n#species\ncomp &lt;- comp %&gt;%\n  group_by(Spp) %&gt;%\n  mutate(n.Species = sum(!is.na(Spp))) %&gt;%\n  ungroup()\n\ncomp &lt;- comp %&gt;%\n  group_by(Genus) %&gt;%\n  mutate(n.Genus = sum(!is.na(Genus))) %&gt;%\n  ungroup()\n\ncomp &lt;- comp %&gt;%\n  group_by(Family) %&gt;%\n  mutate(n.Family =  sum(!is.na(Family))) %&gt;%\n  ungroup()\n\ncomp &lt;- comp %&gt;%\n  group_by(FunctionalGroup) %&gt;%\n  mutate(n.FunctionalGroup = sum(!is.na(FunctionalGroup))) %&gt;%\n  ungroup()\n\nmodel.y &lt;- comp %&gt;%\n  select( PVT, PlotID, Spp, Family, Genus,FunctionalGroup, DryWeight, n.Species, n.Genus, n.Family, n.FunctionalGroup)\nmodel.x &lt;- comp %&gt;%\n  select(Percent, julian, Abiotic.cover, elev, asp)"
  },
  {
    "objectID": "posts/post-with-code/creating.biomass.regressions.html#data-wrangling",
    "href": "posts/post-with-code/creating.biomass.regressions.html#data-wrangling",
    "title": "Creating Regression Equations",
    "section": "",
    "text": "Code\nlibrary(tidyverse)\nlibrary(terra)\nlibrary(readxl)\nlibrary(readr)\nlibrary(sf)\n\n#model dredging packages\nlibrary(caret)\nlibrary(recipes)\n\nsetwd(\"C:/Users/Alexis Means/Documents/Project/Nutrition Sampling/R code\")\n\n\n#2024 and 2025 observations\ndb &lt;- \"C:/Users/Alexis Means/Documents/Project/Nutrition Sampling/VegDatabases/Working.composition.data.xlsx\"\nbiomass &lt;- read_excel(db, \"Biomass\")\ncomp &lt;- read_excel(db, \"Composition\")\ntransect &lt;- read_excel(db, \"Transect\")\nplant &lt;- read_excel(db, \"PlantList\")\n\n\n#Organizing and joining databases####\ncomp &lt;- comp %&gt;%\nmutate( Date = ymd(Date),\n        julian = yday(Date)\n) %&gt;%\n  select(julian, PlotID, Quadrat, Spp, Percent, Pheno, Part)\n\n\nbiomass &lt;- biomass %&gt;%\n  rename(DryWeight = `DryWeight(g)`) %&gt;%\n  select(PlotID, Quadrat, Spp, Pheno, Part, DryWeight)\n\n\n\ntransect_sf &lt;- st_as_sf(transect,\n                        coords = c(\"BeginLong\", \"BeginLat\"),\n                        crs = 4326)   # WGS84 (lat/long)\ntransect_utm &lt;- st_transform(transect_sf, crs = 32610)\ncoords &lt;- st_coordinates(transect_utm)\n\ntransect &lt;- transect %&gt;%\n  mutate(BeginUTM_Easting = coords[,1],\n         BeginUTM_Northing = coords[,2]) %&gt;%\n  select(PVT, PlotID, BeginUTM_Northing, BeginUTM_Easting)\n\n\n\nplant &lt;- plant %&gt;%\n  select(Spp, Family, Genus, Species, FG_New) %&gt;%\n  rename(FunctionalGroup = FG_New)\n\n\n\n#create object for inorganic matter\nabiotic &lt;- c(\"LITTER\",\"EARTH\", \"LICHEN\", \"WATER\", \"ROCKS\", \"DEADFALL\")\n\n\n#combining and creating an overall %cover for inorganic matter in each quadrat\ncomp &lt;- comp %&gt;%\n  group_by(PlotID, Quadrat) %&gt;%\n  mutate(Abiotic.cover = sum(Percent[(Spp %in% abiotic)])) %&gt;%\n  ungroup()\n\n\n#Left join biomass and comp by quadrat and plot_ID\ncomp &lt;- comp %&gt;%\n  left_join(y = biomass,\n            by = c(\"PlotID\", \"Quadrat\", \"Spp\", \"Pheno\", \"Part\"))\n\n\n#filtering out all quadrats where no biomass is recorded for the quadrat\n#filter out all of the abiotic observations\ncomp &lt;- comp %&gt;%\n  filter(!(Spp %in% abiotic)) %&gt;%\n  filter(!is.na(DryWeight))\n\n\n## left join columns from plant list, comp, biomass and transect to keep the necessary columns\ncomp &lt;- comp %&gt;%\n  left_join(y = plant,\n            by = \"Spp\") %&gt;%\n  left_join(y=transect,\n            by = \"PlotID\",\n            relationship = \"many-to-one\") #since there is multiple plotID duplicates this is necessary to join the transect database\n\n\ncomp &lt;- comp %&gt;%\n  select(julian, PVT, PlotID, Quadrat, Spp, Pheno, Part, Abiotic.cover,\n         DryWeight, Percent, Family, Genus, Species, FunctionalGroup, BeginUTM_Easting,\n         BeginUTM_Northing)\nView(comp)\n\n\n\n\n#Loading Covariates####\n#create empty list to load the covariates into\ncovariates &lt;-  vector(mode = 'list')\n\n#List all the covariates that you want to use\ncovariates$asp &lt;- rast(\"C:/Users/Alexis Means/OneDrive/OneDrive - University of Idaho/DocuMents/Project/Nutrition Sampling/Rasters/LF_Asp/LC20_Asp_220.tif\")\ncovariates$elev &lt;- rast(\"C:/Users/Alexis Means/OneDrive/OneDrive - University of Idaho/DocuMents/Project/Nutrition Sampling/Rasters/LF_Elev/LC20_Elev_220.tif\")\n\n#can add more covariates here without updating for loop\n\n\n#make a shape object out of the coordinates that exist in comp\ncoords &lt;- vect(comp,\n               geom = c(\"BeginUTM_Easting\",\"BeginUTM_Northing\"),\n               crs = \"EPSG:32610\")\n\n\n\n\n#create a for loop####\n#goes over each covariate raster that we have and\n#reprojecting the UTM points into the the same ESPG of the imported rasters\n\nfor (i in 1:length(covariates)){\n  proj.coords = project(x = coords,\n                        y = covariates[[i]])\n  out = extract(x = covariates[[i]],\n                y = proj.coords)\n  comp[,names(covariates[i])] = out [,2]\n}\n\n## THIS IS A CHECK IF YOU NEED IT\n# helps plot points to troubleshoot\ni = 1\nproj.coords &lt;- project(x = coords,\n                       y = covariates[[i]])\n\nplot(covariates[[1]])\npoints(proj.coords, col = \"red\", pch = 16)\n\n\n#restructure df\ncomp &lt;- comp %&gt;%\n  select(PlotID, Spp, Family, Genus, DryWeight, Percent, julian, PVT, Abiotic.cover, elev, asp, FunctionalGroup)\n\n#If there are any 0 values it corrects them to 0.01\ncomp$DryWeight = ifelse(comp$DryWeight == 0, .01, comp$DryWeight)\n\n\n#make sure everything is being read the way we want it to\ncomp$elev = as.numeric(comp$elev)\ncomp$Family = as.factor(comp$Family)\ncomp$Genus= as.factor(comp$Genus)\ncomp$FunctionalGroup= as.factor(comp$FunctionalGroup)\ncomp$Spp= as.factor(comp$Spp)\ncomp$DryWeight= as.numeric(comp$DryWeight)\n\n\n#remove unnecessary objects from environment\nrm(i, transect, plant, biomass)\n\n#calculate sample size for each hierarchical group####\n#species\ncomp &lt;- comp %&gt;%\n  group_by(Spp) %&gt;%\n  mutate(n.Species = sum(!is.na(Spp))) %&gt;%\n  ungroup()\n\ncomp &lt;- comp %&gt;%\n  group_by(Genus) %&gt;%\n  mutate(n.Genus = sum(!is.na(Genus))) %&gt;%\n  ungroup()\n\ncomp &lt;- comp %&gt;%\n  group_by(Family) %&gt;%\n  mutate(n.Family =  sum(!is.na(Family))) %&gt;%\n  ungroup()\n\ncomp &lt;- comp %&gt;%\n  group_by(FunctionalGroup) %&gt;%\n  mutate(n.FunctionalGroup = sum(!is.na(FunctionalGroup))) %&gt;%\n  ungroup()\n\nmodel.y &lt;- comp %&gt;%\n  select( PVT, PlotID, Spp, Family, Genus,FunctionalGroup, DryWeight, n.Species, n.Genus, n.Family, n.FunctionalGroup)\nmodel.x &lt;- comp %&gt;%\n  select(Percent, julian, Abiotic.cover, elev, asp)"
  },
  {
    "objectID": "posts/post-with-code/creating.biomass.regressions.html#transform-covariates",
    "href": "posts/post-with-code/creating.biomass.regressions.html#transform-covariates",
    "title": "Creating Regression Equations",
    "section": "Transform Covariates",
    "text": "Transform Covariates\n#| eval: false\n#Define covariate transformations\ntransformations = function(x) {\n  data.frame(\n    identity = x,\n    sin = sin(x),\n    cos = cos(x),\n    quadratic = x^2,\n    cubic = x^3,\n    log = ifelse(x &gt; 0, log(x), NA),\n    sqrt = ifelse(x &gt; 0, sqrt(x), NA)\n  )\n}\n\n\n#calculate transformed covariates\ntransform.covars = lapply(X = model.x,\n                          FUN = transformations)\ntransform.covars = do.call(cbind, transform.covars)\nView(transform.covars)\n\n#rename columns\ncolnames(transform.covars) = unlist(lapply(X = c(\"Percent\", \"julian\", \"Abiotic.cover\", \"elev\", \"asp\"),\n                                           FUN = function(var) {\n                                             paste0(var, '_', c('identity', 'sin', 'cos', 'quadratic', 'cubic', 'log', 'sqrt'))\n                                           }))\n\n\n\n#scale and center predictor variables\nmodel.x = transform.covars %&gt;%\n  mutate(across(everything(), ~ (.-mean(.))/sd(.))) %&gt;%\n  select_if(~ !any(is.na(.)))\n\n# Combine y and x (keeping transformed predictors)\ndf &lt;- cbind(model.y, model.x)\n\n#write.csv(df, \"C:/Users/Alexis Means/Documents/Project/Nutrition Sampling/R code/biomass/processed.data/24and25.prepped.biomass.db\")"
  },
  {
    "objectID": "posts/post-with-code/creating.biomass.regressions.html#create-regression-equations",
    "href": "posts/post-with-code/creating.biomass.regressions.html#create-regression-equations",
    "title": "Creating Regression Equations",
    "section": "Create Regression Equations",
    "text": "Create Regression Equations\n\nSpecies Level\n#| eval: false\n#select only species with 10 or more observations of biomass\nspecies.df &lt;- df %&gt;% filter(n.Species &gt;= 10)\nspecies.df$Spp &lt;- as.character(species.df$Spp)\nspecies.names &lt;- unique(species.df$Spp)\nspecies.model.list &lt;- list()\n\nfor(i in seq_along(species.names)) {\n  species.name &lt;- species.names[i]\n\n  dat &lt;- species.df %&gt;% filter(Spp == species.name)\n\n  y &lt;- dat$DryWeight\n  X &lt;- dat[, colnames(model.x)]  # only use the predictors\n\n  # remove constant columns\n  X &lt;- X[, apply(X, 2, sd) &gt; 0]\n\n  # correlation filter\n  cor.matrix &lt;- cor(X, use = \"pairwise.complete.obs\")\n  high.cor &lt;- findCorrelation(cor.matrix, cutoff = 0.6)\n  X &lt;- X[, -high.cor]\n\n  z &lt;- cbind(y, X)\n\n  # fit model, dredge, select top model\n  gm &lt;- lm(y ~ 0 + ., data = z, na.action = na.fail)\n  model.set &lt;- dredge(global.model = gm,\n                      beta = 'sd',\n                      evaluate = TRUE,\n                      rank = 'AICc',\n                      m.lim = c(1,6),\n                      trace = FALSE)\n  best.model &lt;- get.models(model.set, 1)[[1]]\n\n  # store with proper name\n  species.model.list[[species.name]] &lt;- best.model\n\n  message(paste0(i, \"/\", length(species.names), \" Species Completed\"))\n}\n\nnames(species.model.list)\n\n#save R object for species regressions in case R crashes\n#saveRDS(species.model.list, 'C:/Users/Alexis Means/Documents/Project/Nutrition Sampling/R code/biomass/regression_equations/24and25-Biomass-Regression-Species-Top-Model-List.rds')\n\n#clean up global environment\nrm(z,gm,dat,best.model,model.set,species.df,i)\n\n\nGenus Equations\n#| eval: false\n#filter data\ngenus.df &lt;- df %&gt;%\n  filter(n.Genus &gt;= 10)\n\ngenus.df$Genus &lt;- as.character(genus.df$Genus)\n# create empty list\ngenus.model.list &lt;- list()\n\n# get unique genera once\ngenus.names &lt;- unique(genus.df$Genus)\n\n# loop through each genus\nfor(i in seq_along(genus.names)) {\n\n  genus.name &lt;- genus.names[i]  # current genus\n  dat &lt;- genus.df %&gt;%\n    filter(Genus == genus.name)  # filter for this genus\n\n  y &lt;- dat$DryWeight\n  X &lt;- dat[, colnames(model.x)]\n\n  # remove columns with constant values\n  X &lt;- X[, apply(X, 2, sd) &gt; 0]\n\n  # create correlation matrix to identify correlated predictors\n  cor.matrix &lt;- cor(X, use = \"pairwise.complete.obs\")\n  high.cor &lt;- findCorrelation(cor.matrix, cutoff = 0.6)\n\n  # remove highly correlated columns\n  X &lt;- X[, -high.cor]\n\n  # bind regression data\n  z &lt;- cbind(y, X)\n  rm(cor.matrix, X, y, high.cor)\n\n  # fit global model\n  gm &lt;- lm(y ~ 0 + ., data = z, na.action = na.fail)\n\n  # stepwise model selection\n  model.set &lt;- dredge(global.model = gm,\n                      beta = 'sd',\n                      evaluate = TRUE,\n                      rank = 'AICc',\n                      m.lim = c(1,6),\n                      trace = FALSE)\n\n  # grab top model\n  best.model &lt;- get.models(model.set, 1)[[1]]\n\n  # store best model with genus name\n  genus.model.list[[genus.name]] &lt;- best.model\n\n  # print progress\n  message(paste0(i, \"/\", length(genus.names), \" Genera Completed\"))\n}\n\n# check names\nnames(genus.model.list)\n\n#save genus level regression data\n#saveRDS(genus.model.list, 'C:/Users/Alexis Means/Documents/Project/Nutrition Sampling/R code/biomass/regression_equations/24and25-Biomass-Regression-Genus-Top-Model-List.rds')\n\n#clean global environment\nrm(dat,genus.df,gm,model.set,z,best.model)\n\n\nFamily Equations\n#| eval: false\n#filter data frame\nfamily.df = df %&gt;%\n  filter(n.Family &gt;= 10)\n\nfamily.df$Family &lt;- as.character(family.df$Family)\n\n#create empty list\nfamily.model.list = list()\n\n# get unique genera once\nfamily.names &lt;- unique(family.df$Family)\n\n\n# Family regression loop\nfor(i in seq_along(family.names)) {\n  family.name &lt;- family.names[i]\n\n  # Filter for current family\n  dat &lt;- family.df %&gt;% filter(Family == family.name)\n\n  y &lt;- dat$DryWeight\n  X &lt;- dat[, colnames(model.x), drop = FALSE]\n\n  # Remove constant columns\n  X &lt;- X[, apply(X, 2, sd) &gt; 0, drop = FALSE]\n\n  # Correlation filter\n  cor.matrix &lt;- cor(X, use = \"pairwise.complete.obs\")\n  high.cor &lt;- findCorrelation(cor.matrix, cutoff = 0.6)\n  X &lt;- X[, -high.cor, drop = FALSE]\n\n  # Bind regression data\n  z &lt;- cbind(y, X)\n\n  # Fit model, dredge, select top model\n  gm &lt;- lm(y ~ 0 + ., data = z, na.action = na.fail)\n  model.set &lt;- dredge(global.model = gm,\n                      beta = 'sd',\n                      evaluate = TRUE,\n                      rank = 'AICc',\n                      m.lim = c(1,6),\n                      trace = FALSE)\n  best.model &lt;- get.models(model.set, 1)[[1]]\n\n  # Store best model with proper name\n  family.model.list[[family.name]] &lt;- best.model\n\n  # Print iteration\n  message(paste0(i, \"/\", length(family.names), \" Families Completed\"))\n}\n\nnames(family.model.list)\n\n#save genus level regression data\n#saveRDS(family.model.list, 'C:/Users/Alexis Means/Documents/Project/Nutrition Sampling/R code/biomass/regression_equations/24and25-Biomass-Regression-Family-Top-Model-List.rds')\n\n\n\nFunctional Group Equations\n#| eval: false\n# filter data frame\nfunctional.group.df &lt;- df %&gt;%\n  filter(n.FunctionalGroup &gt;= 10)\n\nfunctional.group.df$FunctionalGroup &lt;- as.character(functional.group.df$FunctionalGroup)\n# create empty list\nfunctional.group.model.list &lt;- list()\n\n# get unique functional groups once\nfg.names &lt;- unique(functional.group.df$FunctionalGroup)\n\n\n# loop through each functional group\nfor(i in seq_along(fg.names)) {\n\n  fg.name &lt;- fg.names[i]  # current functional group\n  dat &lt;- functional.group.df %&gt;%\n    filter(FunctionalGroup == fg.name)  # filter for this group\n\n  y &lt;- dat$DryWeight\n  X &lt;- dat[, colnames(model.x)]\n\n  # remove columns with constant values\n  X &lt;- X[, apply(X, 2, sd) &gt; 0]\n\n  # create correlation matrix to identify correlated predictors\n  cor.matrix &lt;- cor(X, use = \"pairwise.complete.obs\")\n  high.cor &lt;- findCorrelation(cor.matrix, cutoff = 0.6)\n\n  # remove highly correlated columns\n  X &lt;- X[, -high.cor]\n\n  # bind regression data\n  z &lt;- cbind(y, X)\n  rm(cor.matrix, X, y, high.cor)\n\n  # fit global model\n  gm &lt;- lm(y ~ 0 + ., data = z, na.action = na.fail)\n\n  # stepwise model selection\n  model.set &lt;- dredge(global.model = gm,\n                      beta = 'sd',\n                      evaluate = TRUE,\n                      rank = 'AICc',\n                      m.lim = c(1,6),\n                      trace = FALSE)\n\n  # grab top model\n  best.model &lt;- get.models(model.set, 1)[[1]]\n\n  # store best model with functional group name\n  functional.group.model.list[[fg.name]] &lt;- best.model\n\n  # print progress\n  message(paste0(i, \"/\", length(fg.names), \" Functional Groups Completed\"))\n}\n\n# check names\nnames(functional.group.model.list)\n\n#save genus level regression data\n#saveRDS(functional.group.model.list, \"C:/Users/Alexis Means/Documents/Project/Nutrition Sampling/R code/biomass/regression_equations/24and25-Biomass-Regression-Functional-Group-Top-Model-List.rds\")\n\n#clean up global environment\nrm(best.model,dat, family.df,gm,model.set,model.x,model.y,z,i)"
  },
  {
    "objectID": "posts/post-with-code/Veg.Overview.html#total-transects-sampled",
    "href": "posts/post-with-code/Veg.Overview.html#total-transects-sampled",
    "title": "John Day Vegetation Recap",
    "section": "",
    "text": "Between 2024 and 2025, we sampled 109 transects across six different vegetation communities in the canyon. Most of these were in Grassland (58 transects), with fewer in Intermediate (13), Riparian (12), Scabland (11), Shrubland (11), and Sparse (4). The number of transects in each community reflected how much of the study area that community covered, based on Landfire data. Since Grassland makes up more than 85% of the site, it naturally had the most sampling, while the other communities only covered about 1–5% each. As you all know, there are plenty of rocky(sparse) areas that sheep often use, but because they were tough to get to and didn’t usually have much plant diversity, we ended up sampling fewer transects within these communities. Still, I think the sampling we did was enough to capture what’s going on in that community.\n\n\nCode\nlibrary(ggplot2)\n\nggplot(transect, aes (x = PVT))+\n  geom_bar(fill = \"darkblue\")+\n  labs(title = \"Number of Transects Sampled\",\n       x = \"PVT Type\",\n       y = \"Count\") +\n  theme_grey()"
  },
  {
    "objectID": "posts/post-with-code/Veg.Overview.html#timing-of-sampling",
    "href": "posts/post-with-code/Veg.Overview.html#timing-of-sampling",
    "title": "John Day Vegetation Recap",
    "section": "",
    "text": "In our first year, we focused heavily on the grassland community and sampled transects more strictly in proportion to the area each vegetation community covered. Grassland was sampled two to three times a week, with fewer visits to the other communities, which didn’t give us much coverage outside grassland. In the second year, we shifted more effort toward the other vegetation communities to better capture their phenology timing.\nThe first graph shows the timing of transects were sampled in both 2024 and 2025, and the second gives a better picture of how the sampling timing overlapped for each vegetation community in both years. Overall, I think we did a good job filling gaps in the smaller (but equally important) vegetation communities, giving us a clearer picture of how phenology timing varies across them.\n\n\nCode\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(lubridate)\n\ntransect &lt;- transect %&gt;% \n  mutate (Year = year(Date))\n\nggplot(transect, aes(x = Date, y = PVT)) +\n         geom_point(color = \"blue\")+\n         scale_x_date(date_labels = \"%b\")+\n         labs(title = \"Sampling Dates\",\n              x = \"Month\",\n              y = \"PVT Category\") +\n         facet_wrap(~ Year, scales = \"free_x\") +\n         theme_bw()\n\n\n\n\n\n\n\n\n\n\n\nCode\ntransect &lt;- transect %&gt;% \n mutate(DOY = yday(Date),\n        Year = factor(year(Date)))\n\nggplot(transect, aes(x = DOY, y = PVT, color = Year)) +\n         geom_point()+\n         scale_x_continuous(breaks = c( 75, 105, 136, 166, 197, 228),\n                      labels = c(\"March\", \"Apr\", \"May\", \"June\", \"July\", \"Aug\"))+\n         labs(title = \"Sampling Dates\",\n              x = \"Month\",\n              y = \"PVT Category\",\n              color = \"Year\") +\n         theme_bw()"
  },
  {
    "objectID": "posts/post-with-code/Veg.Overview.html#sample-locations",
    "href": "posts/post-with-code/Veg.Overview.html#sample-locations",
    "title": "John Day Vegetation Recap",
    "section": "",
    "text": "I also wanted to share a visual of where our transects were distributed. In the first year, since we didn’t yet have collar data on summer movements, we focused on a boundary within two miles of the river, prioritizing points closer to the river over those further away on top of the canyon.\nIn the second year, we refined the boundary using GPS data from the previous summer. The shape stayed similar but narrowed further into the canyon. The extra floats were a big help for reaching those tougher spots at the bottom of the canyon (thanks again to everyone who helped with those!). Overall, I’m really happy with how the distribution turned out. The only areas with lighter sampling were on the West side where access was limited, but the floats went a long way toward filling in those gaps.\n\n\nCode\nlibrary(ggmap)\n\n#plot without map in background\nggplot(transect, aes(x = easting, y = northing, color = PVT))+\n  geom_point(size = 2, alpha = 0.8)+\n  scale_color_manual (values = c(\n    \"Grassland\" = \"green\",\n    \"Riparian\" = \"blue\",\n    \"Sparse\" = \"brown\",\n    \"Intermediate\" = \"yellow\",\n    \"Scabland\" = \"purple\",\n    \"Shrubland\" = \"red\"\n  ))+\n  labs(title = \"Sample locations within the John Day\",\n       x = \"Easting\",\n       y = \"Northing\",\n       color = \"Vegetation Type\")+\n  theme_minimal()+\n  theme(legend.position = \"right\")"
  },
  {
    "objectID": "posts/post-with-code/Veg.Overview.html#overall-timing",
    "href": "posts/post-with-code/Veg.Overview.html#overall-timing",
    "title": "John Day Vegetation Recap",
    "section": "Overall timing",
    "text": "Overall timing\nNext, I wanted to look at the overall timing of green-up in the canyon. The first graph combines results from both summers. As expected, the peak of “New” growth is around March–April, while the biggest transition to “Cured” plants occurs around May–June. It’s neat to see this line up with what Emily found regarding the birth pulse, with the most new (and highly nutritious) forage coinciding with peak lambing.\nI also compared the timing between years. Overall, the trends look fairly similar. Anecdotally, I thought green-up in 2025 might have moved faster due to lower rainfall, but that doesn’t seem to be reflected in the month-to-month observations.\n(P.S. The graphs for this section are interactive! If you are interested, you can hover over each box to see the actual percentages of each group and compare them across months.)\n\n\nCode\nlibrary(plotly)\ncomp &lt;- read_excel(db, \"Composition\")\n\ncomp &lt;- comp %&gt;%\n  mutate(Date = ymd(Date)) %&gt;% \n   mutate(DOY = yday(Date),\n        Month = month(Date, label = TRUE),\n        Year = factor(year(Date))) %&gt;% \n    filter(!Spp %in% c(\"LITTER\", \"LICHEN\", \"ROCKS\", \"WATER\", \"EARTH\", \"DEADFALL\", \"NA\")) %&gt;% \n  mutate(PVT = substr(PlotID, 4, 6)) %&gt;% \n  mutate(Pheno = na_if(Pheno, \"NA\")) %&gt;% \n  filter(!is.na(Pheno))\n\n\ncomp &lt;- comp %&gt;% \n  mutate(\n    Pheno = case_when(\n      Pheno == \"N\" ~ \"New\",\n      Pheno == \"B\" ~ \"Budding\",\n      Pheno == \"FL\" ~ \"Flowering\",\n      Pheno == \"FR\" ~ \"Fruiting\",\n      Pheno == \"M\" ~ \"Mature\",\n      Pheno == \"C\" ~ \"Cured\",\n      TRUE ~ Pheno\n    ),\n    PVT = case_when(\n      PVT == \"672\" ~ \"Grassland\",\n      PVT == \"682\" ~ \"Riparian\",\n      PVT == \"660\" ~ \"Sparse\",\n      PVT == \"668\" ~ \"Scabland\",\n      PVT == \"669\" ~ \"Shrubland\",\n      PVT == \"674\" ~ \"Intermediate\",\n      \n    )\n  ) \n\ncomp$Pheno &lt;- factor(comp$Pheno, \n                       levels = c(\"New\", \"Budding\", \"Flowering\", \"Fruiting\", \"Mature\", \"Cured\"),\n                       ordered = TRUE)\n\ncomp_plot &lt;- comp %&gt;%\n  count(Month, Pheno) %&gt;%\n  group_by(Month) %&gt;%\n  mutate(prop = n / sum(n)) %&gt;%\n  ungroup()\n\n\np1 &lt;-  ggplot(comp_plot, aes(x = Month, y = prop, fill = Pheno,\n                           text = paste(\"Phenology:\", Pheno,\n                                        \"&lt;br&gt;Month:\", Month,\n                                        \"&lt;br&gt;Proportion:\", scales::percent(prop)))) +\n  geom_col() +\n  scale_y_continuous(labels = scales::percent) +\n  labs(y = \"Proportion\", x = \"Month\", fill = \"Phenology stage\") +\n  theme_minimal()\n\n# Convert to interactive Plotly plot\nggplotly(p1, tooltip = \"text\")\n\n\n\n\n\n\n\n\nCode\n# Prepare the data\ndf_plot &lt;- comp %&gt;%\n  count(Year, Month, Pheno) %&gt;%\n  group_by(Year, Month) %&gt;%\n  mutate(prop = n / sum(n))\n\n# Base ggplot\np &lt;- ggplot(df_plot, aes(x = Month, y = prop, fill = Pheno,\n                         text = paste(\"Phenology:\", Pheno,\n                                      \"&lt;br&gt;Month:\", Month,\n                                      \"&lt;br&gt;Year:\", Year,\n                                      \"&lt;br&gt;Proportion:\", scales::percent(prop)))) +\n  geom_col() +\n  scale_y_continuous(labels = scales::percent) +\n  labs(y = \"Proportion\", x = \"Month\", fill = \"Phenology stage\") +\n  facet_wrap(~Year, ncol = 1) +\n  theme_minimal()\n\n# Convert to interactive plotly plot\nggplotly(p, tooltip = \"text\")\n\n\n\n\n\n\n\n\nCode\ncomp %&gt;%\n  count(Month, Pheno) %&gt;%\n  group_by(Month) %&gt;%\n  mutate(prop = n / sum(n)) %&gt;%\n  ggplot(aes(x = Month, y = prop, color = Pheno, group = Pheno)) +\n  geom_smooth(se = FALSE, method = \"loess\", span = 0.8, size = 1.2) +\n  geom_point(size = 2) +\n  scale_y_continuous(labels = scales::percent) +\n  labs(y = \"Proportion\", x = \"Month\", color = \"Phenology stage\") +\n  theme_minimal()"
  },
  {
    "objectID": "posts/post-with-code/Veg.Overview.html#timing-by-vegetation-community",
    "href": "posts/post-with-code/Veg.Overview.html#timing-by-vegetation-community",
    "title": "John Day Vegetation Recap",
    "section": "Timing by Vegetation Community",
    "text": "Timing by Vegetation Community\nI was also curious to see how green-up timing varied across the different vegetation communities, especially in the riparian areas. The timing in Grassland, Intermediate, and Shrubland communities was fairly similar, while Scabland and Sparse areas progressed the fastest. As expected, the Riparian areas showed a slower progression through green-up compared to the other communities, likely providing more nutritious forage into late June or early July—just as lactation is hopefully slowing for many of the ewes.\n\n\nCode\npvt_comp &lt;- comp %&gt;%\n  count(PVT, Month, Pheno) %&gt;%\n  group_by(PVT, Month) %&gt;%\n  mutate(prop = n / sum(n)) %&gt;%\n  ungroup()\n\n\np2 &lt;- ggplot(pvt_comp, aes(x = Month, y = prop, fill = Pheno,\n                          text = paste(\"Vegetation community:\", PVT,\n                                       \"&lt;br&gt;Phenology:\", Pheno,\n                                       \"&lt;br&gt;Month:\", Month,\n                                       \"&lt;br&gt;Proportion:\", scales::percent(prop)))) +\n  geom_col() +\n  scale_y_continuous(labels = scales::percent) +\n  labs(y = \"Proportion\", x = \"Month\", fill = \"Phenology stage\") +\n  facet_wrap(~PVT, ncol = 2) +\n  theme_minimal()\n\n\nggplotly(p2, tooltip = \"text\")\n\n\n\n\n\n\nbiomass overtime?"
  },
  {
    "objectID": "posts/post-with-code/Veg.Overview.html#top-grass-species",
    "href": "posts/post-with-code/Veg.Overview.html#top-grass-species",
    "title": "John Day Vegetation Recap",
    "section": "Top Grass Species",
    "text": "Top Grass Species\nThese first graphs shows the overall trend in quality metrics for different functional groups we observed. The dashed lines represent the energetic demand thresholds for a lactating female sheep. In theory, any species falling in the upper-right quadrant meets these energetic demands in a gram of forage. That said, these metrics don’t account for biomass, so take them with a grain of salt—some species may still make a substantial contribution to the total suitable biomass when available in larger quantities.\nI’m still working on biomass predictions, which will help determine how much suitable forage exists within the areas we sampled before scaling up to the landscape level. I hope to have those results soon.\n(this one is interactive too)\n\n\nCode\ndb &lt;- \"C:/Users/Alexis Means/Documents/Project/Nutrition Sampling/VegDatabases/Working.composition.data.xlsx\"\nq &lt;- \"C:/Users/Alexis Means/Documents/Project/Nutrition Sampling/R code/quality/processed.data/24_quality_results.xlsx\"\n\nquality &lt;- read_excel(q, \"24_quality_results\")\nplant &lt;- read_excel(db, \"PlantList\")\n\nplant &lt;- plant %&gt;% \n  select(Spp, Family, Genus, Species, FunctionalGroup, FG_New, Status)\n\nquality &lt;- quality %&gt;% \n  select(Sample_ID, PVT, Spp, Pheno, Part, DP, DE) %&gt;% \n  left_join(plant, by = \"Spp\")\n\ngrass &lt;- quality %&gt;% \n  filter(str_detect(FunctionalGroup, \"G\")) %&gt;% \n  filter(Spp != \"UNK GRASS\") %&gt;% \n  filter(!Sample_ID %in% c(251, 275, 264))\n\n\n# Create ggplot with dashed reference lines\np &lt;- ggplot(grass, aes(\n  x = DE,\n  y = DP,\n  color = Status,\n  text = paste0( \n    \"Spp: \", Spp, \n    \"&lt;br&gt;Pheno: \", Pheno, \n    \"&lt;br&gt;Part: \", Part,\n    \"&lt;br&gt;Status: \", Status,\n    \"&lt;br&gt;DE: \", round(DE, 2),\n    \"&lt;br&gt;DP: \", round(DP, 2)\n  )\n)) +\n  geom_point(size = 4) +\n  geom_vline(xintercept = 11.5, linetype = \"dashed\", color = \"gray50\") +\n  geom_hline(yintercept = 7.5, linetype = \"dashed\", color = \"gray50\") +\n  labs(\n    title = \"Overall Quality Metrics of Observed Grasses\",\n    x = \"DE\",\n    y = \"DP\",\n    color = \"Status\"\n  ) +\n  theme_minimal(base_size = 12)\n\n# Convert to interactive Plotly plot\np_plotly &lt;- ggplotly(p, tooltip = \"text\") %&gt;%\n  layout(\n    showlegend = TRUE,\n    legend = list(\n      title = list(text = \"\"),\n      orientation = \"h\",   # horizontal\n      x = 0.5,             # center horizontally\n      y = -0.2,            # below the x-axis\n      xanchor = \"center\",\n      yanchor = \"top\"\n    )\n  )\n\np_plotly\n\n\n\n\n\n\nThis graph is a zoomed-in look at the previous one, focusing only on the species that landed in the upper right quadrant. As expected, cheatgrass and ripgut brome came out on top for grass species with the highest quality metrics, with bluebunch wheatgrass and basin wildrye not far behind. It’s worth noting that all of these measurements were taken when the species were still in their newly emergent stage.\n(this one is not sorry)\n\n\nCode\nlibrary(ggrepel)  # optional, for non-overlapping labels\n\n# Create plot\nggplot(grass, aes(x = DE, y = DP)) +\n  geom_point(aes(color = Status), size = 3) +  # points colored by Status\n  # Label each point\n  geom_text_repel(aes(label = paste(Spp, Pheno, sep = \"_\")), size = 3) +  # uses ggrepel to avoid overlap\n  # Set axis starting points\n  xlim(11, max(grass$DE) + 0.5) +\n  ylim(7, max(grass$DP) + 0.5) +\n  labs(\n    title = \"Top Grass Species\",\n    x = \"DE\",\n    y = \"DP\",\n    color = \"Status\"\n  ) +\n  theme_minimal(base_size = 12)"
  },
  {
    "objectID": "posts/post-with-code/Veg.Overview.html#top-forb-species",
    "href": "posts/post-with-code/Veg.Overview.html#top-forb-species",
    "title": "John Day Vegetation Recap",
    "section": "Top Forb Species",
    "text": "Top Forb Species\nLooking at the forbs is a little more chaotic. There are more species that meet both the DE and DP thresholds, but there are still a substantial number that fall below those thresholds.\n\n\nCode\nforb &lt;- quality %&gt;% \n  filter(str_detect(FunctionalGroup, \"F\")) %&gt;% \n  filter(!Sample_ID %in% \"308\")\n\n#remove lara-FL\n\n\np2 &lt;- ggplot(forb, aes(\n  x = DE,\n  y = DP,\n  color = Status,\n  text = paste0( \n    \"Spp: \", Spp, \n    \"&lt;br&gt;Pheno: \", Pheno, \n    \"&lt;br&gt;Part: \", Part,\n    \"&lt;br&gt;Status: \", Status,\n    \"&lt;br&gt;DE: \", round(DE, 2),\n    \"&lt;br&gt;DP: \", round(DP, 2)\n  )\n)) +\n  geom_point(size = 3) +\n  geom_vline(xintercept = 11.5, linetype = \"dashed\", color = \"gray50\") +\n  geom_hline(yintercept = 7.5, linetype = \"dashed\", color = \"gray50\") +\n  labs(\n    title = \"Overall Quality Metrics of Observed Forbs\",\n    x = \"DE\",\n    y = \"DP\",\n    color = \"Status\"\n  ) +\n  theme_minimal(base_size = 12) \n\n# Convert to interactive Plotly plot\n\np2_plotly &lt;- ggplotly(p2, tooltip = \"text\") %&gt;%\n  layout(\n    legend = list(\n      title = list(text = \"\"),\n      orientation = \"h\",   # horizontal\n      x = 0.5,             # center horizontally\n      y = -0.2,            # below the x-axis\n      xanchor = \"center\",\n      yanchor = \"top\"\n    )\n  )\n\np2_plotly\n\n\n\n\n\n\nInstead of making everyone test their knowledge of plant codes, I put together a quick cheat sheet for the species included in this figure.\nIt is interesting to see that most of the species that fall above both the DE and DP thresholds are various Lomatiums and Balsamroots which are everywhere in the spring and typically what we observed the sheep snacking on the most during our hours of observation. There also is several phenologies of the Lupine species—but obviously those aren’t edible for the sheep.\n\n\nCode\n# Create plot\nggplot(forb, aes(x = DE, y = DP)) +\n  geom_point(aes(color = Status), size = 3) +  # points colored by Status\n  # Label each point\n  geom_text_repel(aes(label = paste(Spp, Pheno, sep = \"_\")), size = 3) +  # uses ggrepel to avoid overlap\n  # Set axis starting points\n  xlim(11, max(grass$DE) + 0.5) +\n  ylim(7, 18) +\n  labs(\n    title = \"Top Forb Species\",\n    x = \"DE\",\n    y = \"DP\",\n    color = \"Status\"\n  ) +\n  theme_minimal(base_size = 12)"
  },
  {
    "objectID": "posts/post-with-code/Veg.Overview.html#top-shrub-species",
    "href": "posts/post-with-code/Veg.Overview.html#top-shrub-species",
    "title": "John Day Vegetation Recap",
    "section": "Top Shrub Species",
    "text": "Top Shrub Species\nLastly I lumped all of the Tree/Vine/Shrubs into one group. Again there are consistent low metrics for most of the species.\n\n\nCode\nshrub &lt;- quality %&gt;% \n filter(FunctionalGroup %in% c(\"ES\", \"S\", \"T\", \"V\"))\n\n\np3 &lt;- ggplot(shrub, aes(\n  x = DE,\n  y = DP,\n  color = Status,   # still mapped for tooltip/legend\n  text = paste0( \n    \"Spp: \", Spp, \n    \"&lt;br&gt;Pheno: \", Pheno, \n    \"&lt;br&gt;Part: \", Part,\n    \"&lt;br&gt;Status: \", Status,\n    \"&lt;br&gt;DE: \", round(DE, 2),\n    \"&lt;br&gt;DP: \", round(DP, 2)\n  )\n)) +\n  geom_point(size = 4, color = \"#12bec7\") +\n  geom_vline(xintercept = 11.5, linetype = \"dashed\", color = \"gray50\") +\n  geom_hline(yintercept = 7.5, linetype = \"dashed\", color = \"gray50\") +\n  labs(\n    title = \"Overall Quality Metrics of Observed Shrubs/Trees\",\n    x = \"DE\",\n    y = \"DP\",\n    color = \"Status\"\n  ) +\n  theme_minimal(base_size = 12)\n\np3_plotly &lt;- ggplotly(p3, tooltip = \"text\") %&gt;%\n  layout(\n    legend = list(\n      title = list(text = \"\"),\n      orientation = \"h\",   # horizontal\n      x = 0.5,             # center horizontally\n      y = -0.2,            # below the x-axis\n      xanchor = \"center\",\n      yanchor = \"top\"\n    )\n  )\n\np3_plotly\n\n\n\n\n\n\n\n\nCode\n# Create plot\nggplot(shrub, aes(x = DE, y = DP)) +\n  geom_point(aes(color = Status), size = 3) +  # points colored by Status\n  # Label each point\n  geom_text_repel(aes(label = paste(Spp, Pheno, sep = \"_\")), size = 3) +  # uses ggrepel to avoid overlap\n  # Set axis starting points\n  xlim(11, max(grass$DE) + 0.5) +\n  ylim(7, max(grass$DP) + 0.5) +\n  labs(\n    title = \"Top Shrub or Tree Species\",\n    x = \"DE\",\n    y = \"DP\",\n    color = \"Status\"\n  ) +\n  theme_minimal(base_size = 12)\n\n\n\n\n\n\n\n\n\nIt was interesting to notice that digestible protein values stayed pretty low across most species, no matter the functional group or phenology stage. This matches up with what Katey was seeing in Asotin Creek. I’m hoping the suitable biomass measurements will give us a better idea of how this population does so well even when many of the plants don’t seem all that nutrient-rich. My guess is that the sheer volume they’re able to consume of some of the species has a lot to do with it."
  },
  {
    "objectID": "posts/post-with-code/testing_predict_assumptons.html#r2-aic-and-coefficients",
    "href": "posts/post-with-code/testing_predict_assumptons.html#r2-aic-and-coefficients",
    "title": "Checking Bio Predict Assumptions",
    "section": "R2, AIC and Coefficients",
    "text": "R2, AIC and Coefficients\nA lot of the r-squared values look much better. The FG results still do not look great.\n\n\nCode\nspp &lt;- \"C:/Users/Alexis Means/Documents/Project/Nutrition Sampling/R code/biomass/processed.data/spp_models_diagnostics.xlsx\"\n\nspp_predictions &lt;- read_excel(spp, \"Sheet1\")\n\ndatatable(spp_predictions, options = list(pageLength = 10))\n\n\n\n\n\n\n\n\nCode\ngenus &lt;- \"C:/Users/Alexis Means/Documents/Project/Nutrition Sampling/R code/biomass/processed.data/genus_models_diagnostics.xlsx\"\n\ngenus_predictions &lt;- read_excel(genus, \"Sheet1\")\n\ndatatable(genus_predictions, options = list(pageLength = 10))\n\n\n\n\n\n\n\n\nCode\nfam &lt;- \"C:/Users/Alexis Means/Documents/Project/Nutrition Sampling/R code/biomass/processed.data/family_models_diagnostics.xlsx\"\n\nfam_predictions &lt;- read_excel(fam, \"Sheet1\")\n\ndatatable(fam_predictions, options = list(pageLength = 10))\n\n\n\n\n\n\n\n\nCode\nfg &lt;- \"C:/Users/Alexis Means/Documents/Project/Nutrition Sampling/R code/biomass/processed.data/fg_models_diagnostics.xlsx\"\n\nfg_predictions &lt;- read_excel(fg, \"Sheet1\")\n\ndatatable(fg_predictions, options = list(pageLength = 10))"
  }
]