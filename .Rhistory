x = "DE",
y = "DP",
color = "Status"
) +
theme_minimal(base_size = 12)
# Set finite bounds for rectangles
DE_min <- min(grass$DE) - 0.5
DE_max <- max(grass$DE) + 0.5
DP_min <- min(grass$DP) - 0.5
DP_max <- max(grass$DP) + 0.5
ggplot(grass, aes(x = DE, y = DP)) +
# Quadrants (draw first so points are on top)
geom_rect(aes(xmin = DE_thresh, xmax = DE_max, ymin = DP_thresh, ymax = DP_max),
fill = "green", alpha = 0.2, inherit.aes = FALSE) +  # Upper right
geom_rect(aes(xmin = DE_min, xmax = DE_thresh, ymin = DP_min, ymax = DP_thresh),
fill = "red", alpha = 0.2, inherit.aes = FALSE) +    # Lower left
geom_rect(aes(xmin = DE_min, xmax = DE_thresh, ymin = DP_thresh, ymax = DP_max),
fill = "yellow", alpha = 0.2, inherit.aes = FALSE) + # Upper left
geom_rect(aes(xmin = DE_thresh, xmax = DE_max, ymin = DP_min, ymax = DP_thresh),
fill = "yellow", alpha = 0.2, inherit.aes = FALSE) + # Lower right
# Points
geom_point(aes(color = Status), size = 4) +
# Threshold lines
geom_vline(xintercept = DE_thresh, linetype = "dashed", color = "gray50") +
geom_hline(yintercept = DP_thresh, linetype = "dashed", color = "gray50") +
labs(
title = "Overall Quality Metrics of Observed Grasses",
x = "DE",
y = "DP",
color = "Status"
) +
theme_minimal(base_size = 12)
library(ggplot2)
# Thresholds
DE_thresh <- 11.5
DP_thresh <- 7.5
# Set finite bounds for rectangles
DE_min <- min(grass$DE) - 0.5
DE_max <- max(grass$DE) + 0.5
DP_min <- min(grass$DP) - 0.5
DP_max <- max(grass$DP) + 0.5
ggplot(grass, aes(x = DE, y = DP)) +
# Quadrants (draw first so points are on top)
geom_rect(aes(xmin = DE_thresh, xmax = DE_max, ymin = DP_thresh, ymax = DP_max),
fill = "green", alpha = 0.2, inherit.aes = FALSE) +  # Upper right
geom_rect(aes(xmin = DE_min, xmax = DE_thresh, ymin = DP_min, ymax = DP_thresh),
fill = "red", alpha = 0.2, inherit.aes = FALSE) +    # Lower left
geom_rect(aes(xmin = DE_min, xmax = DE_thresh, ymin = DP_thresh, ymax = DP_max),
fill = "yellow", alpha = 0.2, inherit.aes = FALSE) + # Upper left
geom_rect(aes(xmin = DE_thresh, xmax = DE_max, ymin = DP_min, ymax = DP_thresh),
fill = "yellow", alpha = 0.2, inherit.aes = FALSE) + # Lower right
# Points
geom_point(aes(color = Status), size = 4) +
# Threshold lines
geom_vline(xintercept = DE_thresh, linetype = "dashed", color = "gray50") +
geom_hline(yintercept = DP_thresh, linetype = "dashed", color = "gray50") +
labs(
title = "Overall Quality Metrics of Observed Grasses",
x = "DE",
y = "DP",
color = "Status"
) +
theme_minimal(base_size = 12)
ggplot(grass, aes(x = DE, y = DP)) +
# Quadrants (draw first so points are on top)
geom_rect(aes(xmin = DE_thresh, xmax = DE_max, ymin = DP_thresh, ymax = DP_max),
fill = "green", alpha = 0.2, inherit.aes = FALSE) +  # Upper right
geom_rect(aes(xmin = DE_min, xmax = DE_thresh, ymin = DP_min, ymax = DP_thresh),
fill = "red", alpha = 0.2, inherit.aes = FALSE) +    # Lower left
geom_rect(aes(xmin = DE_min, xmax = DE_thresh, ymin = DP_thresh, ymax = DP_max),
fill = "yellow", alpha = 0.2, inherit.aes = FALSE) + # Upper left
geom_rect(aes(xmin = DE_thresh, xmax = DE_max, ymin = DP_min, ymax = DP_thresh),
fill = "yellow", alpha = 0.2, inherit.aes = FALSE) + # Lower right
# Points
geom_point(aes(color = Status), size = 4) +
# Threshold lines
geom_vline(xintercept = DE_thresh, linetype = "dashed", color = "gray50") +
geom_hline(yintercept = DP_thresh, linetype = "dashed", color = "gray50") +
labs(
title = "Overall Quality Metrics of Observed Grasses",
x = "DE",
y = "DP",
color = "Status"
) +
theme_minimal(base_size = 12)
library(ggrepel)  # optional, for non-overlapping labels
install.packages("ggrepel")
library(ggrepel)  # optional, for non-overlapping labels
# Create plot
ggplot(grass, aes(x = DE, y = DP)) +
geom_point(aes(color = Status), size = 3) +  # points colored by Status
# Label each point
geom_text_repel(aes(label = Spp), size = 3) +  # uses ggrepel to avoid overlap
# Set axis starting points
xlim(11, max(grass$DE) + 0.5) +
ylim(7, max(grass$DP) + 0.5) +
labs(
title = "DE vs DP for Observed Grasses",
x = "DE",
y = "DP",
color = "Status"
) +
theme_minimal(base_size = 12)
# Create plot
ggplot(grass, aes(x = DE, y = DP)) +
geom_point(aes(color = Status), size = 3) +  # points colored by Status
# Label each point
geom_text_repel(aes(label = Spp, Pheno, sep = "_"), size = 3) +  # uses ggrepel to avoid overlap
# Set axis starting points
xlim(11, max(grass$DE) + 0.5) +
ylim(7, max(grass$DP) + 0.5) +
labs(
title = "DE vs DP for Observed Grasses",
x = "DE",
y = "DP",
color = "Status"
) +
theme_minimal(base_size = 12)
# Create plot
ggplot(grass, aes(x = DE, y = DP)) +
geom_point(aes(color = Status), size = 3) +  # points colored by Status
# Label each point
geom_text_repel(aes(label = paste(Spp, Pheno, sep = "_")), size = 3) +  # uses ggrepel to avoid overlap
# Set axis starting points
xlim(11, max(grass$DE) + 0.5) +
ylim(7, max(grass$DP) + 0.5) +
labs(
title = "DE vs DP for Observed Grasses",
x = "DE",
y = "DP",
color = "Status"
) +
theme_minimal(base_size = 12)
#| warning: FALSE
#| message: false
forb <- quality %>%
filter(str_detect(FunctionalGroup, "F"))
p2 <- ggplot(forb, aes(
x = DE,
y = DP,
color = Status,
text = paste0(
"Spp: ", Spp,
"<br>Pheno: ", Pheno,
"<br>Part: ", Part,
"<br>Status: ", Status,
"<br>DE: ", round(DE, 2),
"<br>DP: ", round(DP, 2)
)
)) +
geom_point(size = 3) +
geom_vline(xintercept = 11.5, linetype = "dashed", color = "gray50") +
geom_hline(yintercept = 7.5, linetype = "dashed", color = "gray50") +
labs(
title = "Overall Quality Metrics of Observed Forbs",
x = "DE",
y = "DP",
color = "Status"
) +
theme_minimal(base_size = 12)
# Convert to interactive Plotly plot
p2_plotly <- ggplotly(p2, tooltip = "text") %>%
layout(
legend = list(
title = list(text = ""),
orientation = "h",   # horizontal
x = 0.5,             # center horizontally
y = -0.2,            # below the x-axis
xanchor = "center",
yanchor = "top"
)
)
p2_plotly
# Create plot
ggplot(forb, aes(x = DE, y = DP)) +
geom_point(aes(color = Status), size = 3) +  # points colored by Status
# Label each point
geom_text_repel(aes(label = paste(Spp, Pheno, sep = "_")), size = 3) +  # uses ggrepel to avoid overlap
# Set axis starting points
xlim(11, max(grass$DE) + 0.5) +
ylim(7, max(grass$DP) + 0.5) +
labs(
title = "Top Forb Species",
x = "DE",
y = "DP",
color = "Status"
) +
theme_minimal(base_size = 12)
# Create plot
ggplot(forb, aes(x = DE, y = DP)) +
geom_point(aes(color = Status), size = 3) +  # points colored by Status
# Label each point
geom_text_repel(aes(label = paste(Spp, Pheno, sep = "_")), size = 3) +  # uses ggrepel to avoid overlap
# Set axis starting points
xlim(11, max(grass$DE) + 0.5) +
ylim(7, 20) +
labs(
title = "Top Forb Species",
x = "DE",
y = "DP",
color = "Status"
) +
theme_minimal(base_size = 12)
# Create plot
ggplot(forb, aes(x = DE, y = DP)) +
geom_point(aes(color = Status), size = 3) +  # points colored by Status
# Label each point
geom_text_repel(aes(label = paste(Spp, Pheno, sep = "_")), size = 3) +  # uses ggrepel to avoid overlap
# Set axis starting points
xlim(11, max(grass$DE) + 0.5) +
ylim(7, 18) +
labs(
title = "Top Forb Species",
x = "DE",
y = "DP",
color = "Status"
) +
theme_minimal(base_size = 12)
#| warning: FALSE
#| message: false
shrub <- quality %>%
filter(FunctionalGroup %in% c("ES", "S", "T", "V"))
topshrub <- shrub %>%
arrange(desc(DE), desc(DP)) %>%
slice_head(n = 10)
p3 <- ggplot(shrub, aes(
x = DE,
y = DP,
color = Status,   # still mapped for tooltip/legend
text = paste0(
"Spp: ", Spp,
"<br>Pheno: ", Pheno,
"<br>Part: ", Part,
"<br>Status: ", Status,
"<br>DE: ", round(DE, 2),
"<br>DP: ", round(DP, 2)
)
)) +
geom_point(size = 4, color = "#12bec7") +
geom_vline(xintercept = 11.5, linetype = "dashed", color = "gray50") +
geom_hline(yintercept = 7.5, linetype = "dashed", color = "gray50") +
labs(
title = "Overall Quality Metrics of Observed Shrubs/Trees",
x = "DE",
y = "DP",
color = "Status"
) +
theme_minimal(base_size = 12)
p3_plotly <- ggplotly(p3, tooltip = "text") %>%
layout(
legend = list(
title = list(text = ""),
orientation = "h",   # horizontal
x = 0.5,             # center horizontally
y = -0.2,            # below the x-axis
xanchor = "center",
yanchor = "top"
)
)
p3_plotly
# Create plot
ggplot(shrub, aes(x = DE, y = DP)) +
geom_point(aes(color = Status), size = 3) +  # points colored by Status
# Label each point
geom_text_repel(aes(label = paste(Spp, Pheno, sep = "_")), size = 3) +  # uses ggrepel to avoid overlap
# Set axis starting points
xlim(11, max(grass$DE) + 0.5) +
ylim(7, max(grass$DP) + 0.5) +
labs(
title = "Top Shrub or Tree Species",
x = "DE",
y = "DP",
color = "Status"
) +
theme_minimal(base_size = 12)
ggplot(grass, aes(
x = DE,
y = DP,
color = Status,
text = paste0(
"Spp: ", Spp,
"<br>Pheno: ", Pheno,
"<br>Part: ", Part,
"<br>Status: ", Status,
"<br>DE: ", round(DE, 2),
"<br>DP: ", round(DP, 2)
)
)) +
geom_point(size = 3) +
facet_wrap(~Status, scales = "free") +   # separate graphs by Status
geom_vline(xintercept = 11.5, linetype = "dashed", color = "gray50") +
geom_hline(yintercept = 7.5, linetype = "dashed", color = "gray50") +
labs(
title = "Grass Quality Metrics by Status",
x = "DE",
y = "DP"
) +
theme_minimal(base_size = 12)
# ggplot with facets
invasive <- ggplot(grass, aes(
x = DE,
y = DP,
color = Status,
text = paste0(
"Spp: ", Spp,
"<br>Pheno: ", Pheno,
"<br>Part: ", Part,
"<br>Status: ", Status,
"<br>DE: ", round(DE, 2),
"<br>DP: ", round(DP, 2)
)
)) +
geom_point(size = 3) +
facet_wrap(~Status, scales = "free") +   # facet into separate panels
geom_vline(xintercept = 11.5, linetype = "dashed", color = "gray50") +
geom_hline(yintercept = 7.5, linetype = "dashed", color = "gray50") +
labs(
title = "Grass Quality Metrics by Status",
x = "DE",
y = "DP"
) +
theme_minimal(base_size = 12)
# Convert to interactive plotly
ggplotly(invasive, tooltip = "text")
status <- plant %>%
select(Spp, Status, FunctionalGroup, FG_New)
df <- comp %>%
left_join(status, by = "Spp")
View(status)
View(df)
df %>%
count(Month, Status) %>%
ggplot(aes(x = Month, y = n, fill = Status)) +
geom_col(position = "dodge") +  # use "stack" for stacked bars
labs(
x = "Month",
y = "Count",
fill = "Status"
) +
theme_minimal()
df %>%
count(PVT, Status) %>%
ggplot(aes(x = PVT, y = n, fill = Status)) +
geom_col(position = "dodge") +  # use "stack" for stacked bars
labs(
x = "PVT",
y = "Count",
fill = "Status"
) +
theme_minimal()
df %>%
count(Month, Status) %>%
group_by(Month) %>%
mutate(prop = n / sum(n)) %>%
ggplot(aes(x = Month, y = prop, fill = Status)) +
geom_col(position = "stack") +
scale_y_continuous(labels = scales::percent) +
labs(
x = "Month",
y = "Proportion",
fill = "Status"
) +
theme_minimal()
df %>%
count(PVT, Status) %>%
group_by(PVT) %>%
mutate(prop = n / sum(n)) %>%
ggplot(aes(x = PVT, y = prop, fill = Status)) +
geom_col(position = "stack") +
scale_y_continuous(labels = scales::percent) +
labs(
x = "PVT",
y = "Proportion",
fill = "Status"
) +
theme_minimal()
db <- "C:/Users/Alexis Means/Documents/Project/Nutrition Sampling/VegDatabases/Working.composition.data.xlsx"
transect <- read_excel(db, "Transect")
transect <- transect %>%
select(-Personnel, -PVTDescrip, -`Temp (F)`, -Moved, -Notes, -MidLat, -MidLong, -EndLat, -EndLong) %>%
mutate(Date = ymd(Date)) %>%
rename(lat = BeginLat,
long = BeginLong)
sf <- st_as_sf(transect, coords = c("long", "lat"), crs = 4326, remove = FALSE)
utm <- st_transform(sf, crs = 32610)
transect$easting <- st_coordinates(utm)[,1]
transect$northing<- st_coordinates(utm)[,2]
transect <- transect %>%
mutate(PVT = recode(PVT,
'672' = "Grassland",
'682' = "Riparian",
'668' = "Scabland",
'669' = "Shrubland",
'674' = "Intermediate",
'660' = "Sparse"))
comp <- read_excel(db, "Composition")
comp <- comp %>%
mutate(Date = ymd(Date)) %>%
mutate(DOY = yday(Date),
Month = month(Date, label = TRUE),
Year = factor(year(Date))) %>%
filter(!Spp %in% c("LITTER", "LICHEN", "ROCKS", "WATER", "EARTH", "DEADFALL", "NA")) %>%
mutate(PVT = substr(PlotID, 4, 6)) %>%
mutate(Pheno = na_if(Pheno, "NA")) %>%
filter(!is.na(Pheno))
comp <- comp %>%
mutate(
Pheno = case_when(
Pheno == "N" ~ "New",
Pheno == "B" ~ "Budding",
Pheno == "FL" ~ "Flowering",
Pheno == "FR" ~ "Fruiting",
Pheno == "M" ~ "Mature",
Pheno == "C" ~ "Cured",
TRUE ~ Pheno
),
PVT = case_when(
PVT == "672" ~ "Grassland",
PVT == "682" ~ "Riparian",
PVT == "660" ~ "Sparse",
PVT == "668" ~ "Scabland",
PVT == "669" ~ "Shrubland",
PVT == "674" ~ "Intermediate",
)
)
comp$Pheno <- factor(comp$Pheno,
levels = c("New", "Budding", "Flowering", "Fruiting", "Mature", "Cured"),
ordered = TRUE)
comp_plot <- comp %>%
count(Month, Pheno) %>%
group_by(Month) %>%
mutate(prop = n / sum(n)) %>%
ungroup()
p1 <-  ggplot(comp_plot, aes(x = Month, y = prop, fill = Pheno,
text = paste("Phenology:", Pheno,
"<br>Month:", Month,
"<br>Proportion:", scales::percent(prop)))) +
geom_col() +
scale_y_continuous(labels = scales::percent) +
labs(y = "Proportion", x = "Month", fill = "Phenology stage") +
theme_minimal()
# Convert to interactive Plotly plot
ggplotly(p1, tooltip = "text")
status <- plant %>%
select(Spp, Status, FunctionalGroup, FG_New)
df <- comp %>%
left_join(status, by = "Spp") %>%
mutate(Pheno = na_if(Pheno, "NA")) %>%
filter(!is.na(Pheno))
df <- comp %>%
left_join(status, by = "Spp")
df <- df %>%
mutate(Pheno = na_if(Status, "NA")) %>%
filter(!is.na(Status))
df %>%
count(Month, Status) %>%
group_by(Month) %>%
mutate(prop = n / sum(n)) %>%
ggplot(aes(x = Month, y = prop, fill = Status)) +
geom_col(position = "stack") +
scale_y_continuous(labels = scales::percent) +
labs(
x = "Month",
y = "Proportion",
fill = "Status"
) +
theme_minimal()
df %>%
count(PVT, Status) %>%
group_by(PVT) %>%
mutate(prop = n / sum(n)) %>%
ggplot(aes(x = PVT, y = prop, fill = Status)) +
geom_col(position = "stack") +
scale_y_continuous(labels = scales::percent) +
labs(
x = "PVT",
y = "Proportion",
fill = "Status"
) +
theme_minimal()
??predict
library(tidyverse)
library(tidyverse)
library(MuMIn)
library(terra)
library(terra)
library(broom)
library(readr)
library(readxl)
library(sf)
setwd("C:/Users/Alexis Means/Documents/Project/Nutrition Sampling/R code/biomass")
# Load the global models
spp_models <- readRDS('regression_equations/24and25-Biomass-Regression-Species-Top-Model-List.rds')
# Load the global models
spp_models <- readRDS('regression_equations/24and25-Biomass-Regression-Species-Top-Model-List.rds')
spp_model <- readRDS("C:/Users/Alexis Means/Documents/Project/Nutrition Sampling/R code/biomass/regression_equations/24and25-Biomass-Regression-Species-Top-Model-List.rds")
View(spp_model)
View(spp_model)
View(fam_model)
fam_model <- readRDS("C:/Users/Alexis Means/Documents/Project/Nutrition Sampling/R code/biomass/regression_equations/24and25-Biomass-Regression-Family-Top-Model-List.rds")
genus_model <- readRDS("C:/Users/Alexis Means/Documents/Project/Nutrition Sampling/R code/biomass/regression_equations/24and25-Biomass-Regression-Genus-Top-Model-List.rds")
fg_model <- readRDS("C:/Users/Alexis Means/Documents/Project/Nutrition Sampling/R code/biomass/regression_equations/24and25-Biomass-Regression-Functional-Group-Top-Model-List.rds")
all_models <- list(
spp   = spp_model,
fam   = fam_model,
genus = genus_model,
fg    = fg_model
)
View(spp_model)
View(fam_model)
View(genus_model)
View(fg_model)
