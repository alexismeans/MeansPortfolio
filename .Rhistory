axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(top_players, aes(x = TOI_per_GP, y = CF)) +
geom_point(aes(color = Player), alpha = 0.6) +  # Using color to distinguish players, adjust opacity for clarity
theme_minimal() +
labs(title = "Scatter Plot of CF vs. TOI per GP",
x = "TOI per GP",
y = "CF") +
scale_x_continuous(breaks = seq(15, 30, by = 5)) +  # Custom x-axis intervals from 15 to 30 in steps of 5
theme(legend.position = "right",
axis.text.x = element_text(angle = 45, hjust = 1))
top_players <- OnIce.Skater %>%
arrange(desc(CF)) %>%
top_n(10, CF)
ggplot(top_players, aes(x = TOI_per_GP, y = CF)) +
geom_point(aes(color = Player), alpha = 0.6) +  # Using color to distinguish players, adjust opacity for clarity
theme_minimal() +
labs(title = "Scatter Plot of CF vs. TOI per GP",
x = "TOI per GP",
y = "CF") +
scale_x_continuous(breaks = seq(30, 15, by = 5)) +  # Custom x-axis intervals from 15 to 30 in steps of 5
theme(legend.position = "right",
axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(top_players, aes(x = TOI_per_GP, y = CF)) +
geom_point(aes(color = Player), alpha = 0.6) +  # Using color to distinguish players, adjust opacity for clarity
theme_minimal() +
labs(title = "Scatter Plot of CF vs. TOI per GP",
x = "TOI per GP",
y = "CF") +
scale_x_continuous(breaks = seq(15, 30, by = 5)) +  # Custom x-axis intervals from 15 to 30 in steps of 5
theme(legend.position = "right",
axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(top_players, aes(x = TOI_per_GP, y = CF)) +
geom_point(aes(color = Player), alpha = 0.6) +  # Using color to distinguish players, adjust opacity for clarity
theme_minimal() +
labs(title = "Scatter Plot of CF vs. TOI per GP",
x = "TOI per GP",
y = "CF") +
scale_x_continuous(breaks = seq(20, 30, by = 5)) +  # Custom x-axis intervals from 15 to 30 in steps of 5
theme(legend.position = "right",
axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(top_players, aes(x = TOI_per_GP, y = CF)) +
geom_point(aes(color = Player), alpha = 0.6) +  # Using color to distinguish players, adjust opacity for clarity
theme_minimal() +
labs(title = "Scatter Plot of CF vs. TOI per GP",
x = "TOI per GP",
y = "CF") +
scale_x_continuous(breaks = seq(25, 30, by = 1)) +  # Custom x-axis intervals from 15 to 30 in steps of 5
theme(legend.position = "right",
axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(top_players, aes(x = TOI_per_GP, y = CF)) +
geom_point(aes(color = Player), alpha = 0.6) +  # Using color to distinguish players, adjust opacity for clarity
theme_minimal() +
labs(title = "Scatter Plot of CF vs. TOI per GP",
x = "TOI per GP",
y = "CF") +
scale_x_continuous(breaks = seq(15, 30, by = 1)) +  # Custom x-axis intervals from 15 to 30 in steps of 5
theme(legend.position = "right",
axis.text.x = element_text(angle = 45, hjust = 1))
top_players <- OnIce.Skater %>%
arrange(desc(CF)) %>%
top_n(20, CF)
ggplot(top_players, aes(x = TOI_per_GP, y = CF)) +
geom_point(aes(color = Player), alpha = 0.6) +  # Using color to distinguish players, adjust opacity for clarity
theme_minimal() +
labs(title = "Scatter Plot of CF vs. TOI per GP",
x = "TOI per GP",
y = "CF") +
scale_x_continuous(breaks = seq(15, 30, by = 1)) +  # Custom x-axis intervals from 15 to 30 in steps of 5
theme(legend.position = "right",
axis.text.x = element_text(angle = 45, hjust = 1))
OnIce.Skater <- OnIce.Skater %>%
mutate(TOI/GP = TOI / GP)
_
OnIce.Skater <- OnIce.Skater %>%
mutate(TOI_per_GP = TOI / GP)
top_players <- OnIce.Skater %>%
arrange(desc(CF)) %>%
top_n(20, CF)
ggplot(top_players, aes(x = TOI_per_GP, y = CF)) +
geom_point(aes(color = Player), alpha = 0.6) +  # Using color to distinguish players, adjust opacity for clarity
theme_minimal() +
labs(title = "Scatter Plot of CF vs. TOI per GP",
x = "TOI per GP",
y = "CF") +
scale_x_continuous(breaks = seq(15, 30, by = 1)) +  # Custom x-axis intervals from 15 to 30 in steps of 5
theme(legend.position = "right",
axis.text.x = element_text(angle = 45, hjust = 1))
Goalie <- Goalie %>%
mutate(TOI_by_GP = (TOI/GP))
Goalie <- Goalie %>%
mutate(TOI_by_GP = (TOI/GP))
top_players <- OnIce.Skater %>%
arrange(desc(SV.)) %>%
top_n(30, SV.)
top_players <- Goalie %>%
arrange(desc(SV.)) %>%
top_n(30, SV.)
ggplot(top_goalie, aes(x = Player, y = SV.)) +
geom_bar(stat = "identity") +
theme_minimal() +
labs(title = "SV Values for Each Goalie", x = "Player", y = "SV %") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5))
top_goalie <- Goalie %>%
arrange(desc(SV.)) %>%
top_n(30, SV.)
ggplot(top_goalie, aes(x = Player, y = SV.)) +
geom_bar(stat = "identity") +
theme_minimal() +
labs(title = "SV Values for Each Goalie", x = "Player", y = "SV %") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5))
top_goalie <- Goalie %>%
arrange(desc(SV.)) %>%
top_n(30, SV.)
ggplot(top_goalie, aes(x = Player, y = SV.)) +
geom_bar(stat = "identity") +
theme_minimal() +
labs(title = "SV Values for Each Goalie", x = "Player", y = "SV %") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5))
top_goalie <- Goalie %>%
arrange(desc(SV.)) %>%
top_n(30, SV.)
top_goalie$Player <- factor(top_goalie$Player, levels = top_goalie$Player)
ggplot(top_goalie, aes(x = Player, y = SV.)) +
geom_bar(stat = "identity") +
theme_minimal() +
labs(title = "SV Values for Each Goalie", x = "Player", y = "SV %") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5))
ggplot(Goalie, aes(x = TOI_by_GP, y = GSAA)) +
geom_point(aes(color = Player), alpha = 0.6) +  # Using color to distinguish players, adjust opacity for clarity
theme_minimal() +
labs(title = "Scatter Plot of GSAA vs. TOI per GP",
x = "TOI per GP",
y = "GSAA") +
scale_x_continuous(breaks = seq(0, 50, by = 10)) +  # Custom x-axis intervals from 15 to 30 in steps of 5
theme(legend.position = "right",
axis.text.x = element_text(angle = 45, hjust = 1))
top_goalie <- Goalie %>%
arrange(desc(GSAA)) %>%
top_n(30, GSAA)
ggplot(top_goalie, aes(x = TOI_by_GP, y = GSAA)) +
geom_point(aes(color = Player), alpha = 0.6) +  # Using color to distinguish players, adjust opacity for clarity
theme_minimal() +
labs(title = "Scatter Plot of GSAA vs. TOI per GP",
x = "TOI per GP",
y = "GSAA") +
scale_x_continuous(breaks = seq(0, 50, by = 10)) +  # Custom x-axis intervals from 15 to 30 in steps of 5
theme(legend.position = "right",
axis.text.x = element_text(angle = 45, hjust = 1))
top_goalie <- Goalie %>%
arrange(desc(GSAA)) %>%
top_n(50, GSAA)
ggplot(top_goalie, aes(x = TOI_by_GP, y = GSAA)) +
geom_point(aes(color = Player), alpha = 0.6) +  # Using color to distinguish players, adjust opacity for clarity
theme_minimal() +
labs(title = "Scatter Plot of GSAA vs. TOI per GP",
x = "TOI per GP",
y = "GSAA") +
scale_x_continuous(breaks = seq(0, 50, by = 10)) +  # Custom x-axis intervals from 15 to 30 in steps of 5
theme(legend.position = "right",
axis.text.x = element_text(angle = 45, hjust = 1))
Goalie<- Goalie %>%
filter(TOI_by_GP >= 50)
top_goalie <- Goalie %>%
arrange(desc(GSAA))
top_goalie <- Goalie %>%
arrange(desc(GSAA)) %>%
top_n(30, GSAA)
ggplot(top_goalie, aes(x = TOI_by_GP, y = GSAA)) +
geom_point(aes(color = Player), alpha = 0.6) +
theme_minimal() +
labs(title = "Scatter Plot of GSAA vs. TOI per GP",
x = "TOI per GP",
y = "GSAA") +
scale_x_continuous(breaks = seq(0, 50, by = 5)) +  # Custom x-axis intervals from 15 to 30 in steps of 5
theme(legend.position = "right",
axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(top_goalie, aes(x = TOI_by_GP, y = GSAA)) +
geom_point(aes(color = Player), alpha = 0.6) +
theme_minimal() +
labs(title = "Scatter Plot of GSAA vs. TOI per GP",
x = "TOI per GP",
y = "GSAA") +
scale_x_continuous(breaks = seq(0, 50, by = 10)) +  # Custom x-axis intervals from 15 to 30 in steps of 5
theme(legend.position = "right",
axis.text.x = element_text(angle = 45, hjust = 1))
top_goalie <- Goalie %>%
arrange(desc(GSAA)) %>%
top_n(50, GSAA)
ggplot(top_goalie, aes(x = TOI_by_GP, y = GSAA)) +
geom_point(aes(color = Player), alpha = 0.6) +
theme_minimal() +
labs(title = "Scatter Plot of GSAA vs. TOI per GP",
x = "TOI per GP",
y = "GSAA") +
scale_x_continuous(breaks = seq(0, 50, by = 10)) +  # Custom x-axis intervals from 15 to 30 in steps of 5
theme(legend.position = "right",
axis.text.x = element_text(angle = 45, hjust = 1))
top_goalie <- Goalie %>%
arrange(desc(GSAA)) %>%
top_n(30, GSAA)
ggplot(top_goalie, aes(x = TOI_by_GP, y = GSAA)) +
geom_point(aes(color = Player), alpha = 0.6) +
theme_minimal() +
labs(title = "Scatter Plot of GSAA vs. TOI per GP",
x = "TOI per GP",
y = "GSAA") +
scale_x_continuous(breaks = seq(0, 50, by = 10)) +  # Custom x-axis intervals from 15 to 30 in steps of 5
theme(legend.position = "right",
axis.text.x = element_text(angle = 45, hjust = 1))
Goalie <- read.csv("Goalies.csv")
Goalie <- Goalie %>%
mutate(TOI_by_GP = (TOI/GP))
top_goalie <- Goalie %>%
arrange(desc(GSAA)) %>%
top_n(30, GSAA)
ggplot(top_goalie, aes(x = TOI_by_GP, y = GSAA)) +
geom_point(aes(color = Player), alpha = 0.6) +
theme_minimal() +
labs(title = "Scatter Plot of GSAA vs. TOI per GP",
x = "TOI per GP",
y = "GSAA") +
scale_x_continuous(breaks = seq(0, 50, by = 10)) +  # Custom x-axis intervals from 15 to 30 in steps of 5
theme(legend.position = "right",
axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(top_goalie, aes(x = TOI_by_GP, y = GSAA)) +
geom_point(aes(color = Player), alpha = 0.6) +
theme_minimal() +
labs(title = "Scatter Plot of GSAA vs. TOI per GP",
x = "TOI per GP",
y = "GSAA") +
scale_x_continuous(breaks = seq(40, 50, by = 1)) +  # Custom x-axis intervals from 15 to 30 in steps of 5
theme(legend.position = "right",
axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(top_goalie, aes(x = TOI_by_GP, y = GSAA)) +
geom_point(aes(color = Player), alpha = 0.6) +
theme_minimal() +
labs(title = "Scatter Plot of GSAA vs. TOI per GP",
x = "TOI per GP",
y = "GSAA") +
scale_x_continuous(breaks = seq(40, 60, by = 5)) +  # Custom x-axis intervals from 15 to 30 in steps of 5
theme(legend.position = "right",
axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(top_goalie, aes(x = TOI_by_GP, y = GSAA)) +
geom_point(aes(color = Player), alpha = 0.6) +
theme_minimal() +
labs(title = "Scatter Plot of GSAA vs. TOI per GP",
x = "TOI per GP",
y = "GSAA") +
scale_x_continuous(breaks = seq(40, 70, by = 5)) +  # Custom x-axis intervals from 15 to 30 in steps of 5
theme(legend.position = "right",
axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(top_goalie, aes(x = TOI_by_GP, y = GSAA)) +
geom_point(aes(color = Player), alpha = 0.6) +
theme_minimal() +
labs(title = "Scatter Plot of GSAA vs. TOI per GP",
x = "TOI per GP",
y = "GSAA") +
scale_x_continuous(breaks = seq(40, 65, by = 5)) +  # Custom x-axis intervals from 15 to 30 in steps of 5
theme(legend.position = "right",
axis.text.x = element_text(angle = 45, hjust = 1))
Goalie_filtered<- Goalie %>%
filter(TOI_by_GP >= 50)
top_goalie <- Goalie_filtered %>%
arrange(desc(GSAA)) %>%
top_n(30, GSAA)
ggplot(top_goalie, aes(x = HDGSAA, y = GSAA)) +
geom_point(aes(color = Player), alpha = 0.6) +
theme_minimal() +
labs(title = "Scatter Plot of GSAA vs. HDGSAA",
x = "HDGSAA",
y = "GSAA") +
scale_x_continuous(breaks = seq(0, 65, by = 10)) +  # Custom x-axis intervals from 15 to 30 in steps of 5
theme(legend.position = "right",
axis.text.x = element_text(angle = 45, hjust = 1))
Goalie <- Goalie %>%
mutate(TOI_by_GP = (TOI/GP))
top_goalie <- Goalie %>%
arrange(desc(SV.)) %>%
top_n(30, SV.)
top_goalie$Player <- factor(top_goalie$Player, levels = top_goalie$Player)
ggplot(top_goalie, aes(x = Player, y = SV.)) +
geom_bar(stat = "identity") +
theme_minimal() +
labs(title = "SV Values for Each Goalie", x = "Player", y = "SV %") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5))
Goalie_final <- Goalie_filtered %>%
filter(GSAA <= 10)
ggplot(Goalie_final, aes(x = Player, y = HDGSAA)) +
geom_bar(stat = "identity") +
theme_minimal() +
labs(title = "HDGSAA Values for Each Player", x = "Player", y = "HDGSAA") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5))
Goalie_final <- Goalie_filtered %>%
filter(GSAA <= 10) %>%
arrange(desc(HDGSAA)) %>%
top_n(30, HDGSAA)
ggplot(Goalie_final, aes(x = Player, y = HDGSAA)) +
geom_bar(stat = "identity") +
theme_minimal() +
labs(title = "HDGSAA Values for Each Player", x = "Player", y = "HDGSAA") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5))
Goalie_final <- Goalie_filtered %>%
filter(GSAA <= 10) %>%
arrange(desc(HDGSAA)) %>%
top_n(30, HDGSAA)
ggplot(Goalie_final, aes(x = reorder(Player, -HDGSAA), y = HDGSAA)) +
geom_bar(stat = "identity") +
theme_minimal() +
labs(title = "HDGSAA Values for Each Player", x = "Player", y = "HDGSAA") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5))
ggplot(top_goalie, aes(x = TOI_by_GP, y = GSAA)) +
geom_point(aes(color = Player), alpha = 0.6) +
theme_minimal() +
labs(title = "Scatter Plot of GSAA vs. TOI per GP",
x = "TOI per GP",
y = "GSAA") +
scale_x_continuous(breaks = seq(40, 65, by = 5)) +  # Custom x-axis intervals from 15 to 30 in steps of 5
theme(legend.position = "none",
axis.text.x = element_text(angle = 45, hjust = 1))
Goalie <- Goalie %>%
mutate(TOI_by_GP = (TOI/GP))
top_goalie <- Goalie %>%
arrange(desc(SV.)) %>%
filter(TOI_by_GP <= 50)
top_n(30, SV.)
top_goalie$Player <- factor(top_goalie$Player, levels = top_goalie$Player)
ggplot(top_goalie, aes(x = Player, y = SV.)) +
geom_bar(stat = "identity") +
theme_minimal() +
labs(title = "SV Values for Each Goalie", x = "Player", y = "SV %") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5))
top_goalie <- Goalie %>%
arrange(desc(SV.)) %>%
filter(TOI_by_GP <= 50)
top_goalie <- Goalie %>%
arrange(desc(SV.)) %>%
filter(TOI_by_GP <= 50) %>%
top_n(30, SV.)
top_goalie$Player <- factor(top_goalie$Player, levels = top_goalie$Player)
ggplot(top_goalie, aes(x = Player, y = SV.)) +
geom_bar(stat = "identity") +
theme_minimal() +
labs(title = "SV Values for Each Goalie", x = "Player", y = "SV %") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5))
filtered_individual <- Indivdual.Skater %>%
filter(positions == "D")
filtered_individual <- Indivdual.Skater %>%
filter(Position == "D")
filtered_OnIce <- OnIce.Skater %>%
filter(Position == "D")
individual <- Indivdual.Skater %>%
filter(Position == "D")
OnIce <- OnIce.Skater %>%
filter(Position == "D")
View(individual)
OnIce <- OnIce.Skater %>%
filter(Position == "D")
ggplot(OnIce, aes(x = GF., y = SF.)) +
geom_point(aes(color = Player), alpha = 0.6) +
theme_minimal() +
labs(title = "Scatter Plot of GF vs. SF",
x = "GF",
y = "SF") +
theme(legend.position = "right",
axis.text.x = element_text(angle = 45, hjust = 1))
OnIce <- OnIce.Skater %>%
filter(Position == "D") %>%
ggplot(OnIce, aes(x = GF., y = SF.)) +
geom_point(aes(color = Player), alpha = 0.6) +
theme_minimal() +
labs(title = "Scatter Plot of GF vs. SF",
x = "GF",
y = "SF") +
theme(legend.position = "none")
OnIce <- OnIce.Skater %>%
filter(Position == "D") %>%
ggplot(OnIce, aes(x = GF., y = SF.)) +
geom_point(aes(color = Player), alpha = 0.6) +
theme_minimal() +
labs(title = "Scatter Plot of GF vs. SF",
x = "Goals For (GF)",
y = "Shots For (SF)") +
theme(legend.position = "none")
OnIce <- OnIce.Skater %>%
filter(Position == "D") %>%
ggplot(OnIce, aes(x = GF, y = SF)) +
geom_point(aes(color = Player), alpha = 0.6) +
theme_minimal() +
labs(title = "Scatter Plot of GF vs. SF",
x = "Goals For (GF)",
y = "Shots For (SF)") +
theme(legend.position = "none")
OnIce <- OnIce.Skater %>%
filter(Position == "D") %>%
ggplot(OnIce, aes(x = GF., y = SF.)) +
geom_point(aes(color = Player), alpha = 0.6) +  # Adjusting alpha for transparency
theme_minimal() +
labs(title = "Scatter Plot of GF vs. SF",
x = "Goals For (GF)",
y = "Shots For (SF)") +
theme(legend.position = "none")
OnIce <- OnIce.Skater %>%
filter(Position == "D") %>%
ggplot(OnIce, aes(x = GF., y = SF.)) +
geom_point(aes(color = Player), alpha = 0.6) +  # Adjusting alpha for transparency
theme_minimal() +
labs(title = "Scatter Plot of GF vs. SF",
x = "Goals For (GF)",
y = "Shots For (SF)") +
theme(legend.position = "none")
OnIce <- OnIce.Skater %>%
filter(Position == "D") %>%
ggplot(OnIce, aes(x = GF., y = SF.)) +
geom_point(aes(color = Player), alpha = 0.6) +  # Adjusting alpha for transparency
theme_minimal() +
labs(title = "Scatter Plot of GF vs. SF",
x = "Goals For (GF)",
y = "Shots For (SF)") +
theme(legend.position = "none")
OnIce <- OnIce.Skater %>%
filter(Position == "D")
ggplot(OnIce, aes(x = GF., y = SF.)) +
geom_point(aes(color = Player), alpha = 0.6) +  # Adjusting alpha for transparency
theme_minimal() +
labs(title = "Scatter Plot of GF vs. SF",
x = "Goals For (GF)",
y = "Shots For (SF)") +
theme(legend.position = "none")
gplot(OnIce, aes(x = GF., y = SF.)) +
geom_point(aes(color = Player), alpha = 0.6) +  # Scatter plot with transparency
geom_smooth(method = "lm", se = FALSE, color = "red") +  # Adds linear trendline without confidence interval
theme_minimal() +
labs(title = "Scatter Plot of GF vs. SF",
x = "Goals For (GF)",
y = "Shots For (SF)") +
theme(legend.position = "none")
ggplot(OnIce, aes(x = GF., y = SF.)) +
geom_point(aes(color = Player), alpha = 0.6) +  # Scatter plot with transparency
geom_smooth(method = "lm", se = FALSE, color = "red") +  # Adds linear trendline without confidence interval
theme_minimal() +
labs(title = "Scatter Plot of GF vs. SF",
x = "Goals For (GF)",
y = "Shots For (SF)") +
theme(legend.position = "none")
ggplot(OnIce, aes(x = GF., y = SF.)) +
geom_point(aes(color = Player), alpha = 0.6) +  # Scatter plot with transparency
geom_smooth(method = "lm", se = FALSE, color = "red") +  # Adds linear trendline without confidence interval
theme_minimal() +
labs(title = "Scatter Plot of GF vs. SF",
x = "Goals For (GF)",
y = "Shots For (SF)") +
theme(legend.position = "none")
ggplot(OnIce, aes(x = GF., y = SF.)) +
geom_line(aes(color = Player), alpha = 0.6) +  # Scatter plot with transparency
geom_smooth(method = "lm", se = FALSE, color = "red") +  # Adds linear trendline without confidence interval
theme_minimal() +
labs(title = "Scatter Plot of GF vs. SF",
x = "Goals For (GF)",
y = "Shots For (SF)") +
theme(legend.position = "none")
ggplot(OnIce, aes(x = GF., y = SF.)) +
geom_point(aes(color = Player), alpha = 0.6) +  # Scatter plot with transparency
geom_smooth(method = "lm", se = FALSE, color = "red") +  # Adds linear trendline without confidence interval
theme_minimal() +
labs(title = "Scatter Plot of GF vs. SF",
x = "Goals For (GF)",
y = "Shots For (SF)") +
theme(legend.position = "none")
OnIce$GF. <- as.numeric(OnIce$GF.)
OnIce$SF. <- as.numeric(OnIce$SF.)
OnIce$GF. <- as.numeric(OnIce$GF.)
OnIce$SF. <- as.numeric(OnIce$SF.)
ggplot(OnIce, aes(x = GF., y = SF.)) +
geom_point(aes(color = Player), alpha = 0.6) +  # Scatter plot with transparency
geom_smooth(method = "lm", se = FALSE, color = "red") +  # Adds linear trendline without confidence interval
theme_minimal() +
labs(title = "Scatter Plot of GF vs. SF",
x = "Goals For (GF)",
y = "Shots For (SF)") +
theme(legend.position = "none")
model <- lm(SF. ~ GF., data = OnIce)
summary(model)
p_value <- summary(model)$coefficients[2, 4]  # The p-value for GF. predictor
# Plot with annotation
ggplot(OnIce, aes(x = GF., y = SF.)) +
geom_point(aes(color = Player), alpha = 0.6) +
geom_smooth(method = "lm", se = TRUE, color = "red") +
theme_minimal() +
labs(title = "Scatter Plot of GF vs. SF",
x = "Goals For (GF)",
y = "Shots For (SF)") +
annotate("text", x = 0.5, y = 0.2, label = paste("p-value:", round(p_value, 4)), size = 5) +  # Add p-value annotation
theme(legend.position = "none")
residuals <- residuals(model)
ggplot(data.frame(GF = OnIce$GF., Residuals = residuals), aes(x = GF, y = Residuals)) +
geom_point(alpha = 0.6) +  # Scatter plot of residuals
geom_hline(yintercept = 0, linetype = "dashed", color = "red") +  # Horizontal line at 0 (reference line)
theme_minimal() +
labs(title = "Residual Plot of GF vs. SF Model",
x = "Goals For (GF)",
y = "Residuals") +
theme(legend.position = "none")
Indivdual.Skater <- read.csv("SkaterIndividualstats.csv")
Indivdual.Skater <- read.csv("SkaterIndividualstats.csv")
OnIce.Skater <- read.csv("SkaterOnicestats.csv")
Indivdual.Skater <- read.csv("SkaterIndividualstats.csv")
OnIce.Skater <- read.csv("SkaterOnicestats.csv")
Goalie <- read.csv("Goalies.csv")
OnIce.Skater <- read.csv("SkaterOnicestats.csv")
Goalie <- read.csv("Goalies.csv")
Individual.Skater.Rookie <- read.csv("RookieSkaterindividual.csv")
Rookie.Goalie <- read.csv("RookieGoalies.csv")
