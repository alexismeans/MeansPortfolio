#| message: false
library(ggplot2)
ggplot(transect, aes (x = PVT))+
geom_bar(fill = "darkblue")+
labs(title = "Number of Transects Sampled",
x = "PVT Type",
y = "Count") +
theme_grey()
#| warning: FALSE
#| message: false
library(ggplot2)
ggplot(transect, aes (x = PVT))+
geom_bar(fill = "darkblue")+
labs(title = "Number of Transects Sampled",
x = "Potential Vegetation Type",
y = "Count") +
theme_grey()
#| warning: FALSE
#| message: false
library(dplyr)
library(ggplot2)
library(lubridate)
transect <- transect %>%
mutate (Year = year(Date))
ggplot(transect, aes(x = Date, y = PVT)) +
geom_point(color = "blue")+
scale_x_date(date_labels = "%b")+
labs(title = "Sampling Dates",
x = "Month",
y = "Potential Vegetation Type") +
facet_wrap(~ Year, scales = "free_x") +
theme_bw()
#| warning: FALSE
#| message: false
transect <- transect %>%
mutate(DOY = yday(Date),
Year = factor(year(Date)))
ggplot(transect, aes(x = DOY, y = PVT, color = Year)) +
geom_point()+
scale_x_continuous(breaks = c( 75, 105, 136, 166, 197, 228),
labels = c("March", "Apr", "May", "June", "July", "Aug"))+
labs(title = "Sampling Dates",
x = "Month",
y = "Potential Vegetation Type",
color = "Year") +
theme_bw()
#| warning: FALSE
#| message: false
library(plotly)
comp <- read_excel(db, "Composition")
comp <- comp %>%
mutate(Date = ymd(Date)) %>%
mutate(DOY = yday(Date),
Month = month(Date, label = TRUE),
Year = factor(year(Date))) %>%
filter(!Spp %in% c("LITTER", "LICHEN", "ROCKS", "WATER", "EARTH", "DEADFALL", "NA")) %>%
mutate(PVT = substr(PlotID, 4, 6)) %>%
mutate(Pheno = na_if(Pheno, "NA")) %>%
filter(!is.na(Pheno))
comp <- comp %>%
mutate(
Pheno = case_when(
Pheno == "N" ~ "New",
Pheno == "B" ~ "Budding",
Pheno == "FL" ~ "Flowering",
Pheno == "FR" ~ "Fruiting",
Pheno == "M" ~ "Mature",
Pheno == "C" ~ "Cured",
TRUE ~ Pheno
),
PVT = case_when(
PVT == "672" ~ "Grassland",
PVT == "682" ~ "Riparian",
PVT == "660" ~ "Sparse",
PVT == "668" ~ "Scabland",
PVT == "669" ~ "Shrubland",
PVT == "674" ~ "Intermediate",
)
)
comp$Pheno <- factor(comp$Pheno,
levels = c("New", "Budding", "Flowering", "Fruiting", "Mature", "Cured"),
ordered = TRUE)
comp_plot <- comp %>%
count(Month, Pheno) %>%
group_by(Month) %>%
mutate(prop = n / sum(n)) %>%
ungroup()
p1 <-  ggplot(comp_plot, aes(x = Month, y = prop, fill = Pheno,
text = paste("Phenology:", Pheno,
"<br>Month:", Month,
"<br>Proportion:", scales::percent(prop)))) +
geom_col() +
scale_y_continuous(labels = scales::percent) +
labs(title = "Combined Phenology Timing", y = "Proportion", x = "Month", fill = "Phenology stage") +
theme_minimal()
# Convert to interactive Plotly plot
ggplotly(p1, tooltip = "text")
# Prepare the data
df_plot <- comp %>%
count(Year, Month, Pheno) %>%
group_by(Year, Month) %>%
mutate(prop = n / sum(n))
# Base ggplot
p <- ggplot(df_plot, aes(x = Month, y = prop, fill = Pheno,
text = paste("Phenology:", Pheno,
"<br>Month:", Month,
"<br>Year:", Year,
"<br>Proportion:", scales::percent(prop)))) +
geom_col() +
scale_y_continuous(labels = scales::percent) +
labs(title = "Phenology Timing Split by Year", y = "Proportion", x = "Month", fill = "Phenology stage") +
facet_wrap(~Year, ncol = 1) +
theme_minimal()
# Convert to interactive plotly plot
ggplotly(p, tooltip = "text")
pvt_comp <- comp %>%
count(PVT, Month, Pheno) %>%
group_by(PVT, Month) %>%
mutate(prop = n / sum(n)) %>%
ungroup()
p2 <- ggplot(pvt_comp, aes(x = Month, y = prop, fill = Pheno,
text = paste("Vegetation community:", PVT,
"<br>Phenology:", Pheno,
"<br>Month:", Month,
"<br>Proportion:", scales::percent(prop)))) +
geom_col() +
scale_y_continuous(labels = scales::percent) +
labs(title = "Phenology Timing Across Vegetation Types", y = "Proportion", x = "Month", fill = "Phenology stage") +
facet_wrap(~PVT, ncol = 2) +
theme_minimal()
ggplotly(p2, tooltip = "text")
pvt_comp <- comp %>%
count(PVT, Month, Pheno) %>%
group_by(PVT, Month) %>%
mutate(prop = n / sum(n)) %>%
ungroup()
p2 <- ggplot(pvt_comp, aes(x = Month, y = prop, fill = Pheno,
text = paste("Vegetation community:", PVT,
"<br>Phenology:", Pheno,
"<br>Month:", Month,
"<br>Proportion:", scales::percent(prop)))) +
geom_col() +
scale_y_continuous(labels = scales::percent) +
labs(title = "Phenology Timing Across Vegetation Types", y = "Proportion", x = "Month", fill = "Phenology stage") +
facet_wrap(~PVT, ncol = 2) +
theme_minimal()
ggplotly(p2, tooltip = "text")
#| warning: FALSE
#| message: false
library(DT)
db <- "C:/Users/Alexis Means/Documents/Project/Nutrition Sampling/VegDatabases/Working.composition.data.xlsx"
q <- "C:/Users/Alexis Means/Documents/Project/Nutrition Sampling/R code/quality/processed.data/24_quality_results.xlsx"
quality <- read_excel(q, "24_quality_results")
plant <- read_excel(db, "PlantList")
plant <- plant %>%
select(Spp, Genus, Species, CommonName, FunctionalGroup, Status)
quality <- quality %>%
select(Sample_ID, PVT, Spp, Pheno, Part, DP, DE) %>%
left_join(plant, by = "Spp")
grass <- quality %>%
filter(str_detect(FunctionalGroup, "G")) %>%
filter(Spp != "UNK GRASS") %>%
filter(!Sample_ID %in% c(251, 275, 264))
grass.list <- plant %>%
filter(str_detect(FunctionalGroup, "G"))
datatable(grass.list, options = list(pageLength = 10))
# Create ggplot with dashed reference lines
p <- ggplot(grass, aes(
x = DE,
y = DP,
color = Status,
text = paste0(
"Spp: ", Spp,
"<br>Pheno: ", Pheno,
"<br>Part: ", Part,
"<br>Status: ", Status,
"<br>DE: ", round(DE, 2),
"<br>DP: ", round(DP, 2)
)
)) +
geom_point(size = 4) +
geom_vline(xintercept = 11.5, linetype = "dashed", color = "gray50") +
geom_hline(yintercept = 7.5, linetype = "dashed", color = "gray50") +
labs(
title = "Overall Quality Metrics of Observed Grasses",
x = "DE",
y = "DP",
color = "Status"
) +
theme_minimal(base_size = 12)
# Convert to interactive Plotly plot
p_plotly <- ggplotly(p, tooltip = "text") %>%
layout(
showlegend = TRUE,
legend = list(
title = list(text = ""),
orientation = "h",   # horizontal
x = 0.5,             # center horizontally
y = -0.2,            # below the x-axis
xanchor = "center",
yanchor = "top"
)
)
p_plotly
#| warning: FALSE
#| message: false
library(ggrepel)  # optional, for non-overlapping labels
# Create plot
ggplot(grass, aes(x = DE, y = DP)) +
geom_point(aes(color = Status), size = 3) +  # points colored by Status
# Label each point
geom_text_repel(aes(label = paste(Spp, Pheno, sep = "_")), size = 3) +  # uses ggrepel to avoid overlap
# Set axis starting points
xlim(11, max(grass$DE) + 0.5) +
ylim(7, max(grass$DP) + 0.5) +
labs(
title = "Top Grass Species",
x = "DE",
y = "DP",
color = "Status"
) +
theme_minimal(base_size = 12)
#| warning: FALSE
#| message: false
forb <- quality %>%
filter(str_detect(FunctionalGroup, "F")) %>%
filter(!Sample_ID %in% "308")
forb.list <- plant %>%
filter(str_detect(FunctionalGroup, "F"))
datatable(forb.list, options = list(pageLength = 10))
p2 <- ggplot(forb, aes(
x = DE,
y = DP,
color = Status,
text = paste0(
"Spp: ", Spp,
"<br>Pheno: ", Pheno,
"<br>Part: ", Part,
"<br>Status: ", Status,
"<br>DE: ", round(DE, 2),
"<br>DP: ", round(DP, 2)
)
)) +
geom_point(size = 3) +
geom_vline(xintercept = 11.5, linetype = "dashed", color = "gray50") +
geom_hline(yintercept = 7.5, linetype = "dashed", color = "gray50") +
labs(
title = "Overall Quality Metrics of Observed Forbs",
x = "DE",
y = "DP",
color = "Status"
) +
theme_minimal(base_size = 12)
# Convert to interactive Plotly plot
p2_plotly <- ggplotly(p2, tooltip = "text") %>%
layout(
legend = list(
title = list(text = ""),
orientation = "h",   # horizontal
x = 0.5,             # center horizontally
y = -0.2,            # below the x-axis
xanchor = "center",
yanchor = "top"
)
)
p2_plotly
#| warning: FALSE
#| message: false
# Create plot
ggplot(forb, aes(x = DE, y = DP)) +
geom_point(aes(color = Status), size = 3) +  # points colored by Status
# Label each point
geom_text_repel(aes(label = paste(Spp, Pheno, sep = "_")), size = 3) +  # uses ggrepel to avoid overlap
# Set axis starting points
xlim(11, max(grass$DE) + 0.5) +
ylim(7, 18) +
labs(
title = "Top Forb Species",
x = "DE",
y = "DP",
color = "Status"
) +
theme_minimal(base_size = 12)
#| warning: FALSE
#| message: false
shrub <- quality %>%
filter(FunctionalGroup %in% c("ES", "S", "T", "V"))
shrub.list <- plant %>%
filter(FunctionalGroup %in% c("ES", "S", "T", "V"))
datatable(shrub.list, options = list(pageLength = 10))
p3 <- ggplot(shrub, aes(
x = DE,
y = DP,
color = Status,   # still mapped for tooltip/legend
text = paste0(
"Spp: ", Spp,
"<br>Pheno: ", Pheno,
"<br>Part: ", Part,
"<br>Status: ", Status,
"<br>DE: ", round(DE, 2),
"<br>DP: ", round(DP, 2)
)
)) +
geom_point(size = 4, color = "#12bec7") +
geom_vline(xintercept = 11.5, linetype = "dashed", color = "gray50") +
geom_hline(yintercept = 7.5, linetype = "dashed", color = "gray50") +
labs(
title = "Overall Quality Metrics of Observed Shrubs/Trees",
x = "DE",
y = "DP",
color = "Status"
) +
theme_minimal(base_size = 12)
p3_plotly <- ggplotly(p3, tooltip = "text") %>%
layout(
legend = list(
title = list(text = ""),
orientation = "h",   # horizontal
x = 0.5,             # center horizontally
y = -0.2,            # below the x-axis
xanchor = "center",
yanchor = "top"
)
)
p3_plotly
#| warning: FALSE
#| message: false
# Create plot
ggplot(shrub, aes(x = DE, y = DP)) +
geom_point(aes(color = Status), size = 3) +  # points colored by Status
# Label each point
geom_text_repel(aes(label = paste(Spp, Pheno, sep = "_")), size = 3) +  # uses ggrepel to avoid overlap
# Set axis starting points
xlim(11, max(grass$DE) + 0.5) +
ylim(7, max(grass$DP) + 0.5) +
labs(
title = "Top Shrub or Tree Species",
x = "DE",
y = "DP",
color = "Status"
) +
theme_minimal(base_size = 12)
# ggplot with facets
invasive <- ggplot(grass, aes(
x = DE,
y = DP,
color = Status,
text = paste0(
"Spp: ", Spp,
"<br>Pheno: ", Pheno,
"<br>Part: ", Part,
"<br>Status: ", Status,
"<br>DE: ", round(DE, 2),
"<br>DP: ", round(DP, 2)
)
)) +
geom_point(size = 3) +
facet_wrap(~Status, scales = "fixed") +   # same x and y for both facets
geom_vline(xintercept = 11.5, linetype = "dashed", color = "gray50") +
geom_hline(yintercept = 7.5, linetype = "dashed", color = "gray50") +
labs(
title = "Grass Quality Metrics by Status",
x = "DE",
y = "DP"
) +
coord_cartesian(xlim = c(9, 14), ylim = c(-2, 12)) +  # set same x and y limits
theme_minimal(base_size = 12)
# Convert to interactive plotly
ggplotly(invasive, tooltip = "text")
status <- plant %>%
select(Spp, Status, FunctionalGroup)
df <- comp %>%
left_join(status, by = "Spp")
df <- df %>%
mutate(Pheno = na_if(Status, "NA")) %>%
filter(!is.na(Status)) %>%
mutate(PVT = dplyr::recode(PVT,
`672` = "Grassland",
`682` = "Riparian",
`668` = "Scabland",
`669` = "Shrubland",
`674` = "Intermediate",
`660` = "Sparse"))
df %>%
count(Month, Status) %>%
group_by(Month) %>%
mutate(prop = n / sum(n)) %>%
ggplot(aes(x = Month, y = prop, fill = Status)) +
geom_col(position = "dodge") +
scale_y_continuous(labels = scales::percent) +
labs(
title = "Status Composition based on Month",
x = "Month",
y = "Proportion",
fill = "Status"
) +
theme_minimal()
df %>%
count(PVT, Status) %>%
group_by(PVT) %>%
mutate(prop = n / sum(n)) %>%
ggplot(aes(x = PVT, y = prop, fill = Status)) +
geom_col(position = "dodge") +
scale_y_continuous(labels = scales::percent) +
labs(
title = "Status Composition based on Vegetation Type",
x = "Potential Vegetation Type",
y = "Proportion",
fill = "Status"
) +
theme_minimal()
#| warning: FALSE
f <- "C:/Users/Alexis Means/Documents/Project/Nutrition Sampling/VegDatabases/Fecal.xlsx"
fecal <- read_excel(f, "Sheet1")
fecal.time <- fecal %>%
filter(!ID %in% c("25_045", "25_061")) %>%
mutate(
DATE = as.Date(
suppressWarnings(as.numeric(DATE)),  # convert Excel numbers to Date
origin = "1899-12-30"                # Excel date origin
)
) %>%
filter(!is.na(DATE)) %>%        # remove rows where DATE is NA
distinct(DATE, .keep_all = TRUE) %>%  # keep only one row per DATE
mutate(
DOY  = yday(DATE),
Year = factor(year(DATE))
)
ggplot(fecal.time, aes(x = DOY, y = Year, color = Year)) +
geom_jitter(height = 0.2, size = 3) +   # jitter vertically within each Year
scale_x_continuous(
breaks = c(1, 32, 61, 92, 122, 153, 183, 213),
labels = c("Jan", "Feb", "March", "Apr", "May", "June", "July", "Aug")
) +
labs(
title = "Sampling Dates by Year",
x = "Month",
y = "Year",
color = "Year"
) +
theme_bw()
#| warning: FALSE
fecal.loc <- fecal %>%
filter(!is.na(LAT) & !is.na(LONG)) %>%
filter(!ID %in% c("25_045", "25_061", "25_048")) %>%
st_as_sf(coords = c("LONG", "LAT"), crs = 4326)  # convert to sf
jd <- st_transform(st_zm(jd), crs = 4326)
#| warning: FALSE
#| message: FALSE
library(ggmap)
river <- st_read(
"C:/Users/Alexis Means/Documents/Project/JohnDayRiver_shp/JohnDayRiver.shp",
quiet = TRUE
)
jd <- st_read(
"C:/Users/Alexis Means/Documents/Project/Nutrition Sampling/2025_GRTS/25_StudyArea/25_LJD_StudyArea_all.shp",
quiet = TRUE
)
jd <- st_transform(st_zm(jd), crs = 32610)
river <- st_transform(st_zm(river), crs = 32610)
river <- st_intersection(river, jd)
ggplot() +
geom_sf(data = jd, fill = NA, color = "black", size = 0.6) +
geom_sf(data = river, color = "blue", size = 0.8) +
geom_point(
data = transect,
aes(x = easting, y = northing, color = PVT),
size = 2,
alpha = 0.8
) +
scale_color_manual(values = c(
"Grassland" = "green",
"Riparian" = "blue",
"Sparse" = "brown",
"Intermediate" = "yellow",
"Scabland" = "purple",
"Shrubland" = "red"
)) +
labs(
title = "Sample Locations within the John Day",
x = "Easting",
y = "Northing",
color = "Vegetation Type"
) +
theme_minimal() +
theme(legend.position = "right")
#| warning: FALSE
fecal.loc <- fecal %>%
filter(!is.na(LAT) & !is.na(LONG)) %>%
filter(!ID %in% c("25_045", "25_061", "25_048")) %>%
st_as_sf(coords = c("LONG", "LAT"), crs = 4326)  # convert to sf
jd <- st_transform(st_zm(jd), crs = 4326)
river <- st_transform(st_zm(river), crs = 4326)
river <- st_intersection(river, jd)
ggplot() +
geom_sf(data = jd, fill = NA, color = "black", size = 0.6) +
geom_sf(data = river, color = "blue", size = 0.8) +
geom_sf(data = fecal.loc, aes(color = QUALITY), size = 2, alpha = 0.8) +
labs(
title = "Sample Locations within the John Day",
x = "Longitude",
y = "Latitude",
color = "Sample Freshness"
) +
theme_minimal() +
theme(legend.position = "right") +
scale_x_continuous(
breaks = pretty(range(st_coordinates(jd)[,1]), n = 3)
) +
scale_y_continuous(
breaks = pretty(range(st_coordinates(jd)[,2]), n = 3)
)
